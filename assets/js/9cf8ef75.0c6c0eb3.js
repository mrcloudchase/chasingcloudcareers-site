"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[8260],{8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function r(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(o.Provider,{value:e},n.children)}},8643:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"linux-engineering/networking-security","title":"Network Configuration and Security","description":"Master Linux networking fundamentals, security practices, and system hardening techniques.","source":"@site/docs/linux-engineering/04-networking-security.md","sourceDirName":"linux-engineering","slug":"/linux-engineering/networking-security","permalink":"/chasingcloudcareers-site/docs/linux-engineering/networking-security","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/linux-engineering/04-networking-security.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Shell Scripting and Automation","permalink":"/chasingcloudcareers-site/docs/linux-engineering/shell-scripting"},"next":{"title":"Server Management and Performance","permalink":"/chasingcloudcareers-site/docs/linux-engineering/server-management"}}');var i=s(4848),o=s(8453);const r={sidebar_position:5},a="Network Configuration and Security",l={},c=[{value:"Linux Networking Fundamentals",id:"linux-networking-fundamentals",level:2},{value:"Network Interfaces and Configuration",id:"network-interfaces-and-configuration",level:3},{value:"Network Configuration Methods",id:"network-configuration-methods",level:3},{value:"Routing and DNS",id:"routing-and-dns",level:3},{value:"Network Troubleshooting Tools",id:"network-troubleshooting-tools",level:3},{value:"Practical Networking Examples",id:"practical-networking-examples",level:3},{value:"Firewall Configuration",id:"firewall-configuration",level:2},{value:"Understanding iptables",id:"understanding-iptables",level:3},{value:"UFW (Uncomplicated Firewall)",id:"ufw-uncomplicated-firewall",level:3},{value:"firewalld (CentOS/RHEL/Fedora)",id:"firewalld-centosrhelfedora",level:3},{value:"Practical Firewall Examples",id:"practical-firewall-examples",level:3},{value:"System Security and Hardening",id:"system-security-and-hardening",level:2},{value:"User and Access Security",id:"user-and-access-security",level:3},{value:"File System Security",id:"file-system-security",level:3},{value:"System Monitoring and Auditing",id:"system-monitoring-and-auditing",level:3},{value:"Security Scanning and Assessment",id:"security-scanning-and-assessment",level:3},{value:"Practical Security Examples",id:"practical-security-examples",level:3},{value:"Hands-on Exercise: Complete Network Security Setup",id:"hands-on-exercise-complete-network-security-setup",level:2},{value:"Free Learning Resources",id:"free-learning-resources",level:2},{value:"Networking Resources",id:"networking-resources",level:3},{value:"Security Resources",id:"security-resources",level:3},{value:"Practice Labs",id:"practice-labs",level:3},{value:"Documentation",id:"documentation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"network-configuration-and-security",children:"Network Configuration and Security"})}),"\n",(0,i.jsx)(e.p,{children:"Master Linux networking fundamentals, security practices, and system hardening techniques."}),"\n",(0,i.jsx)(e.h2,{id:"linux-networking-fundamentals",children:"Linux Networking Fundamentals"}),"\n",(0,i.jsx)(e.p,{children:"Understanding networking is essential for system administration, troubleshooting, and security."}),"\n",(0,i.jsx)(e.h3,{id:"network-interfaces-and-configuration",children:"Network Interfaces and Configuration"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Understanding Network Interfaces:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Physical interfaces"}),": eth0, eth1 (Ethernet), wlan0 (WiFi)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Virtual interfaces"}),": lo (loopback), docker0, br0 (bridge)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Modern naming"}),": enp0s3, wlp2s0 (predictable interface names)"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Viewing Network Interfaces:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Modern command (preferred)\nip addr show\n# or shorter\nip a\n\n# Legacy command (still widely used)\nifconfig\n\n# Show only active interfaces\nip link show up\n\n# Show specific interface\nip addr show eth0\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Understanding Interface Output:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"ip addr show eth0\n# 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n#     link/ether 08:00:27:12:34:56 brd ff:ff:ff:ff:ff:ff\n#     inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic eth0\n#        valid_lft 86400sec preferred_lft 86400sec\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Key Information Explained:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"UP"}),": Interface is active"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"mtu 1500"}),": Maximum Transmission Unit"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"link/ether"}),": MAC address"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"inet"}),": IPv4 address with subnet mask (/24)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"brd"}),": Broadcast address"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"network-configuration-methods",children:"Network Configuration Methods"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Temporary Configuration (lost on reboot):"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Assign IP address\nsudo ip addr add 192.168.1.100/24 dev eth0\n\n# Bring interface up/down\nsudo ip link set eth0 up\nsudo ip link set eth0 down\n\n# Add default route\nsudo ip route add default via 192.168.1.1\n\n# Add specific route\nsudo ip route add 10.0.0.0/8 via 192.168.1.1\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Permanent Configuration - Ubuntu/Debian (Netplan):"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Edit netplan configuration\nsudo nano /etc/netplan/01-network-manager-all.yaml\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: false\n      addresses:\n        - 192.168.1.100/24\n      gateway4: 192.168.1.1\n      nameservers:\n        addresses:\n          - 8.8.8.8\n          - 8.8.4.4\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Apply configuration\nsudo netplan apply\n\n# Test configuration\nsudo netplan try\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Permanent Configuration - CentOS/RHEL:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Edit interface configuration\nsudo nano /etc/sysconfig/network-scripts/ifcfg-eth0\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"TYPE=Ethernet\nBOOTPROTO=static\nNAME=eth0\nDEVICE=eth0\nONBOOT=yes\nIPADDR=192.168.1.100\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\nDNS1=8.8.8.8\nDNS2=8.8.4.4\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Restart networking\nsudo systemctl restart network\n# or on newer systems\nsudo systemctl restart NetworkManager\n"})}),"\n",(0,i.jsx)(e.h3,{id:"routing-and-dns",children:"Routing and DNS"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Viewing and Managing Routes:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Show routing table\nip route show\n# or\nroute -n\n\n# Show default route\nip route show default\n\n# Add route\nsudo ip route add 10.0.0.0/8 via 192.168.1.1\n\n# Delete route\nsudo ip route del 10.0.0.0/8\n\n# Add default route\nsudo ip route add default via 192.168.1.1\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"DNS Configuration:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# View current DNS servers\ncat /etc/resolv.conf\n\n# Example resolv.conf\nnameserver 8.8.8.8\nnameserver 8.8.4.4\nsearch example.com\n\n# Test DNS resolution\nnslookup google.com\ndig google.com\nhost google.com\n\n# Flush DNS cache (Ubuntu)\nsudo systemd-resolve --flush-caches\n"})}),"\n",(0,i.jsx)(e.h3,{id:"network-troubleshooting-tools",children:"Network Troubleshooting Tools"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Connectivity Testing:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Test connectivity to host\nping -c 4 google.com\n\n# Test specific port connectivity\ntelnet google.com 80\n# or using nc (netcat)\nnc -zv google.com 80\n\n# Trace route to destination\ntraceroute google.com\n# or\ntracepath google.com\n\n# Test network path MTU\nping -M do -s 1472 google.com\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Network Statistics and Monitoring:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Show network connections\nnetstat -tuln  # TCP/UDP listening ports\nnetstat -an    # All connections\nss -tuln       # Modern replacement for netstat\n\n# Show network interface statistics\ncat /proc/net/dev\n# or\nip -s link show\n\n# Monitor network traffic\niftop          # Install: sudo apt install iftop\nnethogs        # Install: sudo apt install nethogs\nnload          # Install: sudo apt install nload\n\n# Capture network packets\nsudo tcpdump -i eth0\nsudo tcpdump -i eth0 port 80\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Network Configuration Files:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Important network files\n/etc/hosts              # Static hostname to IP mappings\n/etc/hostname           # System hostname\n/etc/resolv.conf        # DNS configuration\n/etc/nsswitch.conf      # Name service switch configuration\n/etc/services           # Port to service mappings\n"})}),"\n",(0,i.jsx)(e.h3,{id:"practical-networking-examples",children:"Practical Networking Examples"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1: Network Diagnostic Script"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\necho "=== Network Diagnostic Report ==="\necho "Date: $(date)"\necho ""\n\n# System hostname\necho "Hostname: $(hostname)"\necho "FQDN: $(hostname -f 2>/dev/null || echo \'Not configured\')"\necho ""\n\n# Network interfaces\necho "=== Network Interfaces ==="\nip addr show | grep -E \'^[0-9]+:|inet \'\necho ""\n\n# Routing table\necho "=== Routing Table ==="\nip route show\necho ""\n\n# DNS configuration\necho "=== DNS Configuration ==="\ncat /etc/resolv.conf\necho ""\n\n# Test connectivity\necho "=== Connectivity Tests ==="\ntargets=("8.8.8.8" "google.com" "github.com")\n\nfor target in "${targets[@]}"; do\n    if ping -c 1 -W 2 "$target" >/dev/null 2>&1; then\n        echo "\u2713 $target - Reachable"\n    else\n        echo "\u2717 $target - Unreachable"\n    fi\ndone\necho ""\n\n# Active connections\necho "=== Active Network Connections ==="\nss -tuln | head -10\necho ""\n\n# Network usage\necho "=== Network Interface Statistics ==="\ncat /proc/net/dev | head -3\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2: Port Scanner Script"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nscan_port() {\n    local host=$1\n    local port=$2\n    local timeout=1\n    \n    if timeout $timeout bash -c "echo >/dev/tcp/$host/$port" 2>/dev/null; then\n        echo "Port $port: Open"\n        return 0\n    else\n        echo "Port $port: Closed"\n        return 1\n    fi\n}\n\nscan_host() {\n    local host=$1\n    shift\n    local ports=("$@")\n    \n    echo "Scanning $host..."\n    \n    for port in "${ports[@]}"; do\n        scan_port "$host" "$port"\n    done\n}\n\n# Usage example\nif [ $# -lt 2 ]; then\n    echo "Usage: $0 <host> <port1> [port2] [port3] ..."\n    echo "Example: $0 google.com 80 443 22"\n    exit 1\nfi\n\nhost=$1\nshift\nports=("$@")\n\nscan_host "$host" "${ports[@]}"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"firewall-configuration",children:"Firewall Configuration"}),"\n",(0,i.jsx)(e.p,{children:"Linux provides several firewall solutions to control network traffic and enhance security."}),"\n",(0,i.jsx)(e.h3,{id:"understanding-iptables",children:"Understanding iptables"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"iptables Basics:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Tables"}),": filter, nat, mangle, raw"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Chains"}),": INPUT, OUTPUT, FORWARD"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Targets"}),": ACCEPT, DROP, REJECT, LOG"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Basic iptables Commands:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# View current rules\nsudo iptables -L -n -v\n\n# View rules with line numbers\nsudo iptables -L --line-numbers\n\n# Save current rules (Ubuntu/Debian)\nsudo iptables-save > /etc/iptables/rules.v4\n\n# Restore rules\nsudo iptables-restore < /etc/iptables/rules.v4\n\n# Clear all rules (be careful!)\nsudo iptables -F\nsudo iptables -X\nsudo iptables -Z\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Common iptables Rules:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Allow loopback traffic\nsudo iptables -A INPUT -i lo -j ACCEPT\nsudo iptables -A OUTPUT -o lo -j ACCEPT\n\n# Allow established and related connections\nsudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n\n# Allow SSH (port 22)\nsudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n\n# Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Allow specific IP address\nsudo iptables -A INPUT -s 192.168.1.100 -j ACCEPT\n\n# Block specific IP address\nsudo iptables -A INPUT -s 192.168.1.200 -j DROP\n\n# Set default policies\nsudo iptables -P INPUT DROP\nsudo iptables -P FORWARD DROP\nsudo iptables -P OUTPUT ACCEPT\n\n# Delete specific rule\nsudo iptables -D INPUT 3  # Delete rule number 3\n"})}),"\n",(0,i.jsx)(e.h3,{id:"ufw-uncomplicated-firewall",children:"UFW (Uncomplicated Firewall)"}),"\n",(0,i.jsx)(e.p,{children:"UFW is a user-friendly front-end for iptables, commonly used on Ubuntu."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Basic UFW Commands:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Enable UFW\nsudo ufw enable\n\n# Disable UFW\nsudo ufw disable\n\n# Check status\nsudo ufw status\nsudo ufw status verbose\n\n# Reset to defaults\nsudo ufw --force reset\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"UFW Rule Examples:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Allow SSH\nsudo ufw allow ssh\n# or\nsudo ufw allow 22\n\n# Allow HTTP and HTTPS\nsudo ufw allow http\nsudo ufw allow https\n# or\nsudo ufw allow 80\nsudo ufw allow 443\n\n# Allow specific port range\nsudo ufw allow 1000:2000/tcp\n\n# Allow from specific IP\nsudo ufw allow from 192.168.1.100\n\n# Allow from specific subnet\nsudo ufw allow from 192.168.1.0/24\n\n# Allow specific service from specific IP\nsudo ufw allow from 192.168.1.100 to any port 22\n\n# Deny traffic\nsudo ufw deny 23  # Deny telnet\n\n# Delete rule\nsudo ufw delete allow 80\n# or by rule number\nsudo ufw status numbered\nsudo ufw delete 2\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Advanced UFW Configuration:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Set default policies\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow specific interface\nsudo ufw allow in on eth0 to any port 22\n\n# Rate limiting (protection against brute force)\nsudo ufw limit ssh\n\n# Application profiles\nsudo ufw app list\nsudo ufw allow 'Apache Full'\nsudo ufw allow 'OpenSSH'\n\n# Logging\nsudo ufw logging on\nsudo ufw logging medium\n"})}),"\n",(0,i.jsx)(e.h3,{id:"firewalld-centosrhelfedora",children:"firewalld (CentOS/RHEL/Fedora)"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Basic firewalld Commands:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Check status\nsudo systemctl status firewalld\nsudo firewall-cmd --state\n\n# Start/stop firewalld\nsudo systemctl start firewalld\nsudo systemctl stop firewalld\n\n# Get default zone\nsudo firewall-cmd --get-default-zone\n\n# List all zones\nsudo firewall-cmd --get-zones\n\n# List active zones\nsudo firewall-cmd --get-active-zones\n\n# Get zone information\nsudo firewall-cmd --zone=public --list-all\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"firewalld Rules:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Add service\nsudo firewall-cmd --zone=public --add-service=http --permanent\nsudo firewall-cmd --zone=public --add-service=https --permanent\n\n# Add port\nsudo firewall-cmd --zone=public --add-port=8080/tcp --permanent\n\n# Add source\nsudo firewall-cmd --zone=public --add-source=192.168.1.0/24 --permanent\n\n# Remove service/port\nsudo firewall-cmd --zone=public --remove-service=http --permanent\nsudo firewall-cmd --zone=public --remove-port=8080/tcp --permanent\n\n# Reload configuration\nsudo firewall-cmd --reload\n\n# List services and ports\nsudo firewall-cmd --zone=public --list-services\nsudo firewall-cmd --zone=public --list-ports\n"})}),"\n",(0,i.jsx)(e.h3,{id:"practical-firewall-examples",children:"Practical Firewall Examples"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1: Secure Web Server Setup"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# UFW configuration for web server\necho "Configuring firewall for web server..."\n\n# Reset UFW\nsudo ufw --force reset\n\n# Set default policies\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH (change port if using non-standard)\nsudo ufw allow 22/tcp\n\n# Allow HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Allow specific management IP (replace with your IP)\nsudo ufw allow from 203.0.113.100 to any port 22\n\n# Rate limit SSH to prevent brute force\nsudo ufw limit ssh\n\n# Enable logging\nsudo ufw logging on\n\n# Enable UFW\nsudo ufw enable\n\necho "Firewall configured successfully"\nsudo ufw status verbose\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2: Database Server Firewall"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Secure database server (MySQL/PostgreSQL)\necho "Configuring firewall for database server..."\n\n# Reset and set defaults\nsudo ufw --force reset\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH from management network only\nsudo ufw allow from 192.168.1.0/24 to any port 22\n\n# Allow MySQL from application servers only\nsudo ufw allow from 10.0.1.0/24 to any port 3306\n\n# Allow PostgreSQL from application servers only\nsudo ufw allow from 10.0.1.0/24 to any port 5432\n\n# Enable and show status\nsudo ufw enable\nsudo ufw status verbose\n'})}),"\n",(0,i.jsx)(e.h2,{id:"system-security-and-hardening",children:"System Security and Hardening"}),"\n",(0,i.jsx)(e.p,{children:"Securing a Linux system involves multiple layers of protection and following security best practices."}),"\n",(0,i.jsx)(e.h3,{id:"user-and-access-security",children:"User and Access Security"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Password Security:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Set password policies\nsudo nano /etc/login.defs\n\n# Key settings:\nPASS_MAX_DAYS   90      # Maximum password age\nPASS_MIN_DAYS   1       # Minimum password age\nPASS_WARN_AGE   7       # Warning days before expiration\nPASS_MIN_LEN    8       # Minimum password length\n\n# Install and configure PAM for password complexity\nsudo apt install libpam-pwquality  # Ubuntu/Debian\n# or\nsudo yum install libpwquality      # CentOS/RHEL\n\n# Configure password complexity\nsudo nano /etc/security/pwquality.conf\n\n# Example settings:\nminlen = 12\nminclass = 3\nmaxrepeat = 2\ndcredit = -1    # At least 1 digit\nucredit = -1    # At least 1 uppercase\nlcredit = -1    # At least 1 lowercase\nocredit = -1    # At least 1 special character\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Account Security:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Lock user account\nsudo usermod -L username\n# or\nsudo passwd -l username\n\n# Unlock user account\nsudo usermod -U username\n# or\nsudo passwd -u username\n\n# Set account expiration\nsudo chage -E 2024-12-31 username\n\n# Force password change on next login\nsudo chage -d 0 username\n\n# View account aging information\nsudo chage -l username\n\n# Disable unused accounts\nsudo usermod -s /sbin/nologin username\n\n# Remove user from sudo group\nsudo deluser username sudo  # Ubuntu/Debian\n# or\nsudo gpasswd -d username wheel  # CentOS/RHEL\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"SSH Security:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Edit SSH configuration\nsudo nano /etc/ssh/sshd_config\n\n# Recommended security settings:\nPort 2222                          # Change default port\nPermitRootLogin no                  # Disable root login\nPasswordAuthentication no           # Use key-based auth only\nPubkeyAuthentication yes            # Enable public key auth\nMaxAuthTries 3                      # Limit authentication attempts\nClientAliveInterval 300             # Client timeout\nClientAliveCountMax 2               # Max client alive messages\nAllowUsers user1 user2              # Limit allowed users\nDenyUsers baduser                   # Deny specific users\nProtocol 2                          # Use SSH protocol 2 only\n\n# Restart SSH service\nsudo systemctl restart sshd\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"SSH Key Management:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'# Generate SSH key pair\nssh-keygen -t rsa -b 4096 -C "your_email@example.com"\n# or for better security\nssh-keygen -t ed25519 -C "your_email@example.com"\n\n# Copy public key to server\nssh-copy-id -i ~/.ssh/id_rsa.pub user@server\n# or manually\ncat ~/.ssh/id_rsa.pub | ssh user@server \'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\'\n\n# Set proper permissions\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/id_rsa\nchmod 644 ~/.ssh/id_rsa.pub\n\n# Use SSH agent for key management\neval $(ssh-agent)\nssh-add ~/.ssh/id_rsa\n\n# SSH config for easier connections\nnano ~/.ssh/config\n\n# Example config:\nHost webserver\n    HostName 192.168.1.100\n    User admin\n    Port 2222\n    IdentityFile ~/.ssh/webserver_key\n'})}),"\n",(0,i.jsx)(e.h3,{id:"file-system-security",children:"File System Security"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"File Permissions and Attributes:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Set secure permissions for important files\nsudo chmod 600 /etc/shadow\nsudo chmod 644 /etc/passwd\nsudo chmod 644 /etc/group\nsudo chmod 600 /etc/gshadow\n\n# Set immutable attribute (prevents modification)\nsudo chattr +i /etc/passwd\nsudo chattr +i /etc/shadow\n\n# View file attributes\nlsattr /etc/passwd\n\n# Remove immutable attribute\nsudo chattr -i /etc/passwd\n\n# Find files with SUID/SGID bits\nfind / -type f \\( -perm -4000 -o -perm -2000 \\) -exec ls -l {} \\; 2>/dev/null\n\n# Find world-writable files\nfind / -type f -perm -002 -exec ls -l {} \\; 2>/dev/null\n\n# Find files without owner\nfind / -nouser -o -nogroup 2>/dev/null\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Access Control Lists (ACLs):"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Install ACL support\nsudo apt install acl  # Ubuntu/Debian\n\n# Set ACL permissions\nsetfacl -m u:username:rw file.txt      # User permissions\nsetfacl -m g:groupname:r file.txt      # Group permissions\nsetfacl -m o::--- file.txt             # Other permissions\n\n# View ACL permissions\ngetfacl file.txt\n\n# Remove ACL\nsetfacl -b file.txt\n\n# Set default ACL for directory\nsetfacl -d -m u:username:rwx /path/to/directory\n"})}),"\n",(0,i.jsx)(e.h3,{id:"system-monitoring-and-auditing",children:"System Monitoring and Auditing"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"System Logging:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'# Important log files\n/var/log/auth.log       # Authentication logs\n/var/log/syslog         # System messages\n/var/log/kern.log       # Kernel messages\n/var/log/secure         # Security logs (CentOS/RHEL)\n/var/log/messages       # General messages (CentOS/RHEL)\n\n# Monitor authentication attempts\nsudo tail -f /var/log/auth.log\n\n# Search for failed login attempts\ngrep "Failed password" /var/log/auth.log\n\n# Search for successful logins\ngrep "Accepted password" /var/log/auth.log\n\n# Monitor system logs in real-time\nsudo journalctl -f\n\n# View logs for specific service\nsudo journalctl -u ssh.service\n\n# View logs for specific time period\nsudo journalctl --since "2024-01-15 10:00:00"\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Process Monitoring:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'# Monitor running processes\nps aux | grep -v "$(whoami)"  # Processes not owned by current user\n\n# Find processes listening on network ports\nsudo netstat -tulpn\n# or\nsudo ss -tulpn\n\n# Monitor system calls (advanced)\nsudo strace -p PID\n\n# Monitor file access\nsudo lsof +D /etc  # Files open in /etc directory\nsudo lsof -i :22   # Processes using port 22\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Intrusion Detection:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Install and configure fail2ban\nsudo apt install fail2ban  # Ubuntu/Debian\n\n# Configure fail2ban\nsudo nano /etc/fail2ban/jail.local\n\n# Example configuration:\n[DEFAULT]\nbantime = 3600\nfindtime = 600\nmaxretry = 3\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\n\n# Start fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Check fail2ban status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n"})}),"\n",(0,i.jsx)(e.h3,{id:"security-scanning-and-assessment",children:"Security Scanning and Assessment"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Port Scanning (from another system):"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Install nmap\nsudo apt install nmap\n\n# Basic port scan\nnmap target_ip\n\n# Scan specific ports\nnmap -p 22,80,443 target_ip\n\n# Scan port range\nnmap -p 1-1000 target_ip\n\n# Service version detection\nnmap -sV target_ip\n\n# OS detection\nnmap -O target_ip\n\n# Aggressive scan (use carefully)\nnmap -A target_ip\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Vulnerability Assessment:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Install lynis (security auditing tool)\nsudo apt install lynis\n\n# Run security audit\nsudo lynis audit system\n\n# Check for rootkits\nsudo apt install rkhunter\nsudo rkhunter --check\n\n# Check for malware\nsudo apt install clamav\nsudo freshclam  # Update virus definitions\nsudo clamscan -r /home  # Scan home directory\n"})}),"\n",(0,i.jsx)(e.h3,{id:"practical-security-examples",children:"Practical Security Examples"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 1: Security Hardening Script"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\necho "=== Linux Security Hardening Script ==="\n\n# Update system\necho "Updating system packages..."\nsudo apt update && sudo apt upgrade -y\n\n# Install security tools\necho "Installing security tools..."\nsudo apt install -y fail2ban ufw rkhunter lynis\n\n# Configure SSH security\necho "Hardening SSH configuration..."\nsudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\n\n# SSH hardening settings\nsudo sed -i \'s/#PermitRootLogin yes/PermitRootLogin no/\' /etc/ssh/sshd_config\nsudo sed -i \'s/#PasswordAuthentication yes/PasswordAuthentication no/\' /etc/ssh/sshd_config\nsudo sed -i \'s/#MaxAuthTries 6/MaxAuthTries 3/\' /etc/ssh/sshd_config\n\n# Restart SSH\nsudo systemctl restart sshd\n\n# Configure firewall\necho "Configuring firewall..."\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw --force enable\n\n# Configure fail2ban\necho "Configuring fail2ban..."\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n\n# Set file permissions\necho "Setting secure file permissions..."\nsudo chmod 600 /etc/shadow\nsudo chmod 644 /etc/passwd\n\n# Disable unused services\necho "Disabling unused services..."\nservices_to_disable=("telnet" "rsh" "rlogin")\nfor service in "${services_to_disable[@]}"; do\n    if systemctl is-enabled "$service" 2>/dev/null; then\n        sudo systemctl disable "$service"\n        echo "Disabled $service"\n    fi\ndone\n\n# Configure automatic updates (Ubuntu/Debian)\necho "Configuring automatic security updates..."\nsudo apt install -y unattended-upgrades\nsudo dpkg-reconfigure -plow unattended-upgrades\n\necho "Security hardening completed!"\necho "Please reboot the system to ensure all changes take effect."\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Example 2: Security Monitoring Script"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nLOG_FILE="/var/log/security_monitor.log"\n\nlog_message() {\n    echo "[$(date \'+%Y-%m-%d %H:%M:%S\')] $*" | tee -a "$LOG_FILE"\n}\n\ncheck_failed_logins() {\n    local failed_count=$(grep "Failed password" /var/log/auth.log | wc -l)\n    if [ "$failed_count" -gt 10 ]; then\n        log_message "WARNING: $failed_count failed login attempts detected"\n    fi\n}\n\ncheck_root_logins() {\n    local root_logins=$(grep "session opened for user root" /var/log/auth.log | wc -l)\n    if [ "$root_logins" -gt 0 ]; then\n        log_message "WARNING: $root_logins root login sessions detected"\n    fi\n}\n\ncheck_new_users() {\n    local new_users=$(find /home -maxdepth 1 -type d -mtime -1 | wc -l)\n    if [ "$new_users" -gt 1 ]; then  # Subtract 1 for /home itself\n        log_message "INFO: New user directories created in last 24 hours"\n    fi\n}\n\ncheck_suspicious_processes() {\n    # Check for processes running as root that shouldn\'t be\n    suspicious_procs=$(ps aux | awk \'$1=="root" && $11!~/^\\[/ && $11!~/^\\//\' | wc -l)\n    if [ "$suspicious_procs" -gt 20 ]; then\n        log_message "WARNING: High number of root processes: $suspicious_procs"\n    fi\n}\n\ncheck_network_connections() {\n    # Check for unusual network connections\n    external_connections=$(netstat -an | grep ESTABLISHED | grep -v "127.0.0.1\\|::1" | wc -l)\n    if [ "$external_connections" -gt 50 ]; then\n        log_message "WARNING: High number of external connections: $external_connections"\n    fi\n}\n\n# Main monitoring\nlog_message "Starting security monitoring check"\n\ncheck_failed_logins\ncheck_root_logins\ncheck_new_users\ncheck_suspicious_processes\ncheck_network_connections\n\nlog_message "Security monitoring check completed"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"hands-on-exercise-complete-network-security-setup",children:"Hands-on Exercise: Complete Network Security Setup"}),"\n",(0,i.jsx)(e.p,{children:"Create a comprehensive network security configuration:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n#############################################\n# Complete Network Security Setup Script\n# Description: Configure networking and security\n# Version: 1.0\n#############################################\n\nset -euo pipefail\n\nLOG_FILE="/tmp/network_security_setup.log"\n\nlog() {\n    echo "[$(date \'+%Y-%m-%d %H:%M:%S\')] $*" | tee -a "$LOG_FILE"\n}\n\n# Network configuration function\nconfigure_network() {\n    log "Configuring network settings..."\n    \n    # Backup current configuration\n    sudo cp /etc/netplan/01-network-manager-all.yaml /etc/netplan/01-network-manager-all.yaml.backup 2>/dev/null || true\n    \n    # Create static IP configuration (modify as needed)\n    cat > /tmp/network-config.yaml << EOF\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0:\n      dhcp4: true\n      dhcp6: false\n      nameservers:\n        addresses:\n          - 8.8.8.8\n          - 8.8.4.4\n          - 1.1.1.1\nEOF\n    \n    log "Network configuration created (DHCP with custom DNS)"\n}\n\n# Firewall configuration\nconfigure_firewall() {\n    log "Configuring UFW firewall..."\n    \n    # Reset UFW\n    sudo ufw --force reset\n    \n    # Set default policies\n    sudo ufw default deny incoming\n    sudo ufw default allow outgoing\n    \n    # Allow SSH (modify port as needed)\n    sudo ufw allow 22/tcp\n    \n    # Allow common services (uncomment as needed)\n    # sudo ufw allow 80/tcp   # HTTP\n    # sudo ufw allow 443/tcp  # HTTPS\n    # sudo ufw allow 53/udp   # DNS\n    \n    # Rate limit SSH\n    sudo ufw limit ssh\n    \n    # Enable logging\n    sudo ufw logging on\n    \n    # Enable firewall\n    sudo ufw --force enable\n    \n    log "Firewall configured successfully"\n}\n\n# SSH hardening\nharden_ssh() {\n    log "Hardening SSH configuration..."\n    \n    # Backup SSH config\n    sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\n    \n    # Create hardened SSH config\n    sudo tee /etc/ssh/sshd_config.new > /dev/null << EOF\n# Hardened SSH Configuration\nPort 22\nProtocol 2\n\n# Authentication\nPermitRootLogin no\nPasswordAuthentication yes  # Change to \'no\' after setting up key auth\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n\n# Security settings\nMaxAuthTries 3\nMaxSessions 2\nLoginGraceTime 60\nClientAliveInterval 300\nClientAliveCountMax 2\n\n# Disable unused features\nX11Forwarding no\nAllowTcpForwarding no\nGatewayPorts no\nPermitTunnel no\n\n# Logging\nSyslogFacility AUTH\nLogLevel INFO\n\n# Allow only specific users (modify as needed)\n# AllowUsers admin user1 user2\nEOF\n    \n    # Validate SSH config\n    if sudo sshd -t -f /etc/ssh/sshd_config.new; then\n        sudo mv /etc/ssh/sshd_config.new /etc/ssh/sshd_config\n        log "SSH configuration updated successfully"\n    else\n        log "ERROR: SSH configuration validation failed"\n        sudo rm /etc/ssh/sshd_config.new\n        return 1\n    fi\n}\n\n# Install security tools\ninstall_security_tools() {\n    log "Installing security tools..."\n    \n    # Update package list\n    sudo apt update\n    \n    # Install security packages\n    sudo apt install -y \\\n        fail2ban \\\n        ufw \\\n        rkhunter \\\n        lynis \\\n        unattended-upgrades \\\n        logwatch \\\n        aide\n    \n    log "Security tools installed"\n}\n\n# Configure fail2ban\nconfigure_fail2ban() {\n    log "Configuring fail2ban..."\n    \n    # Create fail2ban local configuration\n    sudo tee /etc/fail2ban/jail.local > /dev/null << EOF\n[DEFAULT]\n# Ban time in seconds (1 hour)\nbantime = 3600\n\n# Time window to count failures (10 minutes)\nfindtime = 600\n\n# Number of failures before ban\nmaxretry = 3\n\n# Email notifications (configure as needed)\n# destemail = admin@example.com\n# sendername = Fail2Ban\n# mta = sendmail\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 7200\n\n[apache-auth]\nenabled = false\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache2/*error.log\nmaxretry = 6\n\n[apache-noscript]\nenabled = false\nport = http,https\nfilter = apache-noscript\nlogpath = /var/log/apache2/*access.log\nmaxretry = 6\nEOF\n    \n    # Enable and start fail2ban\n    sudo systemctl enable fail2ban\n    sudo systemctl restart fail2ban\n    \n    log "Fail2ban configured and started"\n}\n\n# System hardening\nsystem_hardening() {\n    log "Applying system hardening..."\n    \n    # Disable unused network protocols\n    echo "install dccp /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf\n    echo "install sctp /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf\n    echo "install rds /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf\n    echo "install tipc /bin/true" | sudo tee -a /etc/modprobe.d/blacklist-rare-network.conf\n    \n    # Kernel security parameters\n    sudo tee /etc/sysctl.d/99-security.conf > /dev/null << EOF\n# IP Spoofing protection\nnet.ipv4.conf.default.rp_filter = 1\nnet.ipv4.conf.all.rp_filter = 1\n\n# Ignore ICMP redirects\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv6.conf.default.accept_redirects = 0\n\n# Ignore send redirects\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n\n# Disable source packet routing\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv6.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\nnet.ipv6.conf.default.accept_source_route = 0\n\n# Log Martians\nnet.ipv4.conf.all.log_martians = 1\nnet.ipv4.conf.default.log_martians = 1\n\n# Ignore ICMP ping requests\nnet.ipv4.icmp_echo_ignore_all = 0\n\n# Ignore Directed pings\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\n\n# Disable IPv6 if not needed\n# net.ipv6.conf.all.disable_ipv6 = 1\n# net.ipv6.conf.default.disable_ipv6 = 1\nEOF\n    \n    # Apply sysctl settings\n    sudo sysctl -p /etc/sysctl.d/99-security.conf\n    \n    log "System hardening applied"\n}\n\n# Create monitoring script\ncreate_monitoring_script() {\n    log "Creating security monitoring script..."\n    \n    sudo tee /usr/local/bin/security_monitor.sh > /dev/null << \'EOF\'\n#!/bin/bash\n\nALERT_EMAIL="admin@example.com"  # Configure as needed\nLOG_FILE="/var/log/security_monitor.log"\n\nlog_alert() {\n    echo "[$(date \'+%Y-%m-%d %H:%M:%S\')] ALERT: $*" | tee -a "$LOG_FILE"\n    # Uncomment to send email alerts\n    # echo "$*" | mail -s "Security Alert - $(hostname)" "$ALERT_EMAIL"\n}\n\n# Check for failed SSH attempts\nfailed_ssh=$(grep "Failed password" /var/log/auth.log | grep "$(date \'+%b %d\')" | wc -l)\nif [ "$failed_ssh" -gt 10 ]; then\n    log_alert "High number of SSH failures today: $failed_ssh"\nfi\n\n# Check for new users\nnew_users=$(awk -F: \'$3 >= 1000 && $3 < 65534 {print $1}\' /etc/passwd | wc -l)\nif [ "$new_users" -gt 5 ]; then  # Adjust threshold as needed\n    log_alert "High number of user accounts: $new_users"\nfi\n\n# Check disk usage\ndisk_usage=$(df / | awk \'NR==2 {print $5}\' | sed \'s/%//\')\nif [ "$disk_usage" -gt 90 ]; then\n    log_alert "High disk usage: ${disk_usage}%"\nfi\n\n# Check for suspicious processes\nsuspicious_procs=$(ps aux | grep -E "(nc|netcat|ncat)" | grep -v grep | wc -l)\nif [ "$suspicious_procs" -gt 0 ]; then\n    log_alert "Suspicious network tools detected: $suspicious_procs processes"\nfi\n\n# Check system load\nload_avg=$(uptime | awk -F\'load average:\' \'{print $2}\' | awk \'{print $1}\' | sed \'s/,//\')\nif (( $(echo "$load_avg > 5.0" | bc -l) )); then\n    log_alert "High system load: $load_avg"\nfi\nEOF\n    \n    sudo chmod +x /usr/local/bin/security_monitor.sh\n    \n    # Add to crontab for regular monitoring\n    (crontab -l 2>/dev/null; echo "*/15 * * * * /usr/local/bin/security_monitor.sh") | crontab -\n    \n    log "Security monitoring script created and scheduled"\n}\n\n# Generate security report\ngenerate_report() {\n    log "Generating security configuration report..."\n    \n    cat > /tmp/security_report.txt << EOF\n=== Network Security Configuration Report ===\nGenerated: $(date)\nHostname: $(hostname)\n\n=== Network Configuration ===\n$(ip addr show | grep -E \'^[0-9]+:|inet \')\n\n=== Firewall Status ===\n$(sudo ufw status verbose)\n\n=== SSH Configuration ===\nPort: $(grep "^Port" /etc/ssh/sshd_config || echo "22 (default)")\nRoot Login: $(grep "^PermitRootLogin" /etc/ssh/sshd_config || echo "Not explicitly set")\nPassword Auth: $(grep "^PasswordAuthentication" /etc/ssh/sshd_config || echo "Not explicitly set")\n\n=== Fail2ban Status ===\n$(sudo fail2ban-client status 2>/dev/null || echo "Fail2ban not running")\n\n=== Active Network Connections ===\n$(ss -tuln | head -10)\n\n=== Security Tools Installed ===\n$(dpkg -l | grep -E "(fail2ban|ufw|rkhunter|lynis)" | awk \'{print $2, $3}\')\n\n=== Recommendations ===\n1. Configure SSH key-based authentication\n2. Change default SSH port if needed\n3. Set up log monitoring and alerting\n4. Regular security updates\n5. Periodic security audits with lynis\nEOF\n    \n    log "Security report generated: /tmp/security_report.txt"\n    cat /tmp/security_report.txt\n}\n\n# Main execution\nmain() {\n    log "Starting network security setup..."\n    \n    # Check if running as root or with sudo\n    if [ "$EUID" -eq 0 ]; then\n        log "ERROR: Don\'t run this script as root. Use sudo for individual commands."\n        exit 1\n    fi\n    \n    # Install security tools\n    install_security_tools\n    \n    # Configure network (commented out to avoid disruption)\n    # configure_network\n    \n    # Configure firewall\n    configure_firewall\n    \n    # Harden SSH\n    harden_ssh\n    \n    # Configure fail2ban\n    configure_fail2ban\n    \n    # Apply system hardening\n    system_hardening\n    \n    # Create monitoring script\n    create_monitoring_script\n    \n    # Generate report\n    generate_report\n    \n    log "Network security setup completed successfully!"\n    echo ""\n    echo "IMPORTANT: Please review the configuration and test SSH connectivity"\n    echo "before closing your current session!"\n}\n\n# Run main function\nmain "$@"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"free-learning-resources",children:"Free Learning Resources"}),"\n",(0,i.jsx)(e.h3,{id:"networking-resources",children:"Networking Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://tldp.org/LDP/nag2/index.html",children:"Linux Network Administration Guide"})," - Comprehensive networking guide"]}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.netfilter.org/documentation/HOWTO/netfilter-hacking-HOWTO.html",children:"Netfilter/iptables Tutorial"})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.tcpipguide.com/",children:"TCP/IP Illustrated"})," - Free online TCP/IP guide"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"security-resources",children:"Security Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.nist.gov/cyberframework",children:"NIST Cybersecurity Framework"})," - Security best practices"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.cisecurity.org/controls/",children:"CIS Controls"})," - Critical security controls"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://owasp.org/",children:"OWASP Security Guidelines"})," - Web application security"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"practice-labs",children:"Practice Labs"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.vulnhub.com/",children:"VulnHub"})," - Vulnerable VMs for practice"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://overthewire.org/wargames/",children:"OverTheWire Security Games"})," - Security challenges"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://pentesterlab.com/",children:"PentesterLab"})," - Web application security"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"documentation",children:"Documentation"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://ubuntu.com/security",children:"Ubuntu Security Guide"})," - Ubuntu-specific security"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/",children:"Red Hat Security Guide"})," - Enterprise security"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://wiki.archlinux.org/title/Security",children:"Arch Linux Security"})," - Comprehensive security wiki"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(e.p,{children:"After mastering networking and security:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Practice Regularly"}),": Set up test environments and practice configurations"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Learn Advanced Topics"}),": VPNs, network monitoring, intrusion detection"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Explore Containers"}),": Docker networking and security"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Study Compliance"}),": PCI DSS, HIPAA, SOX requirements"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Join Communities"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://www.reddit.com/r/netsec/",children:"r/netsec"})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://security.stackexchange.com/",children:"Information Security Stack Exchange"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Continue to ",(0,i.jsx)(e.strong,{children:"Server Management and Performance"})," to learn about web servers, databases, and system optimization!"]})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);