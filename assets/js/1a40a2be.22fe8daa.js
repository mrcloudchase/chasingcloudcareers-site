"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[7375],{3741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cloud-engineering/cloud-fundamentals","title":"Cloud Fundamentals and Core Services","description":"Master the essential concepts and core services across AWS, Azure, and Google Cloud Platform, building a solid foundation for advanced cloud engineering skills.","source":"@site/docs/cloud-engineering/01-cloud-fundamentals.md","sourceDirName":"cloud-engineering","slug":"/cloud-engineering/cloud-fundamentals","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/cloud-fundamentals","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/cloud-engineering/01-cloud-fundamentals.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with Cloud Engineering","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/getting-started"},"next":{"title":"DevOps Engineering","permalink":"/chasingcloudcareers-site/docs/category/devops-engineering"}}');var r=t(4848),s=t(8453);const o={sidebar_position:3},a="Cloud Fundamentals and Core Services",c={},l=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"1. Cloud Computing Concepts and Economics",id:"1-cloud-computing-concepts-and-economics",level:2},{value:"Cloud Service Models",id:"cloud-service-models",level:3},{value:"Cloud Deployment Models",id:"cloud-deployment-models",level:3},{value:"Cloud Economics and Pricing Models",id:"cloud-economics-and-pricing-models",level:3},{value:"Free Resources",id:"free-resources",level:3},{value:"2. Core Compute Services",id:"2-core-compute-services",level:2},{value:"Virtual Machines and Compute Instances",id:"virtual-machines-and-compute-instances",level:3},{value:"Serverless Computing",id:"serverless-computing",level:3},{value:"Container Services",id:"container-services",level:3},{value:"Free Resources",id:"free-resources-1",level:3},{value:"3. Storage and Database Services",id:"3-storage-and-database-services",level:2},{value:"Object Storage",id:"object-storage",level:3},{value:"Relational Databases",id:"relational-databases",level:3},{value:"Free Resources",id:"free-resources-2",level:3},{value:"4. Networking and Content Delivery",id:"4-networking-and-content-delivery",level:2},{value:"Virtual Private Clouds (VPCs)",id:"virtual-private-clouds-vpcs",level:3},{value:"Load Balancing and Traffic Management",id:"load-balancing-and-traffic-management",level:3},{value:"Content Delivery Networks (CDN)",id:"content-delivery-networks-cdn",level:3},{value:"Free Resources",id:"free-resources-3",level:3},{value:"5. Identity and Access Management (IAM)",id:"5-identity-and-access-management-iam",level:2},{value:"Multi-Cloud IAM Comparison",id:"multi-cloud-iam-comparison",level:3},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Free Resources",id:"free-resources-4",level:3},{value:"Hands-On Exercises",id:"hands-on-exercises",level:2},{value:"Exercise 1: Multi-Cloud Architecture Deployment",id:"exercise-1-multi-cloud-architecture-deployment",level:3},{value:"Exercise 2: Cloud Storage and CDN Implementation",id:"exercise-2-cloud-storage-and-cdn-implementation",level:3},{value:"Exercise 3: Identity and Access Management",id:"exercise-3-identity-and-access-management",level:3},{value:"Assessment Questions",id:"assessment-questions",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2},{value:"Cloud Provider Documentation",id:"cloud-provider-documentation",level:3},{value:"Training and Certification",id:"training-and-certification",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cloud-fundamentals-and-core-services",children:"Cloud Fundamentals and Core Services"})}),"\n",(0,r.jsx)(n.p,{children:"Master the essential concepts and core services across AWS, Azure, and Google Cloud Platform, building a solid foundation for advanced cloud engineering skills."}),"\n",(0,r.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this module, you will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understand cloud computing models, deployment types, and economic benefits"}),"\n",(0,r.jsx)(n.li,{children:"Master core compute services across AWS, Azure, and GCP"}),"\n",(0,r.jsx)(n.li,{children:"Implement storage and database solutions for different use cases"}),"\n",(0,r.jsx)(n.li,{children:"Design and configure cloud networking and content delivery"}),"\n",(0,r.jsx)(n.li,{children:"Manage identity, access, and security across cloud platforms"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"1-cloud-computing-concepts-and-economics",children:"1. Cloud Computing Concepts and Economics"}),"\n",(0,r.jsx)(n.h3,{id:"cloud-service-models",children:"Cloud Service Models"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Infrastructure as a Service (IaaS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"IaaS Characteristics:\n\u251c\u2500 Virtual machines and compute resources\n\u251c\u2500 Storage and networking infrastructure\n\u251c\u2500 Operating system and runtime management\n\u251c\u2500 Customer manages: OS, middleware, applications\n\u2514\u2500 Provider manages: Physical infrastructure, virtualization\n\nExamples:\n\u251c\u2500 AWS: EC2, EBS, VPC\n\u251c\u2500 Azure: Virtual Machines, Managed Disks, Virtual Network\n\u2514\u2500 GCP: Compute Engine, Persistent Disk, VPC\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Platform as a Service (PaaS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"PaaS Characteristics:\n\u251c\u2500 Application development and deployment platform\n\u251c\u2500 Runtime environment and middleware\n\u251c\u2500 Development tools and database management\n\u251c\u2500 Customer manages: Applications and data\n\u2514\u2500 Provider manages: Runtime, middleware, OS, infrastructure\n\nExamples:\n\u251c\u2500 AWS: Elastic Beanstalk, Lambda, RDS\n\u251c\u2500 Azure: App Service, Azure Functions, SQL Database\n\u2514\u2500 GCP: App Engine, Cloud Functions, Cloud SQL\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Software as a Service (SaaS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"SaaS Characteristics:\n\u251c\u2500 Complete software applications\n\u251c\u2500 Multi-tenant architecture\n\u251c\u2500 Web-based access and delivery\n\u251c\u2500 Customer manages: User data and access\n\u2514\u2500 Provider manages: Everything else\n\nExamples:\n\u251c\u2500 Microsoft 365, Salesforce, Google Workspace\n\u251c\u2500 Slack, Zoom, Dropbox\n\u2514\u2500 ServiceNow, Workday, Adobe Creative Cloud\n"})}),"\n",(0,r.jsx)(n.h3,{id:"cloud-deployment-models",children:"Cloud Deployment Models"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Public Cloud:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Resources owned and operated by cloud service provider"}),"\n",(0,r.jsx)(n.li,{children:"Services delivered over the internet"}),"\n",(0,r.jsx)(n.li,{children:"Shared infrastructure with other organizations"}),"\n",(0,r.jsx)(n.li,{children:"Pay-as-you-go pricing model"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Private Cloud:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dedicated infrastructure for single organization"}),"\n",(0,r.jsx)(n.li,{children:"Can be on-premises or hosted by third party"}),"\n",(0,r.jsx)(n.li,{children:"Greater control and security"}),"\n",(0,r.jsx)(n.li,{children:"Higher costs and complexity"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Hybrid Cloud:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Combination of public and private clouds"}),"\n",(0,r.jsx)(n.li,{children:"Data and applications can move between environments"}),"\n",(0,r.jsx)(n.li,{children:"Flexibility and optimization opportunities"}),"\n",(0,r.jsx)(n.li,{children:"Complex integration and management"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-Cloud:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use of multiple cloud service providers"}),"\n",(0,r.jsx)(n.li,{children:"Avoid vendor lock-in and leverage best services"}),"\n",(0,r.jsx)(n.li,{children:"Increased complexity and management overhead"}),"\n",(0,r.jsx)(n.li,{children:"Enhanced resilience and geographic coverage"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cloud-economics-and-pricing-models",children:"Cloud Economics and Pricing Models"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Capital Expenditure (CapEx) vs Operational Expenditure (OpEx):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Traditional CapEx Model\nclass TraditionalInfrastructure:\n    def __init__(self):\n        self.upfront_cost = 100000  # Server hardware\n        self.annual_maintenance = 15000\n        self.depreciation_years = 5\n        self.utilization_rate = 0.3  # 30% average utilization\n    \n    def total_cost_of_ownership(self, years):\n        depreciation = self.upfront_cost / self.depreciation_years * years\n        maintenance = self.annual_maintenance * years\n        return depreciation + maintenance\n    \n    def cost_per_hour(self, years):\n        total_cost = self.total_cost_of_ownership(years)\n        total_hours = years * 365 * 24\n        return total_cost / total_hours\n\n# Cloud OpEx Model\nclass CloudInfrastructure:\n    def __init__(self):\n        self.hourly_rate = 0.10  # Per hour pricing\n        self.utilization_rate = 0.8  # 80% utilization with auto-scaling\n    \n    def monthly_cost(self, hours_used):\n        return hours_used * self.hourly_rate\n    \n    def annual_cost(self, average_monthly_hours):\n        return self.monthly_cost(average_monthly_hours) * 12\n\n# Cost comparison example\ntraditional = TraditionalInfrastructure()\ncloud = CloudInfrastructure()\n\nprint(f"Traditional 5-year TCO: ${traditional.total_cost_of_ownership(5):,.2f}")\nprint(f"Traditional cost per hour: ${traditional.cost_per_hour(5):.4f}")\nprint(f"Cloud annual cost (2000 hours/month): ${cloud.annual_cost(2000):,.2f}")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cloud Pricing Models:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pay-as-you-go"}),": Pay only for resources consumed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reserved Instances"}),": Commit to usage for discounts"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spot/Preemptible"}),": Use spare capacity at reduced rates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Savings Plans"}),": Flexible commitment-based discounts"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"free-resources",children:"Free Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://aws.amazon.com/economics/",children:"AWS Cloud Economics"})," - Cloud financial management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://azure.microsoft.com/en-us/pricing/tco/calculator/",children:"Azure Total Cost of Ownership Calculator"})," - Cost comparison tool"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/products/calculator",children:"Google Cloud Pricing Calculator"})," - Cost estimation tool"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.finops.org/",children:"Cloud Financial Management - FinOps Foundation"})," - Cloud financial operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-core-compute-services",children:"2. Core Compute Services"}),"\n",(0,r.jsx)(n.h3,{id:"virtual-machines-and-compute-instances",children:"Virtual Machines and Compute Instances"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AWS EC2 (Elastic Compute Cloud):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Launch EC2 instance with AWS CLI\naws ec2 run-instances \\\n    --image-id ami-0abcdef1234567890 \\\n    --instance-type t3.micro \\\n    --key-name my-key-pair \\\n    --security-group-ids sg-903004f8 \\\n    --subnet-id subnet-6e7f829e \\\n    --user-data file://user-data.sh \\\n    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=WebServer}]'\n\n# Create Auto Scaling Group\naws autoscaling create-auto-scaling-group \\\n    --auto-scaling-group-name my-asg \\\n    --launch-template LaunchTemplateName=my-template,Version=1 \\\n    --min-size 1 \\\n    --max-size 5 \\\n    --desired-capacity 2 \\\n    --vpc-zone-identifier subnet-6e7f829e,subnet-1a2b3c4d \\\n    --health-check-type ELB \\\n    --health-check-grace-period 300\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Azure Virtual Machines:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create resource group\naz group create --name myResourceGroup --location eastus\n\n# Create virtual machine\naz vm create \\\n    --resource-group myResourceGroup \\\n    --name myVM \\\n    --image Ubuntu2204 \\\n    --size Standard_B1s \\\n    --admin-username azureuser \\\n    --generate-ssh-keys \\\n    --custom-data cloud-init.txt\n\n# Create Virtual Machine Scale Set\naz vmss create \\\n    --resource-group myResourceGroup \\\n    --name myScaleSet \\\n    --image Ubuntu2204 \\\n    --upgrade-policy-mode automatic \\\n    --instance-count 2 \\\n    --admin-username azureuser \\\n    --generate-ssh-keys\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Google Compute Engine:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create compute instance\ngcloud compute instances create my-instance \\\n    --zone=us-central1-a \\\n    --machine-type=e2-micro \\\n    --image-family=ubuntu-2204-lts \\\n    --image-project=ubuntu-os-cloud \\\n    --boot-disk-size=10GB \\\n    --metadata-from-file startup-script=startup.sh \\\n    --tags=web-server\n\n# Create instance template and managed instance group\ngcloud compute instance-templates create my-template \\\n    --machine-type=e2-small \\\n    --image-family=ubuntu-2204-lts \\\n    --image-project=ubuntu-os-cloud\n\ngcloud compute instance-groups managed create my-group \\\n    --template=my-template \\\n    --size=2 \\\n    --zone=us-central1-a\n"})}),"\n",(0,r.jsx)(n.h3,{id:"serverless-computing",children:"Serverless Computing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AWS Lambda:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# AWS Lambda function example\nimport json\nimport boto3\nfrom datetime import datetime\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Process incoming events and store in DynamoDB\n    \"\"\"\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('EventLog')\n    \n    # Process event data\n    event_data = {\n        'id': context.aws_request_id,\n        'timestamp': datetime.utcnow().isoformat(),\n        'event_type': event.get('eventType', 'unknown'),\n        'data': json.dumps(event.get('data', {})),\n        'source': event.get('source', 'lambda')\n    }\n    \n    # Store in DynamoDB\n    try:\n        table.put_item(Item=event_data)\n        \n        return {\n            'statusCode': 200,\n            'body': json.dumps({\n                'message': 'Event processed successfully',\n                'eventId': event_data['id']\n            })\n        }\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        return {\n            'statusCode': 500,\n            'body': json.dumps({\n                'error': 'Failed to process event'\n            })\n        }\n\n# Deployment with AWS SAM template\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# template.yaml - AWS SAM template\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  EventProcessorFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: src/\n      Handler: app.lambda_handler\n      Runtime: python3.9\n      Environment:\n        Variables:\n          TABLE_NAME: !Ref EventTable\n      Events:\n        ApiEvent:\n          Type: Api\n          Properties:\n            Path: /events\n            Method: post\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref EventBucket\n            Events: s3:ObjectCreated:*\n\n  EventTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: EventLog\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n\n  EventBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub \"${AWS::StackName}-events-${AWS::AccountId}\"\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Azure Functions:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Azure Functions example\nimport logging\nimport json\nimport azure.functions as func\nfrom azure.cosmos import CosmosClient\nimport os\n\ndef main(req: func.HttpRequest) -> func.HttpResponse:\n    \"\"\"\n    Azure Function to process HTTP requests\n    \"\"\"\n    logging.info('Python HTTP trigger function processed a request.')\n\n    try:\n        # Get request data\n        req_body = req.get_json()\n        \n        # Initialize Cosmos DB client\n        client = CosmosClient(\n            os.environ['COSMOS_ENDPOINT'],\n            os.environ['COSMOS_KEY']\n        )\n        database = client.get_database_client('EventDatabase')\n        container = database.get_container_client('Events')\n        \n        # Process and store data\n        event_data = {\n            'id': req_body.get('id'),\n            'timestamp': req_body.get('timestamp'),\n            'data': req_body.get('data', {})\n        }\n        \n        container.create_item(event_data)\n        \n        return func.HttpResponse(\n            json.dumps({'status': 'success', 'id': event_data['id']}),\n            status_code=200,\n            mimetype=\"application/json\"\n        )\n        \n    except Exception as e:\n        logging.error(f\"Error processing request: {str(e)}\")\n        return func.HttpResponse(\n            json.dumps({'error': 'Internal server error'}),\n            status_code=500,\n            mimetype=\"application/json\"\n        )\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Google Cloud Functions:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Google Cloud Functions example\nimport functions_framework\nfrom google.cloud import firestore\nimport json\n\n@functions_framework.http\ndef process_event(request):\n    \"\"\"\n    Google Cloud Function to process HTTP requests\n    \"\"\"\n    # Initialize Firestore client\n    db = firestore.Client()\n    \n    try:\n        # Get request data\n        request_json = request.get_json(silent=True)\n        \n        if not request_json:\n            return {'error': 'No JSON data provided'}, 400\n        \n        # Process and store data\n        doc_ref = db.collection('events').document()\n        doc_ref.set({\n            'timestamp': firestore.SERVER_TIMESTAMP,\n            'data': request_json,\n            'processed': True\n        })\n        \n        return {\n            'status': 'success',\n            'document_id': doc_ref.id\n        }\n        \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        return {'error': 'Internal server error'}, 500\n\n# Cloud Functions deployment\n# gcloud functions deploy process-event \\\n#     --runtime python39 \\\n#     --trigger-http \\\n#     --allow-unauthenticated \\\n#     --entry-point process_event\n"})}),"\n",(0,r.jsx)(n.h3,{id:"container-services",children:"Container Services"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AWS Container Services:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# ECS Task Definition\n{\n  "family": "web-app",\n  "networkMode": "awsvpc",\n  "requiresCompatibilities": ["FARGATE"],\n  "cpu": "256",\n  "memory": "512",\n  "executionRoleArn": "arn:aws:iam::123456789012:role/ecsTaskExecutionRole",\n  "containerDefinitions": [\n    {\n      "name": "web-container",\n      "image": "nginx:latest",\n      "portMappings": [\n        {\n          "containerPort": 80,\n          "protocol": "tcp"\n        }\n      ],\n      "logConfiguration": {\n        "logDriver": "awslogs",\n        "options": {\n          "awslogs-group": "/ecs/web-app",\n          "awslogs-region": "us-west-2",\n          "awslogs-stream-prefix": "ecs"\n        }\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Azure Container Instances:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Azure Container Instances YAML\napiVersion: 2019-12-01\nlocation: eastus\nname: web-app-container\nproperties:\n  containers:\n  - name: web-app\n    properties:\n      image: nginx:latest\n      resources:\n        requests:\n          cpu: 1\n          memoryInGb: 1.5\n      ports:\n      - port: 80\n        protocol: TCP\n  osType: Linux\n  ipAddress:\n    type: Public\n    ports:\n    - protocol: TCP\n      port: 80\n  restartPolicy: Always\ntags:\n  environment: production\ntype: Microsoft.ContainerInstance/containerGroups\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Google Cloud Run:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Cloud Run service configuration\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  name: web-app\n  annotations:\n    run.googleapis.com/ingress: all\nspec:\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/maxScale: "100"\n        run.googleapis.com/cpu-throttling: "false"\n    spec:\n      containerConcurrency: 80\n      containers:\n      - image: gcr.io/project-id/web-app:latest\n        ports:\n        - containerPort: 8080\n        resources:\n          limits:\n            cpu: 1000m\n            memory: 512Mi\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: db-secret\n              key: url\n'})}),"\n",(0,r.jsx)(n.h3,{id:"free-resources-1",children:"Free Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/ec2/",children:"AWS Compute Services Documentation"})," - Complete EC2 and compute reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/virtual-machines/",children:"Azure Virtual Machines Documentation"})," - Azure compute services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/compute/docs",children:"Google Compute Engine Documentation"})," - GCP compute services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.serverless.com/",children:"Serverless Framework"})," - Multi-cloud serverless deployment"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-storage-and-database-services",children:"3. Storage and Database Services"}),"\n",(0,r.jsx)(n.h3,{id:"object-storage",children:"Object Storage"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AWS S3 (Simple Storage Service):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# AWS S3 operations with boto3\nimport boto3\nfrom botocore.exceptions import ClientError\nimport json\n\nclass S3Manager:\n    def __init__(self, region_name='us-west-2'):\n        self.s3_client = boto3.client('s3', region_name=region_name)\n        self.s3_resource = boto3.resource('s3', region_name=region_name)\n    \n    def create_bucket(self, bucket_name, region='us-west-2'):\n        \"\"\"Create S3 bucket with best practices\"\"\"\n        try:\n            if region == 'us-east-1':\n                self.s3_client.create_bucket(Bucket=bucket_name)\n            else:\n                self.s3_client.create_bucket(\n                    Bucket=bucket_name,\n                    CreateBucketConfiguration={'LocationConstraint': region}\n                )\n            \n            # Enable versioning\n            self.s3_client.put_bucket_versioning(\n                Bucket=bucket_name,\n                VersioningConfiguration={'Status': 'Enabled'}\n            )\n            \n            # Enable server-side encryption\n            self.s3_client.put_bucket_encryption(\n                Bucket=bucket_name,\n                ServerSideEncryptionConfiguration={\n                    'Rules': [{\n                        'ApplyServerSideEncryptionByDefault': {\n                            'SSEAlgorithm': 'AES256'\n                        }\n                    }]\n                }\n            )\n            \n            # Block public access\n            self.s3_client.put_public_access_block(\n                Bucket=bucket_name,\n                PublicAccessBlockConfiguration={\n                    'BlockPublicAcls': True,\n                    'IgnorePublicAcls': True,\n                    'BlockPublicPolicy': True,\n                    'RestrictPublicBuckets': True\n                }\n            )\n            \n            print(f\"Bucket {bucket_name} created successfully\")\n            return True\n            \n        except ClientError as e:\n            print(f\"Error creating bucket: {e}\")\n            return False\n    \n    def upload_file(self, file_path, bucket_name, object_key=None):\n        \"\"\"Upload file to S3 with metadata\"\"\"\n        if object_key is None:\n            object_key = file_path.split('/')[-1]\n        \n        try:\n            self.s3_client.upload_file(\n                file_path, \n                bucket_name, \n                object_key,\n                ExtraArgs={\n                    'Metadata': {\n                        'uploaded-by': 'cloud-engineering-app',\n                        'content-type': 'application/octet-stream'\n                    }\n                }\n            )\n            print(f\"File {file_path} uploaded to {bucket_name}/{object_key}\")\n            return True\n            \n        except ClientError as e:\n            print(f\"Error uploading file: {e}\")\n            return False\n    \n    def setup_lifecycle_policy(self, bucket_name):\n        \"\"\"Configure lifecycle policy for cost optimization\"\"\"\n        lifecycle_config = {\n            'Rules': [\n                {\n                    'ID': 'OptimizeStorage',\n                    'Status': 'Enabled',\n                    'Filter': {'Prefix': ''},\n                    'Transitions': [\n                        {\n                            'Days': 30,\n                            'StorageClass': 'STANDARD_IA'\n                        },\n                        {\n                            'Days': 90,\n                            'StorageClass': 'GLACIER'\n                        },\n                        {\n                            'Days': 365,\n                            'StorageClass': 'DEEP_ARCHIVE'\n                        }\n                    ],\n                    'AbortIncompleteMultipartUpload': {\n                        'DaysAfterInitiation': 7\n                    }\n                }\n            ]\n        }\n        \n        try:\n            self.s3_client.put_bucket_lifecycle_configuration(\n                Bucket=bucket_name,\n                LifecycleConfiguration=lifecycle_config\n            )\n            print(f\"Lifecycle policy applied to {bucket_name}\")\n            return True\n            \n        except ClientError as e:\n            print(f\"Error setting lifecycle policy: {e}\")\n            return False\n\n# Usage example\ns3_manager = S3Manager()\ns3_manager.create_bucket('my-cloud-engineering-bucket')\ns3_manager.setup_lifecycle_policy('my-cloud-engineering-bucket')\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Azure Blob Storage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Azure Blob Storage operations\nfrom azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\nfrom azure.core.exceptions import AzureError\nimport os\n\nclass AzureBlobManager:\n    def __init__(self, connection_string):\n        self.blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n    \n    def create_container(self, container_name):\n        """Create blob container with access policies"""\n        try:\n            container_client = self.blob_service_client.create_container(\n                name=container_name,\n                public_access=None  # Private container\n            )\n            \n            # Set access policy\n            access_policy = {\n                \'read-policy\': {\n                    \'permission\': \'r\',\n                    \'start\': \'2024-01-01T00:00:00Z\',\n                    \'expiry\': \'2025-01-01T00:00:00Z\'\n                }\n            }\n            \n            container_client.set_container_access_policy(\n                signed_identifiers=access_policy\n            )\n            \n            print(f"Container {container_name} created successfully")\n            return True\n            \n        except AzureError as e:\n            print(f"Error creating container: {e}")\n            return False\n    \n    def upload_blob(self, container_name, file_path, blob_name=None):\n        """Upload blob with metadata and tags"""\n        if blob_name is None:\n            blob_name = os.path.basename(file_path)\n        \n        try:\n            blob_client = self.blob_service_client.get_blob_client(\n                container=container_name,\n                blob=blob_name\n            )\n            \n            with open(file_path, \'rb\') as data:\n                blob_client.upload_blob(\n                    data,\n                    overwrite=True,\n                    metadata={\n                        \'uploaded_by\': \'cloud_engineering_app\',\n                        \'environment\': \'production\'\n                    },\n                    tags={\n                        \'project\': \'cloud-learning\',\n                        \'cost-center\': \'engineering\'\n                    }\n                )\n            \n            print(f"Blob {blob_name} uploaded successfully")\n            return True\n            \n        except AzureError as e:\n            print(f"Error uploading blob: {e}")\n            return False\n    \n    def setup_lifecycle_management(self, storage_account_name):\n        """Configure lifecycle management policy"""\n        # This would typically be done via ARM template or Azure CLI\n        lifecycle_policy = {\n            "rules": [\n                {\n                    "name": "OptimizeStorage",\n                    "enabled": True,\n                    "type": "Lifecycle",\n                    "definition": {\n                        "filters": {\n                            "blobTypes": ["blockBlob"]\n                        },\n                        "actions": {\n                            "baseBlob": {\n                                "tierToCool": {"daysAfterModificationGreaterThan": 30},\n                                "tierToArchive": {"daysAfterModificationGreaterThan": 90},\n                                "delete": {"daysAfterModificationGreaterThan": 2555}\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n        \n        print("Lifecycle policy configuration:")\n        print(json.dumps(lifecycle_policy, indent=2))\n        return lifecycle_policy\n\n# Usage with connection string from environment\nconnection_string = os.getenv(\'AZURE_STORAGE_CONNECTION_STRING\')\nblob_manager = AzureBlobManager(connection_string)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Google Cloud Storage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Google Cloud Storage operations\nfrom google.cloud import storage\nfrom google.cloud.exceptions import GoogleCloudError\nimport json\n\nclass GCSManager:\n    def __init__(self, project_id):\n        self.client = storage.Client(project=project_id)\n        self.project_id = project_id\n    \n    def create_bucket(self, bucket_name, location='US'):\n        \"\"\"Create GCS bucket with best practices\"\"\"\n        try:\n            bucket = self.client.bucket(bucket_name)\n            bucket = self.client.create_bucket(bucket, location=location)\n            \n            # Enable versioning\n            bucket.versioning_enabled = True\n            bucket.patch()\n            \n            # Set uniform bucket-level access\n            bucket.iam_configuration.uniform_bucket_level_access_enabled = True\n            bucket.patch()\n            \n            # Configure lifecycle policy\n            lifecycle_rule = {\n                'action': {'type': 'SetStorageClass', 'storageClass': 'NEARLINE'},\n                'condition': {'age': 30}\n            }\n            bucket.lifecycle_rules = [lifecycle_rule]\n            bucket.patch()\n            \n            print(f\"Bucket {bucket_name} created successfully\")\n            return bucket\n            \n        except GoogleCloudError as e:\n            print(f\"Error creating bucket: {e}\")\n            return None\n    \n    def upload_blob(self, bucket_name, source_file_name, destination_blob_name=None):\n        \"\"\"Upload file to GCS with metadata\"\"\"\n        if destination_blob_name is None:\n            destination_blob_name = source_file_name.split('/')[-1]\n        \n        try:\n            bucket = self.client.bucket(bucket_name)\n            blob = bucket.blob(destination_blob_name)\n            \n            # Set metadata\n            blob.metadata = {\n                'uploaded-by': 'cloud-engineering-app',\n                'environment': 'production',\n                'project': 'cloud-learning'\n            }\n            \n            # Upload file\n            blob.upload_from_filename(source_file_name)\n            \n            print(f\"File {source_file_name} uploaded to {destination_blob_name}\")\n            return True\n            \n        except GoogleCloudError as e:\n            print(f\"Error uploading file: {e}\")\n            return False\n    \n    def setup_bucket_notifications(self, bucket_name, topic_name):\n        \"\"\"Configure bucket notifications to Pub/Sub\"\"\"\n        try:\n            bucket = self.client.bucket(bucket_name)\n            notification = bucket.notification(\n                topic_name=f'projects/{self.project_id}/topics/{topic_name}',\n                event_types=['OBJECT_FINALIZE']\n            )\n            notification.create()\n            \n            print(f\"Notification configured for bucket {bucket_name}\")\n            return True\n            \n        except GoogleCloudError as e:\n            print(f\"Error configuring notifications: {e}\")\n            return False\n\n# Usage example\ngcs_manager = GCSManager('my-project-id')\nbucket = gcs_manager.create_bucket('my-cloud-engineering-bucket')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"relational-databases",children:"Relational Databases"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-Cloud Database Comparison:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Database service comparison across clouds\nclass CloudDatabaseComparison:\n    def __init__(self):\n        self.services = {\n            'aws': {\n                'managed_mysql': 'Amazon RDS for MySQL',\n                'managed_postgresql': 'Amazon RDS for PostgreSQL',\n                'serverless': 'Amazon Aurora Serverless',\n                'data_warehouse': 'Amazon Redshift',\n                'nosql': 'Amazon DynamoDB'\n            },\n            'azure': {\n                'managed_mysql': 'Azure Database for MySQL',\n                'managed_postgresql': 'Azure Database for PostgreSQL',\n                'serverless': 'Azure SQL Database Serverless',\n                'data_warehouse': 'Azure Synapse Analytics',\n                'nosql': 'Azure Cosmos DB'\n            },\n            'gcp': {\n                'managed_mysql': 'Cloud SQL for MySQL',\n                'managed_postgresql': 'Cloud SQL for PostgreSQL',\n                'serverless': 'Cloud Spanner',\n                'data_warehouse': 'BigQuery',\n                'nosql': 'Cloud Firestore'\n            }\n        }\n    \n    def get_service_comparison(self):\n        \"\"\"Compare database services across clouds\"\"\"\n        comparison = {}\n        for service_type in ['managed_mysql', 'managed_postgresql', 'serverless', 'data_warehouse', 'nosql']:\n            comparison[service_type] = {\n                cloud: self.services[cloud][service_type]\n                for cloud in self.services.keys()\n            }\n        return comparison\n    \n    def print_comparison(self):\n        \"\"\"Print formatted comparison\"\"\"\n        comparison = self.get_service_comparison()\n        \n        print(\"Cloud Database Services Comparison:\")\n        print(\"=\" * 50)\n        \n        for service_type, services in comparison.items():\n            print(f\"\\n{service_type.replace('_', ' ').title()}:\")\n            for cloud, service in services.items():\n                print(f\"  {cloud.upper()}: {service}\")\n\n# Usage\ndb_comparison = CloudDatabaseComparison()\ndb_comparison.print_comparison()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"free-resources-2",children:"Free Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://aws.amazon.com/products/storage/",children:"AWS Storage Services"})," - Complete AWS storage portfolio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/storage/",children:"Azure Storage Documentation"})," - Azure storage services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/storage/docs",children:"Google Cloud Storage Documentation"})," - GCP storage solutions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://db-engines.com/en/",children:"Database Comparison Guide"})," - Database technology comparison"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"4-networking-and-content-delivery",children:"4. Networking and Content Delivery"}),"\n",(0,r.jsx)(n.h3,{id:"virtual-private-clouds-vpcs",children:"Virtual Private Clouds (VPCs)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-Cloud VPC Design Patterns:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# AWS VPC with Terraform\nresource "aws_vpc" "main" {\n  cidr_block           = "10.0.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = "main-vpc"\n    Environment = "production"\n  }\n}\n\nresource "aws_subnet" "public" {\n  count = 2\n  \n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = "10.0.${count.index + 1}.0/24"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = "public-subnet-${count.index + 1}"\n    Type = "public"\n  }\n}\n\nresource "aws_subnet" "private" {\n  count = 2\n  \n  vpc_id            = aws_vpc.main.id\n  cidr_block        = "10.0.${count.index + 10}.0/24"\n  availability_zone = data.aws_availability_zones.available.names[count.index]\n\n  tags = {\n    Name = "private-subnet-${count.index + 1}"\n    Type = "private"\n  }\n}\n\nresource "aws_internet_gateway" "main" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = "main-igw"\n  }\n}\n\nresource "aws_nat_gateway" "main" {\n  count = 2\n  \n  allocation_id = aws_eip.nat[count.index].id\n  subnet_id     = aws_subnet.public[count.index].id\n\n  tags = {\n    Name = "nat-gateway-${count.index + 1}"\n  }\n}\n\nresource "aws_eip" "nat" {\n  count = 2\n  \n  domain = "vpc"\n  \n  tags = {\n    Name = "nat-eip-${count.index + 1}"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Azure Virtual Network:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Azure VNet with ARM template\n{\n  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",\n  "contentVersion": "1.0.0.0",\n  "parameters": {\n    "vnetName": {\n      "type": "string",\n      "defaultValue": "main-vnet"\n    },\n    "location": {\n      "type": "string",\n      "defaultValue": "[resourceGroup().location]"\n    }\n  },\n  "resources": [\n    {\n      "type": "Microsoft.Network/virtualNetworks",\n      "apiVersion": "2021-02-01",\n      "name": "[parameters(\'vnetName\')]",\n      "location": "[parameters(\'location\')]",\n      "properties": {\n        "addressSpace": {\n          "addressPrefixes": ["10.0.0.0/16"]\n        },\n        "subnets": [\n          {\n            "name": "public-subnet",\n            "properties": {\n              "addressPrefix": "10.0.1.0/24"\n            }\n          },\n          {\n            "name": "private-subnet",\n            "properties": {\n              "addressPrefix": "10.0.2.0/24"\n            }\n          },\n          {\n            "name": "database-subnet",\n            "properties": {\n              "addressPrefix": "10.0.3.0/24",\n              "delegations": [\n                {\n                  "name": "Microsoft.DBforMySQL/flexibleServers",\n                  "properties": {\n                    "serviceName": "Microsoft.DBforMySQL/flexibleServers"\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Google Cloud VPC:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# GCP VPC with Deployment Manager\nresources:\n- name: main-vpc\n  type: compute.v1.network\n  properties:\n    autoCreateSubnetworks: false\n    routingConfig:\n      routingMode: REGIONAL\n\n- name: public-subnet\n  type: compute.v1.subnetwork\n  properties:\n    network: $(ref.main-vpc.selfLink)\n    ipCidrRange: 10.0.1.0/24\n    region: us-central1\n    privateIpGoogleAccess: true\n\n- name: private-subnet\n  type: compute.v1.subnetwork\n  properties:\n    network: $(ref.main-vpc.selfLink)\n    ipCidrRange: 10.0.2.0/24\n    region: us-central1\n    privateIpGoogleAccess: true\n\n- name: nat-gateway\n  type: compute.v1.router\n  properties:\n    network: $(ref.main-vpc.selfLink)\n    region: us-central1\n    nats:\n    - name: main-nat\n      natIpAllocateOption: AUTO_ONLY\n      sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES\n"})}),"\n",(0,r.jsx)(n.h3,{id:"load-balancing-and-traffic-management",children:"Load Balancing and Traffic Management"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Application Load Balancer Configuration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Multi-cloud load balancer configuration comparison\nclass LoadBalancerConfig:\n    def __init__(self):\n        self.configurations = {\n            'aws_alb': {\n                'type': 'Application Load Balancer',\n                'layer': 'Layer 7 (HTTP/HTTPS)',\n                'features': [\n                    'Path-based routing',\n                    'Host-based routing',\n                    'SSL termination',\n                    'WebSocket support',\n                    'HTTP/2 support'\n                ],\n                'health_checks': 'HTTP/HTTPS health checks',\n                'ssl_certificates': 'AWS Certificate Manager integration'\n            },\n            'azure_app_gateway': {\n                'type': 'Application Gateway',\n                'layer': 'Layer 7 (HTTP/HTTPS)',\n                'features': [\n                    'URL path-based routing',\n                    'Multi-site hosting',\n                    'SSL termination',\n                    'Web Application Firewall',\n                    'Autoscaling'\n                ],\n                'health_checks': 'Custom health probes',\n                'ssl_certificates': 'Key Vault integration'\n            },\n            'gcp_load_balancer': {\n                'type': 'HTTP(S) Load Balancer',\n                'layer': 'Layer 7 (HTTP/HTTPS)',\n                'features': [\n                    'URL map-based routing',\n                    'Global load balancing',\n                    'SSL termination',\n                    'Cloud CDN integration',\n                    'Identity-Aware Proxy'\n                ],\n                'health_checks': 'HTTP/HTTPS health checks',\n                'ssl_certificates': 'Google-managed certificates'\n            }\n        }\n    \n    def compare_features(self):\n        \"\"\"Compare load balancer features across clouds\"\"\"\n        print(\"Load Balancer Feature Comparison:\")\n        print(\"=\" * 50)\n        \n        for lb_type, config in self.configurations.items():\n            print(f\"\\n{config['type']} ({lb_type.upper()}):\")\n            print(f\"  Layer: {config['layer']}\")\n            print(f\"  Health Checks: {config['health_checks']}\")\n            print(f\"  SSL Certificates: {config['ssl_certificates']}\")\n            print(\"  Features:\")\n            for feature in config['features']:\n                print(f\"    - {feature}\")\n\n# Usage\nlb_config = LoadBalancerConfig()\nlb_config.compare_features()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"content-delivery-networks-cdn",children:"Content Delivery Networks (CDN)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CDN Configuration Examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# CDN setup across different cloud providers\nimport json\n\nclass CDNConfiguration:\n    def __init__(self):\n        self.cdn_configs = {\n            'aws_cloudfront': {\n                'service': 'Amazon CloudFront',\n                'global_edge_locations': '400+',\n                'features': [\n                    'Global content delivery',\n                    'DDoS protection with AWS Shield',\n                    'Lambda@Edge for edge computing',\n                    'Real-time logs and metrics',\n                    'Custom SSL certificates'\n                ],\n                'pricing_model': 'Pay-as-you-go',\n                'integration': 'Native AWS services integration'\n            },\n            'azure_cdn': {\n                'service': 'Azure CDN',\n                'global_edge_locations': '130+',\n                'features': [\n                    'Global content delivery',\n                    'DDoS protection',\n                    'Dynamic site acceleration',\n                    'Real-time analytics',\n                    'Custom domains and SSL'\n                ],\n                'pricing_model': 'Multiple pricing tiers',\n                'integration': 'Azure services integration'\n            },\n            'gcp_cdn': {\n                'service': 'Cloud CDN',\n                'global_edge_locations': '130+',\n                'features': [\n                    'Global content delivery',\n                    'HTTP/2 and QUIC support',\n                    'Cache invalidation',\n                    'Signed URLs and cookies',\n                    'Google-managed SSL certificates'\n                ],\n                'pricing_model': 'Pay-as-you-go',\n                'integration': 'Google Cloud services integration'\n            }\n        }\n    \n    def generate_cloudfront_config(self, origin_domain, bucket_name):\n        \"\"\"Generate CloudFront distribution configuration\"\"\"\n        config = {\n            \"CallerReference\": f\"cdn-{bucket_name}-{int(time.time())}\",\n            \"Comment\": f\"CDN for {origin_domain}\",\n            \"DefaultCacheBehavior\": {\n                \"TargetOriginId\": f\"S3-{bucket_name}\",\n                \"ViewerProtocolPolicy\": \"redirect-to-https\",\n                \"TrustedSigners\": {\n                    \"Enabled\": False,\n                    \"Quantity\": 0\n                },\n                \"ForwardedValues\": {\n                    \"QueryString\": False,\n                    \"Cookies\": {\"Forward\": \"none\"}\n                },\n                \"MinTTL\": 0,\n                \"DefaultTTL\": 86400,\n                \"MaxTTL\": 31536000\n            },\n            \"Origins\": {\n                \"Quantity\": 1,\n                \"Items\": [\n                    {\n                        \"Id\": f\"S3-{bucket_name}\",\n                        \"DomainName\": f\"{bucket_name}.s3.amazonaws.com\",\n                        \"S3OriginConfig\": {\n                            \"OriginAccessIdentity\": \"\"\n                        }\n                    }\n                ]\n            },\n            \"Enabled\": True,\n            \"PriceClass\": \"PriceClass_All\"\n        }\n        return json.dumps(config, indent=2)\n    \n    def compare_cdn_services(self):\n        \"\"\"Compare CDN services across cloud providers\"\"\"\n        print(\"CDN Services Comparison:\")\n        print(\"=\" * 50)\n        \n        for cdn_type, config in self.cdn_configs.items():\n            print(f\"\\n{config['service']} ({cdn_type.upper()}):\")\n            print(f\"  Edge Locations: {config['global_edge_locations']}\")\n            print(f\"  Pricing: {config['pricing_model']}\")\n            print(f\"  Integration: {config['integration']}\")\n            print(\"  Key Features:\")\n            for feature in config['features']:\n                print(f\"    - {feature}\")\n\n# Usage\ncdn_config = CDNConfiguration()\ncdn_config.compare_cdn_services()\n\n# Generate sample CloudFront configuration\ncloudfront_config = cdn_config.generate_cloudfront_config(\n    \"example.com\", \n    \"my-static-website-bucket\"\n)\nprint(\"\\nSample CloudFront Configuration:\")\nprint(cloudfront_config)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"free-resources-3",children:"Free Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/",children:"AWS Networking Documentation"})," - Complete VPC and networking guide"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/virtual-network/",children:"Azure Virtual Network Documentation"})," - Azure networking services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/vpc/docs",children:"Google Cloud VPC Documentation"})," - GCP networking fundamentals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.cdnperf.com/",children:"CDN Comparison Guide"})," - CDN performance comparison"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"5-identity-and-access-management-iam",children:"5. Identity and Access Management (IAM)"}),"\n",(0,r.jsx)(n.h3,{id:"multi-cloud-iam-comparison",children:"Multi-Cloud IAM Comparison"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"IAM Concepts Across Clouds:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# IAM concepts and implementation across cloud providers\nclass MultiCloudIAM:\n    def __init__(self):\n        self.iam_concepts = {\n            'aws': {\n                'users': 'IAM Users',\n                'groups': 'IAM Groups',\n                'roles': 'IAM Roles',\n                'policies': 'IAM Policies (JSON)',\n                'federation': 'SAML 2.0, OpenID Connect',\n                'mfa': 'Virtual and Hardware MFA',\n                'temporary_access': 'STS (Security Token Service)',\n                'service_accounts': 'IAM Roles for EC2/Lambda'\n            },\n            'azure': {\n                'users': 'Azure AD Users',\n                'groups': 'Azure AD Groups',\n                'roles': 'Azure AD Roles + Azure RBAC',\n                'policies': 'Azure Policy (JSON)',\n                'federation': 'SAML 2.0, OpenID Connect, WS-Fed',\n                'mfa': 'Azure AD MFA',\n                'temporary_access': 'Azure AD B2B/B2C',\n                'service_accounts': 'Managed Identities'\n            },\n            'gcp': {\n                'users': 'Google Accounts',\n                'groups': 'Google Groups',\n                'roles': 'IAM Roles (Primitive, Predefined, Custom)',\n                'policies': 'IAM Policy (JSON)',\n                'federation': 'SAML 2.0, OpenID Connect',\n                'mfa': '2-Step Verification',\n                'temporary_access': 'Service Account Keys',\n                'service_accounts': 'Service Accounts'\n            }\n        }\n    \n    def compare_iam_features(self):\n        \"\"\"Compare IAM features across cloud providers\"\"\"\n        print(\"Identity and Access Management Comparison:\")\n        print(\"=\" * 60)\n        \n        for concept in ['users', 'groups', 'roles', 'policies', 'federation', 'mfa']:\n            print(f\"\\n{concept.replace('_', ' ').title()}:\")\n            for cloud, features in self.iam_concepts.items():\n                print(f\"  {cloud.upper()}: {features[concept]}\")\n\n# AWS IAM Policy Example\naws_policy_example = {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:PutObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"s3:x-amz-server-side-encryption\": \"AES256\"\n                }\n            }\n        }\n    ]\n}\n\n# Azure RBAC Policy Example\nazure_policy_example = {\n    \"properties\": {\n        \"roleName\": \"Custom Storage Contributor\",\n        \"description\": \"Can read and write to storage accounts\",\n        \"assignableScopes\": [\n            \"/subscriptions/{subscription-id}\"\n        ],\n        \"permissions\": [\n            {\n                \"actions\": [\n                    \"Microsoft.Storage/storageAccounts/blobServices/containers/read\",\n                    \"Microsoft.Storage/storageAccounts/blobServices/containers/write\"\n                ],\n                \"notActions\": [],\n                \"dataActions\": [\n                    \"Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read\",\n                    \"Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write\"\n                ],\n                \"notDataActions\": []\n            }\n        ]\n    }\n}\n\n# GCP IAM Policy Example\ngcp_policy_example = {\n    \"bindings\": [\n        {\n            \"role\": \"roles/storage.objectViewer\",\n            \"members\": [\n                \"user:alice@example.com\",\n                \"group:admins@example.com\",\n                \"serviceAccount:my-service@project.iam.gserviceaccount.com\"\n            ],\n            \"condition\": {\n                \"title\": \"Expires in 2024\",\n                \"description\": \"Access expires at end of 2024\",\n                \"expression\": \"request.time < timestamp('2025-01-01T00:00:00Z')\"\n            }\n        }\n    ]\n}\n\n# Usage\niam_comparison = MultiCloudIAM()\niam_comparison.compare_iam_features()\n\nprint(\"\\nSample IAM Policies:\")\nprint(\"\\nAWS IAM Policy:\")\nprint(json.dumps(aws_policy_example, indent=2))\n\nprint(\"\\nAzure RBAC Policy:\")\nprint(json.dumps(azure_policy_example, indent=2))\n\nprint(\"\\nGCP IAM Policy:\")\nprint(json.dumps(gcp_policy_example, indent=2))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Multi-Cloud Security Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Security best practices implementation across clouds\nclass CloudSecurityBestPractices:\n    def __init__(self):\n        self.security_practices = {\n            'identity_management': [\n                'Enable multi-factor authentication (MFA)',\n                'Use principle of least privilege',\n                'Implement role-based access control (RBAC)',\n                'Regular access reviews and cleanup',\n                'Use temporary credentials when possible'\n            ],\n            'data_protection': [\n                'Enable encryption at rest and in transit',\n                'Use managed encryption keys when possible',\n                'Implement data classification and labeling',\n                'Regular backup and recovery testing',\n                'Data loss prevention (DLP) policies'\n            ],\n            'network_security': [\n                'Use private subnets for sensitive resources',\n                'Implement network segmentation',\n                'Enable VPC flow logs',\n                'Use Web Application Firewall (WAF)',\n                'Regular security group audits'\n            ],\n            'monitoring_logging': [\n                'Enable comprehensive audit logging',\n                'Implement real-time security monitoring',\n                'Set up automated alerting',\n                'Regular security assessments',\n                'Incident response procedures'\n            ]\n        }\n    \n    def generate_security_checklist(self):\n        \"\"\"Generate comprehensive security checklist\"\"\"\n        print(\"Cloud Security Best Practices Checklist:\")\n        print(\"=\" * 50)\n        \n        for category, practices in self.security_practices.items():\n            print(f\"\\n{category.replace('_', ' ').title()}:\")\n            for i, practice in enumerate(practices, 1):\n                print(f\"  {i}. [ ] {practice}\")\n    \n    def aws_security_config(self):\n        \"\"\"AWS-specific security configuration\"\"\"\n        return {\n            'cloudtrail': {\n                'enabled': True,\n                'multi_region': True,\n                'log_file_validation': True,\n                's3_bucket_encryption': True\n            },\n            'config': {\n                'enabled': True,\n                'rules': [\n                    'root-access-key-check',\n                    'mfa-enabled-for-iam-console-access',\n                    's3-bucket-public-access-prohibited',\n                    'encrypted-volumes'\n                ]\n            },\n            'guardduty': {\n                'enabled': True,\n                'finding_publishing_frequency': 'FIFTEEN_MINUTES'\n            },\n            'security_hub': {\n                'enabled': True,\n                'standards': ['aws-foundational', 'cis', 'pci-dss']\n            }\n        }\n    \n    def azure_security_config(self):\n        \"\"\"Azure-specific security configuration\"\"\"\n        return {\n            'security_center': {\n                'enabled': True,\n                'tier': 'Standard',\n                'auto_provisioning': True\n            },\n            'azure_sentinel': {\n                'enabled': True,\n                'data_connectors': ['AzureActivity', 'SecurityEvents', 'AzureAD']\n            },\n            'key_vault': {\n                'soft_delete_enabled': True,\n                'purge_protection_enabled': True,\n                'access_policies': 'RBAC'\n            },\n            'policy': {\n                'initiatives': [\n                    'Azure Security Benchmark',\n                    'CIS Microsoft Azure Foundations Benchmark'\n                ]\n            }\n        }\n    \n    def gcp_security_config(self):\n        \"\"\"GCP-specific security configuration\"\"\"\n        return {\n            'security_command_center': {\n                'enabled': True,\n                'tier': 'Premium'\n            },\n            'cloud_audit_logs': {\n                'admin_activity': True,\n                'data_access': True,\n                'system_events': True\n            },\n            'binary_authorization': {\n                'enabled': True,\n                'policy': 'require-attestation'\n            },\n            'vpc_security': {\n                'private_google_access': True,\n                'flow_logs': True,\n                'firewall_rules_logging': True\n            }\n        }\n\n# Usage\nsecurity_practices = CloudSecurityBestPractices()\nsecurity_practices.generate_security_checklist()\n\nprint(\"\\nCloud-Specific Security Configurations:\")\nprint(\"\\nAWS Security Configuration:\")\nprint(json.dumps(security_practices.aws_security_config(), indent=2))\n\nprint(\"\\nAzure Security Configuration:\")\nprint(json.dumps(security_practices.azure_security_config(), indent=2))\n\nprint(\"\\nGCP Security Configuration:\")\nprint(json.dumps(security_practices.gcp_security_config(), indent=2))\n"})}),"\n",(0,r.jsx)(n.h3,{id:"free-resources-4",children:"Free Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html",children:"AWS IAM Best Practices"})," - AWS security guidance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/active-directory/",children:"Azure AD Documentation"})," - Azure identity management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/iam/docs",children:"Google Cloud IAM Documentation"})," - GCP identity and access management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloudsecurityalliance.org/",children:"Cloud Security Alliance"})," - Cloud security best practices"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"hands-on-exercises",children:"Hands-On Exercises"}),"\n",(0,r.jsx)(n.h3,{id:"exercise-1-multi-cloud-architecture-deployment",children:"Exercise 1: Multi-Cloud Architecture Deployment"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Task:"})," Deploy identical three-tier web application across AWS, Azure, and GCP."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Web tier with load balancer and auto-scaling"}),"\n",(0,r.jsx)(n.li,{children:"Application tier with compute instances"}),"\n",(0,r.jsx)(n.li,{children:"Database tier with managed database service"}),"\n",(0,r.jsx)(n.li,{children:"Implement proper networking and security"}),"\n",(0,r.jsx)(n.li,{children:"Compare costs and performance across platforms"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"exercise-2-cloud-storage-and-cdn-implementation",children:"Exercise 2: Cloud Storage and CDN Implementation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Task:"})," Implement global content delivery solution with object storage."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Set up object storage in multiple regions"}),"\n",(0,r.jsx)(n.li,{children:"Configure CDN for global content delivery"}),"\n",(0,r.jsx)(n.li,{children:"Implement lifecycle policies for cost optimization"}),"\n",(0,r.jsx)(n.li,{children:"Set up monitoring and analytics"}),"\n",(0,r.jsx)(n.li,{children:"Compare performance across different regions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"exercise-3-identity-and-access-management",children:"Exercise 3: Identity and Access Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Task:"})," Design and implement comprehensive IAM strategy."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create users, groups, and roles with appropriate permissions"}),"\n",(0,r.jsx)(n.li,{children:"Implement multi-factor authentication"}),"\n",(0,r.jsx)(n.li,{children:"Set up federated access with external identity provider"}),"\n",(0,r.jsx)(n.li,{children:"Create custom policies for specific use cases"}),"\n",(0,r.jsx)(n.li,{children:"Implement security monitoring and compliance"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"assessment-questions",children:"Assessment Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Compare and contrast the three major cloud service models (IaaS, PaaS, SaaS) with real-world examples."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Design a multi-cloud architecture for a global e-commerce application with high availability requirements."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implement a comprehensive security strategy covering identity, data, network, and monitoring across multiple cloud platforms."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analyze the cost implications of different cloud deployment models and optimization strategies."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Design a disaster recovery strategy that leverages multiple cloud providers for maximum resilience."})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"After completing this module:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Practice with free tier accounts"})," across AWS, Azure, and GCP"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build portfolio projects"})," demonstrating multi-cloud skills"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Join cloud communities"})," and participate in discussions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Move to Module 2: Multi-Cloud Infrastructure"})," to learn advanced networking and infrastructure patterns"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsx)(n.h3,{id:"cloud-provider-documentation",children:"Cloud Provider Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/",children:"AWS Documentation"})," - Complete AWS service documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/",children:"Azure Documentation"})," - Microsoft Azure documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/docs",children:"Google Cloud Documentation"})," - GCP documentation and guides"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/",children:"Multi-Cloud Architecture Patterns"})," - Architecture guidance"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"training-and-certification",children:"Training and Certification"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://aws.amazon.com/training/",children:"AWS Training and Certification"})," - AWS learning paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/learn/",children:"Microsoft Learn"})," - Azure training platform"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://cloud.google.com/training",children:"Google Cloud Training"})," - GCP certification paths"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.cncf.io/certification/",children:"Cloud Native Computing Foundation"})," - Cloud native certifications"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Ready to build advanced multi-cloud infrastructure? Continue to ",(0,r.jsx)(n.strong,{children:"Module 2: Multi-Cloud Infrastructure and Networking"})," to master complex cloud architectures!"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);