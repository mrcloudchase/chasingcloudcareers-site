"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[1923],{8223:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"linux-engineering/server-management","title":"Server Management and Performance","description":"Master web server configuration, database management, and system performance optimization.","source":"@site/docs/linux-engineering/05-server-management.md","sourceDirName":"linux-engineering","slug":"/linux-engineering/server-management","permalink":"/chasingcloudcareers-site/docs/linux-engineering/server-management","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/linux-engineering/05-server-management.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Network Configuration and Security","permalink":"/chasingcloudcareers-site/docs/linux-engineering/networking-security"},"next":{"title":"\u2601\ufe0f Cloud Engineering","permalink":"/chasingcloudcareers-site/docs/category/\ufe0f-cloud-engineering"}}');var t=s(4848),r=s(8453);const o={sidebar_position:6},i="Server Management and Performance",c={},l=[{value:"Web Server Management",id:"web-server-management",level:2},{value:"Apache HTTP Server",id:"apache-http-server",level:3},{value:"Nginx Web Server",id:"nginx-web-server",level:3},{value:"Let&#39;s Encrypt SSL Certificates",id:"lets-encrypt-ssl-certificates",level:3},{value:"Practical Web Server Examples",id:"practical-web-server-examples",level:3},{value:"Database Management",id:"database-management",level:2},{value:"MySQL/MariaDB",id:"mysqlmariadb",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"Database Backup and Recovery",id:"database-backup-and-recovery",level:3},{value:"Performance Monitoring and Optimization",id:"performance-monitoring-and-optimization",level:2},{value:"System Performance Monitoring",id:"system-performance-monitoring",level:3},{value:"Performance Optimization Techniques",id:"performance-optimization-techniques",level:3},{value:"Comprehensive Performance Monitoring Script",id:"comprehensive-performance-monitoring-script",level:3},{value:"Free Learning Resources",id:"free-learning-resources",level:2},{value:"Web Server Resources",id:"web-server-resources",level:3},{value:"Database Resources",id:"database-resources",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Practice Labs",id:"practice-labs",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"server-management-and-performance",children:"Server Management and Performance"})}),"\n",(0,t.jsx)(n.p,{children:"Master web server configuration, database management, and system performance optimization."}),"\n",(0,t.jsx)(n.h2,{id:"web-server-management",children:"Web Server Management"}),"\n",(0,t.jsx)(n.p,{children:"Web servers are fundamental components of modern infrastructure. Learn to configure and manage popular web servers."}),"\n",(0,t.jsx)(n.h3,{id:"apache-http-server",children:"Apache HTTP Server"}),"\n",(0,t.jsx)(n.p,{children:"Apache is one of the most widely used web servers, known for its flexibility and extensive module system."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation and Basic Setup:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt update\nsudo apt install apache2\n\n# CentOS/RHEL\nsudo yum install httpd\n# or on newer versions\nsudo dnf install httpd\n\n# Start and enable Apache\nsudo systemctl start apache2    # Ubuntu/Debian\nsudo systemctl start httpd     # CentOS/RHEL\nsudo systemctl enable apache2  # Ubuntu/Debian\nsudo systemctl enable httpd    # CentOS/RHEL\n\n# Check status\nsudo systemctl status apache2\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Apache Configuration Files:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Main configuration files\n/etc/apache2/apache2.conf           # Ubuntu/Debian main config\n/etc/httpd/conf/httpd.conf          # CentOS/RHEL main config\n\n# Virtual host configurations\n/etc/apache2/sites-available/       # Ubuntu/Debian\n/etc/httpd/conf.d/                  # CentOS/RHEL\n\n# Module configurations\n/etc/apache2/mods-available/        # Ubuntu/Debian\n/etc/httpd/conf.modules.d/          # CentOS/RHEL\n\n# Document root\n/var/www/html/                      # Default web directory\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic Apache Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Edit main configuration\nsudo nano /etc/apache2/apache2.conf\n\n# Key directives:\nServerRoot /etc/apache2\nListen 80\nUser www-data\nGroup www-data\nDocumentRoot /var/www/html\nDirectoryIndex index.html index.php\n\n# Security settings\nServerTokens Prod\nServerSignature Off\n\n# Performance settings\nTimeout 60\nKeepAlive On\nMaxKeepAliveRequests 100\nKeepAliveTimeout 5\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Virtual Hosts Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create virtual host file\nsudo nano /etc/apache2/sites-available/example.com.conf\n\n# Virtual host configuration:\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Directory permissions\n    <Directory /var/www/example.com>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n</VirtualHost>\n\n# Enable the site\nsudo a2ensite example.com.conf\n\n# Create document root\nsudo mkdir -p /var/www/example.com\nsudo chown -R www-data:www-data /var/www/example.com\n\n# Test configuration\nsudo apache2ctl configtest\n\n# Reload Apache\nsudo systemctl reload apache2\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"SSL/HTTPS Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Enable SSL module\nsudo a2enmod ssl\n\n# Create SSL virtual host\nsudo nano /etc/apache2/sites-available/example.com-ssl.conf\n\n<VirtualHost *:443>\n    ServerName example.com\n    DocumentRoot /var/www/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/example.com.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection "1; mode=block"\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_ssl_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_ssl_access.log combined\n</VirtualHost>\n\n# Enable headers module and site\nsudo a2enmod headers\nsudo a2ensite example.com-ssl.conf\nsudo systemctl reload apache2\n'})}),"\n",(0,t.jsx)(n.h3,{id:"nginx-web-server",children:"Nginx Web Server"}),"\n",(0,t.jsx)(n.p,{children:"Nginx is known for high performance, low resource usage, and excellent reverse proxy capabilities."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation and Basic Setup:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt update\nsudo apt install nginx\n\n# CentOS/RHEL\nsudo yum install nginx\n# or\nsudo dnf install nginx\n\n# Start and enable Nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx\n\n# Check status\nsudo systemctl status nginx\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Nginx Configuration Structure:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Main configuration\n/etc/nginx/nginx.conf\n\n# Site configurations\n/etc/nginx/sites-available/    # Ubuntu/Debian\n/etc/nginx/conf.d/            # CentOS/RHEL\n\n# Document root\n/var/www/html/                # Default\n\n# Log files\n/var/log/nginx/access.log\n/var/log/nginx/error.log\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic Nginx Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Edit main configuration\nsudo nano /etc/nginx/nginx.conf\n\n# Main context configuration:\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\n\nevents {\n    worker_connections 768;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic Settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    server_tokens off;\n    \n    # MIME types\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Logging\n    log_format main \'$remote_addr - $remote_user [$time_local] "$request" \'\n                    \'$status $body_bytes_sent "$http_referer" \'\n                    \'"$http_user_agent" "$http_x_forwarded_for"\';\n    \n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n    \n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n    \n    # Include site configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Nginx Server Blocks (Virtual Hosts):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create server block configuration\nsudo nano /etc/nginx/sites-available/example.com\n\nserver {\n    listen 80;\n    listen [::]:80;\n    \n    server_name example.com www.example.com;\n    root /var/www/example.com;\n    index index.html index.htm index.php;\n    \n    # Security headers\n    add_header X-Frame-Options "SAMEORIGIN" always;\n    add_header X-XSS-Protection "1; mode=block" always;\n    add_header X-Content-Type-Options "nosniff" always;\n    add_header Referrer-Policy "no-referrer-when-downgrade" always;\n    add_header Content-Security-Policy "default-src \'self\' http: https: data: blob: \'unsafe-inline\'" always;\n    \n    # Main location block\n    location / {\n        try_files $uri $uri/ =404;\n    }\n    \n    # PHP processing (if needed)\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;\n    }\n    \n    # Deny access to hidden files\n    location ~ /\\. {\n        deny all;\n    }\n    \n    # Static file caching\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n        expires 1y;\n        add_header Cache-Control "public, immutable";\n    }\n    \n    # Logging\n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log;\n}\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n\n# Test configuration\nsudo nginx -t\n\n# Reload Nginx\nsudo systemctl reload nginx\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Nginx SSL Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# SSL server block\nsudo nano /etc/nginx/sites-available/example.com-ssl\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    \n    server_name example.com www.example.com;\n    root /var/www/example.com;\n    \n    # SSL Configuration\n    ssl_certificate /etc/ssl/certs/example.com.crt;\n    ssl_certificate_key /etc/ssl/private/example.com.key;\n    \n    # SSL Security\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    \n    # HSTS\n    add_header Strict-Transport-Security "max-age=63072000" always;\n    \n    # Rest of configuration...\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"lets-encrypt-ssl-certificates",children:"Let's Encrypt SSL Certificates"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installing Certbot:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt install certbot python3-certbot-apache python3-certbot-nginx\n\n# CentOS/RHEL\nsudo yum install certbot python3-certbot-apache python3-certbot-nginx\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Obtaining SSL Certificates:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# For Apache\nsudo certbot --apache -d example.com -d www.example.com\n\n# For Nginx\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Manual certificate generation\nsudo certbot certonly --standalone -d example.com -d www.example.com\n\n# Test automatic renewal\nsudo certbot renew --dry-run\n\n# Set up automatic renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n"})}),"\n",(0,t.jsx)(n.h3,{id:"practical-web-server-examples",children:"Practical Web Server Examples"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 1: Multi-Site Apache Configuration Script"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\ncreate_apache_vhost() {\n    local domain=$1\n    local doc_root="/var/www/$domain"\n    \n    echo "Creating virtual host for $domain..."\n    \n    # Create document root\n    sudo mkdir -p "$doc_root"\n    sudo chown -R www-data:www-data "$doc_root"\n    sudo chmod -R 755 "$doc_root"\n    \n    # Create index file\n    cat > /tmp/index.html << EOF\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to $domain</title>\n</head>\n<body>\n    <h1>$domain is working!</h1>\n    <p>This is the default page for $domain</p>\n</body>\n</html>\nEOF\n    \n    sudo mv /tmp/index.html "$doc_root/"\n    \n    # Create virtual host configuration\n    sudo tee "/etc/apache2/sites-available/$domain.conf" > /dev/null << EOF\n<VirtualHost *:80>\n    ServerName $domain\n    ServerAlias www.$domain\n    DocumentRoot $doc_root\n    \n    ErrorLog \\${APACHE_LOG_DIR}/${domain}_error.log\n    CustomLog \\${APACHE_LOG_DIR}/${domain}_access.log combined\n    \n    <Directory $doc_root>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n    \n    # Security headers\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection "1; mode=block"\n</VirtualHost>\nEOF\n    \n    # Enable site\n    sudo a2ensite "$domain.conf"\n    \n    echo "Virtual host created for $domain"\n}\n\n# Enable required modules\nsudo a2enmod rewrite\nsudo a2enmod headers\nsudo a2enmod ssl\n\n# Create multiple sites\ndomains=("site1.local" "site2.local" "site3.local")\n\nfor domain in "${domains[@]}"; do\n    create_apache_vhost "$domain"\ndone\n\n# Test configuration\nif sudo apache2ctl configtest; then\n    sudo systemctl reload apache2\n    echo "Apache configuration reloaded successfully"\nelse\n    echo "Apache configuration test failed"\nfi\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example 2: Nginx Load Balancer Configuration"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Create load balancer configuration\nsudo tee /etc/nginx/conf.d/load_balancer.conf > /dev/null << \'EOF\'\n# Upstream backend servers\nupstream backend_servers {\n    least_conn;  # Load balancing method\n    server 192.168.1.10:8080 weight=3 max_fails=3 fail_timeout=30s;\n    server 192.168.1.11:8080 weight=2 max_fails=3 fail_timeout=30s;\n    server 192.168.1.12:8080 weight=1 max_fails=3 fail_timeout=30s backup;\n}\n\n# Health check location\nupstream backend_health {\n    server 192.168.1.10:8080;\n    server 192.168.1.11:8080;\n    server 192.168.1.12:8080;\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n    \n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n    \n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/app.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/app.example.com.key;\n    \n    # Logging\n    access_log /var/log/nginx/app.example.com.access.log;\n    error_log /var/log/nginx/app.example.com.error.log;\n    \n    # Main application\n    location / {\n        proxy_pass http://backend_servers;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 30s;\n        proxy_send_timeout 30s;\n        proxy_read_timeout 30s;\n        \n        # Buffer settings\n        proxy_buffering on;\n        proxy_buffer_size 4k;\n        proxy_buffers 8 4k;\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://backend_health/health;\n        proxy_set_header Host $host;\n    }\n    \n    # Static files (served directly by Nginx)\n    location /static/ {\n        alias /var/www/static/;\n        expires 1y;\n        add_header Cache-Control "public, immutable";\n    }\n}\nEOF\n\necho "Load balancer configuration created"\necho "Test with: sudo nginx -t"\necho "Reload with: sudo systemctl reload nginx"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"database-management",children:"Database Management"}),"\n",(0,t.jsx)(n.p,{children:"Database servers are critical components that require proper installation, configuration, and maintenance."}),"\n",(0,t.jsx)(n.h3,{id:"mysqlmariadb",children:"MySQL/MariaDB"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian - MySQL\nsudo apt update\nsudo apt install mysql-server\n\n# Ubuntu/Debian - MariaDB\nsudo apt install mariadb-server\n\n# CentOS/RHEL - MySQL\nsudo yum install mysql-server\n# or\nsudo dnf install mysql-server\n\n# CentOS/RHEL - MariaDB\nsudo yum install mariadb-server\n# or\nsudo dnf install mariadb-server\n\n# Start and enable service\nsudo systemctl start mysql      # or mariadb\nsudo systemctl enable mysql     # or mariadb\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Initial Security Setup:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run security script\nsudo mysql_secure_installation\n\n# Manual security steps:\nmysql -u root -p\n\n-- Set root password (if not set)\nALTER USER 'root'@'localhost' IDENTIFIED BY 'strong_password';\n\n-- Remove anonymous users\nDELETE FROM mysql.user WHERE User='';\n\n-- Disable remote root login\nDELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\n\n-- Remove test database\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';\n\n-- Reload privileges\nFLUSH PRIVILEGES;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic MySQL Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Edit MySQL configuration\nsudo nano /etc/mysql/mysql.conf.d/mysqld.cnf\n\n# Key settings:\n[mysqld]\n# Basic settings\nbind-address = 127.0.0.1\nport = 3306\ndatadir = /var/lib/mysql\nsocket = /var/run/mysqld/mysqld.sock\n\n# Performance settings\nmax_connections = 100\ninnodb_buffer_pool_size = 128M\ninnodb_log_file_size = 64M\nquery_cache_size = 16M\nquery_cache_limit = 1M\n\n# Security settings\nlocal-infile = 0\nskip-show-database\n\n# Logging\nlog_error = /var/log/mysql/error.log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\n\n# Binary logging (for replication)\nlog_bin = /var/log/mysql/mysql-bin.log\nbinlog_expire_logs_seconds = 604800  # 7 days\n\n# Restart MySQL after configuration changes\nsudo systemctl restart mysql\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Database and User Management:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Connect to MySQL\nmysql -u root -p\n\n-- Create database\nCREATE DATABASE myapp_production;\nCREATE DATABASE myapp_development;\n\n-- Create user with specific privileges\nCREATE USER 'myapp_user'@'localhost' IDENTIFIED BY 'secure_password';\nCREATE USER 'myapp_user'@'192.168.1.%' IDENTIFIED BY 'secure_password';\n\n-- Grant privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp_production.* TO 'myapp_user'@'localhost';\nGRANT ALL PRIVILEGES ON myapp_development.* TO 'myapp_user'@'localhost';\n\n-- Create read-only user\nCREATE USER 'readonly_user'@'localhost' IDENTIFIED BY 'readonly_password';\nGRANT SELECT ON myapp_production.* TO 'readonly_user'@'localhost';\n\n-- Create backup user\nCREATE USER 'backup_user'@'localhost' IDENTIFIED BY 'backup_password';\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO 'backup_user'@'localhost';\n\n-- Reload privileges\nFLUSH PRIVILEGES;\n\n-- Show users and privileges\nSELECT User, Host FROM mysql.user;\nSHOW GRANTS FOR 'myapp_user'@'localhost';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# CentOS/RHEL\nsudo yum install postgresql-server postgresql-contrib\n# or\nsudo dnf install postgresql-server postgresql-contrib\n\n# Initialize database (CentOS/RHEL only)\nsudo postgresql-setup initdb\n\n# Start and enable service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"PostgreSQL Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Switch to postgres user\nsudo -u postgres psql\n\n-- Set password for postgres user\n\\password postgres\n\n-- Exit psql\n\\q\n\n# Edit PostgreSQL configuration\nsudo nano /etc/postgresql/13/main/postgresql.conf\n\n# Key settings:\nlisten_addresses = 'localhost'\nport = 5432\nmax_connections = 100\nshared_buffers = 128MB\neffective_cache_size = 4GB\nmaintenance_work_mem = 64MB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\n\n# Edit client authentication\nsudo nano /etc/postgresql/13/main/pg_hba.conf\n\n# Example pg_hba.conf entries:\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\nlocal   all             postgres                                peer\nlocal   all             all                                     md5\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\nhost    all             all             192.168.1.0/24          md5\n\n# Restart PostgreSQL\nsudo systemctl restart postgresql\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"PostgreSQL Database Management:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Connect as postgres user\nsudo -u postgres psql\n\n-- Create database\nCREATE DATABASE myapp_production;\nCREATE DATABASE myapp_development;\n\n-- Create user\nCREATE USER myapp_user WITH PASSWORD 'secure_password';\n\n-- Grant privileges\nGRANT ALL PRIVILEGES ON DATABASE myapp_production TO myapp_user;\nGRANT ALL PRIVILEGES ON DATABASE myapp_development TO myapp_user;\n\n-- Create read-only user\nCREATE USER readonly_user WITH PASSWORD 'readonly_password';\nGRANT CONNECT ON DATABASE myapp_production TO readonly_user;\n\\c myapp_production\nGRANT USAGE ON SCHEMA public TO readonly_user;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly_user;\n\n-- List databases and users\n\\l\n\\du\n\n-- Connect to specific database\n\\c myapp_production\n\n-- Show tables\n\\dt\n\n-- Exit psql\n\\q\n"})}),"\n",(0,t.jsx)(n.h3,{id:"database-backup-and-recovery",children:"Database Backup and Recovery"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"MySQL Backup Scripts:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# MySQL backup script\nBACKUP_DIR="/backup/mysql"\nDATE=$(date +%Y%m%d_%H%M%S)\nMYSQL_USER="backup_user"\nMYSQL_PASSWORD="backup_password"\nDATABASES=("myapp_production" "myapp_development")\n\n# Create backup directory\nmkdir -p "$BACKUP_DIR"\n\n# Function to backup single database\nbackup_database() {\n    local db_name=$1\n    local backup_file="$BACKUP_DIR/${db_name}_${DATE}.sql"\n    \n    echo "Backing up database: $db_name"\n    \n    if mysqldump -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" \\\n        --single-transaction \\\n        --routines \\\n        --triggers \\\n        "$db_name" > "$backup_file"; then\n        \n        # Compress backup\n        gzip "$backup_file"\n        echo "Backup completed: ${backup_file}.gz"\n        \n        # Set permissions\n        chmod 600 "${backup_file}.gz"\n        \n        return 0\n    else\n        echo "Backup failed for database: $db_name"\n        return 1\n    fi\n}\n\n# Backup all databases\nfor db in "${DATABASES[@]}"; do\n    backup_database "$db"\ndone\n\n# Clean up old backups (keep 7 days)\nfind "$BACKUP_DIR" -name "*.sql.gz" -mtime +7 -delete\n\necho "Backup process completed"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"PostgreSQL Backup Script:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# PostgreSQL backup script\nBACKUP_DIR="/backup/postgresql"\nDATE=$(date +%Y%m%d_%H%M%S)\nPG_USER="postgres"\nDATABASES=("myapp_production" "myapp_development")\n\n# Create backup directory\nmkdir -p "$BACKUP_DIR"\n\n# Function to backup single database\nbackup_database() {\n    local db_name=$1\n    local backup_file="$BACKUP_DIR/${db_name}_${DATE}.sql"\n    \n    echo "Backing up database: $db_name"\n    \n    if sudo -u "$PG_USER" pg_dump "$db_name" > "$backup_file"; then\n        # Compress backup\n        gzip "$backup_file"\n        echo "Backup completed: ${backup_file}.gz"\n        \n        # Set permissions\n        chmod 600 "${backup_file}.gz"\n        \n        return 0\n    else\n        echo "Backup failed for database: $db_name"\n        return 1\n    fi\n}\n\n# Backup all databases\nfor db in "${DATABASES[@]}"; do\n    backup_database "$db"\ndone\n\n# Clean up old backups (keep 7 days)\nfind "$BACKUP_DIR" -name "*.sql.gz" -mtime +7 -delete\n\necho "Backup process completed"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Database Restoration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# MySQL restoration\nmysql -u root -p myapp_production < backup_file.sql\n\n# PostgreSQL restoration\nsudo -u postgres psql myapp_production < backup_file.sql\n\n# Or create new database and restore\nsudo -u postgres createdb myapp_restored\nsudo -u postgres psql myapp_restored < backup_file.sql\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-monitoring-and-optimization",children:"Performance Monitoring and Optimization"}),"\n",(0,t.jsx)(n.p,{children:"System performance monitoring helps identify bottlenecks and optimize resource usage."}),"\n",(0,t.jsx)(n.h3,{id:"system-performance-monitoring",children:"System Performance Monitoring"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CPU Monitoring:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Real-time CPU monitoring\ntop\nhtop\n\n# CPU usage by process\nps aux --sort=-%cpu | head -10\n\n# CPU information\nlscpu\ncat /proc/cpuinfo\n\n# Load average monitoring\nuptime\ncat /proc/loadavg\n\n# Historical CPU data\nsar -u 1 10  # CPU usage every second for 10 seconds\nsar -u -f /var/log/sysstat/saXX  # Historical data\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Memory Monitoring:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Memory usage\nfree -h\ncat /proc/meminfo\n\n# Memory usage by process\nps aux --sort=-%mem | head -10\n\n# Detailed memory analysis\nsudo pmap -x PID  # Memory map for specific process\nsudo smem -t      # Memory usage with swap\n\n# Memory statistics over time\nsar -r 1 10  # Memory usage every second\nvmstat 1 10  # Virtual memory statistics\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disk I/O Monitoring:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Disk usage\ndf -h\ndu -sh /var/log/*\n\n# Disk I/O statistics\niostat -x 1 10\niotop  # Real-time I/O monitoring\n\n# Find large files\nfind / -type f -size +100M -exec ls -lh {} \\; 2>/dev/null\n\n# Disk performance testing\nsudo hdparm -tT /dev/sda  # Read performance test\nsudo dd if=/dev/zero of=/tmp/test bs=1M count=1024  # Write test\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Monitoring:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Network interface statistics\ncat /proc/net/dev\nip -s link show\n\n# Network connections\nss -tuln\nnetstat -tuln\n\n# Network traffic monitoring\niftop -i eth0\nnethogs\nnload\n\n# Network performance testing\niperf3 -s  # Server mode\niperf3 -c server_ip  # Client mode\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-optimization-techniques",children:"Performance Optimization Techniques"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"System Tuning:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Kernel parameters for performance\nsudo nano /etc/sysctl.d/99-performance.conf\n\n# Network performance\nnet.core.rmem_max = 16777216\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 87380 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nnet.ipv4.tcp_congestion_control = bbr\n\n# File system performance\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nvm.swappiness = 10\n\n# Apply settings\nsudo sysctl -p /etc/sysctl.d/99-performance.conf\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Web Server Optimization:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Apache performance tuning\nsudo nano /etc/apache2/mods-available/mpm_prefork.conf\n\n<IfModule mpm_prefork_module>\n    StartServers             8\n    MinSpareServers          5\n    MaxSpareServers         20\n    ServerLimit            256\n    MaxRequestWorkers      256\n    MaxConnectionsPerChild   0\n</IfModule>\n\n# Enable compression\nsudo a2enmod deflate\nsudo nano /etc/apache2/mods-available/deflate.conf\n\n<IfModule mod_deflate.c>\n    AddOutputFilterByType DEFLATE text/plain\n    AddOutputFilterByType DEFLATE text/html\n    AddOutputFilterByType DEFLATE text/xml\n    AddOutputFilterByType DEFLATE text/css\n    AddOutputFilterByType DEFLATE application/xml\n    AddOutputFilterByType DEFLATE application/xhtml+xml\n    AddOutputFilterByType DEFLATE application/rss+xml\n    AddOutputFilterByType DEFLATE application/javascript\n    AddOutputFilterByType DEFLATE application/x-javascript\n</IfModule>\n\n# Nginx performance tuning\nsudo nano /etc/nginx/nginx.conf\n\nworker_processes auto;\nworker_connections 1024;\nworker_rlimit_nofile 2048;\n\n# Enable gzip compression\ngzip on;\ngzip_vary on;\ngzip_min_length 1024;\ngzip_comp_level 6;\ngzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n# Buffer sizes\nclient_body_buffer_size 128k;\nclient_max_body_size 10m;\nclient_header_buffer_size 1k;\nlarge_client_header_buffers 4 4k;\noutput_buffers 1 32k;\npostpone_output 1460;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Database Optimization:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# MySQL performance tuning\nsudo nano /etc/mysql/mysql.conf.d/mysqld.cnf\n\n[mysqld]\n# InnoDB settings\ninnodb_buffer_pool_size = 1G  # 70-80% of available RAM\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_file_per_table = 1\n\n# Query cache\nquery_cache_type = 1\nquery_cache_size = 64M\nquery_cache_limit = 2M\n\n# Connection settings\nmax_connections = 200\nthread_cache_size = 8\ntable_open_cache = 2000\n\n# PostgreSQL performance tuning\nsudo nano /etc/postgresql/13/main/postgresql.conf\n\n# Memory settings\nshared_buffers = 256MB\neffective_cache_size = 1GB\nwork_mem = 4MB\nmaintenance_work_mem = 64MB\n\n# Checkpoint settings\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\n\n# Connection settings\nmax_connections = 100\n"})}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-performance-monitoring-script",children:"Comprehensive Performance Monitoring Script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n#############################################\n# System Performance Monitor\n# Description: Comprehensive system monitoring\n# Version: 1.0\n#############################################\n\nREPORT_FILE="/tmp/performance_report_$(date +%Y%m%d_%H%M%S).txt"\nALERT_THRESHOLDS=(\n    "CPU_THRESHOLD=80"\n    "MEMORY_THRESHOLD=80"\n    "DISK_THRESHOLD=85"\n    "LOAD_THRESHOLD=2.0"\n)\n\n# Load thresholds\nfor threshold in "${ALERT_THRESHOLDS[@]}"; do\n    export "$threshold"\ndone\n\nlog_section() {\n    echo "=== $1 ===" | tee -a "$REPORT_FILE"\n    echo "Timestamp: $(date)" | tee -a "$REPORT_FILE"\n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_cpu_usage() {\n    log_section "CPU Usage Analysis"\n    \n    # Current CPU usage\n    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk \'{print $2}\' | sed \'s/%us,//\')\n    echo "Current CPU Usage: ${cpu_usage}%" | tee -a "$REPORT_FILE"\n    \n    # Load average\n    load_avg=$(uptime | awk -F\'load average:\' \'{print $2}\' | awk \'{print $1}\' | sed \'s/,//\')\n    echo "Load Average (1min): $load_avg" | tee -a "$REPORT_FILE"\n    \n    # Top CPU processes\n    echo "Top 5 CPU-consuming processes:" | tee -a "$REPORT_FILE"\n    ps aux --sort=-%cpu | head -6 | tee -a "$REPORT_FILE"\n    \n    # CPU usage alert\n    cpu_num=$(echo "$cpu_usage" | cut -d\'.\' -f1)\n    if [ "$cpu_num" -gt "$CPU_THRESHOLD" ]; then\n        echo "ALERT: High CPU usage detected!" | tee -a "$REPORT_FILE"\n    fi\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_memory_usage() {\n    log_section "Memory Usage Analysis"\n    \n    # Memory statistics\n    free -h | tee -a "$REPORT_FILE"\n    \n    # Memory usage percentage\n    memory_usage=$(free | awk \'NR==2{printf "%.0f", $3*100/$2}\')\n    echo "Memory Usage: ${memory_usage}%" | tee -a "$REPORT_FILE"\n    \n    # Top memory processes\n    echo "Top 5 memory-consuming processes:" | tee -a "$REPORT_FILE"\n    ps aux --sort=-%mem | head -6 | tee -a "$REPORT_FILE"\n    \n    # Memory usage alert\n    if [ "$memory_usage" -gt "$MEMORY_THRESHOLD" ]; then\n        echo "ALERT: High memory usage detected!" | tee -a "$REPORT_FILE"\n    fi\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_disk_usage() {\n    log_section "Disk Usage Analysis"\n    \n    # Disk space usage\n    df -h | tee -a "$REPORT_FILE"\n    \n    # Check for high disk usage\n    echo "Disk usage alerts:" | tee -a "$REPORT_FILE"\n    df -h | awk \'NR>1 {\n        usage = substr($5, 1, length($5)-1)\n        if (usage > 85) \n            print "ALERT: " $6 " is " $5 " full"\n    }\' | tee -a "$REPORT_FILE"\n    \n    # Largest directories\n    echo "Largest directories in /:" | tee -a "$REPORT_FILE"\n    du -sh /* 2>/dev/null | sort -hr | head -5 | tee -a "$REPORT_FILE"\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_network_usage() {\n    log_section "Network Usage Analysis"\n    \n    # Network interfaces\n    echo "Network interfaces:" | tee -a "$REPORT_FILE"\n    ip addr show | grep -E \'^[0-9]+:|inet \' | tee -a "$REPORT_FILE"\n    \n    # Network connections\n    echo "Active network connections:" | tee -a "$REPORT_FILE"\n    ss -tuln | head -10 | tee -a "$REPORT_FILE"\n    \n    # Network statistics\n    echo "Network interface statistics:" | tee -a "$REPORT_FILE"\n    cat /proc/net/dev | head -3 | tee -a "$REPORT_FILE"\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_system_services() {\n    log_section "System Services Status"\n    \n    # Critical services to check\n    services=("ssh" "apache2" "nginx" "mysql" "postgresql" "fail2ban")\n    \n    for service in "${services[@]}"; do\n        if systemctl is-active --quiet "$service" 2>/dev/null; then\n            echo "\u2713 $service is running" | tee -a "$REPORT_FILE"\n        elif systemctl list-unit-files | grep -q "^$service"; then\n            echo "\u2717 $service is installed but not running" | tee -a "$REPORT_FILE"\n        fi\n    done\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ncheck_log_files() {\n    log_section "Log File Analysis"\n    \n    # Check log file sizes\n    echo "Large log files (>100MB):" | tee -a "$REPORT_FILE"\n    find /var/log -type f -size +100M -exec ls -lh {} \\; 2>/dev/null | tee -a "$REPORT_FILE"\n    \n    # Recent errors\n    echo "Recent system errors:" | tee -a "$REPORT_FILE"\n    journalctl --since "1 hour ago" --priority=err --no-pager | tail -10 | tee -a "$REPORT_FILE"\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\ngenerate_summary() {\n    log_section "Performance Summary"\n    \n    # System uptime\n    echo "System uptime: $(uptime -p)" | tee -a "$REPORT_FILE"\n    \n    # System load\n    echo "System load: $(uptime | awk -F\'load average:\' \'{print $2}\')" | tee -a "$REPORT_FILE"\n    \n    # Memory summary\n    echo "Memory: $(free -h | awk \'NR==2{print $3 "/" $2 " (" int($3*100/$2) "%)"}\')" | tee -a "$REPORT_FILE"\n    \n    # Disk summary\n    echo "Root disk: $(df -h / | awk \'NR==2{print $3 "/" $2 " (" $5 ")"}\')" | tee -a "$REPORT_FILE"\n    \n    # Recommendations\n    echo "" | tee -a "$REPORT_FILE"\n    echo "Recommendations:" | tee -a "$REPORT_FILE"\n    \n    # CPU recommendations\n    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk \'{print $2}\' | sed \'s/%us,//\' | cut -d\'.\' -f1)\n    if [ "$cpu_usage" -gt 80 ]; then\n        echo "- Consider optimizing CPU-intensive processes" | tee -a "$REPORT_FILE"\n    fi\n    \n    # Memory recommendations\n    memory_usage=$(free | awk \'NR==2{printf "%.0f", $3*100/$2}\')\n    if [ "$memory_usage" -gt 80 ]; then\n        echo "- Consider adding more RAM or optimizing memory usage" | tee -a "$REPORT_FILE"\n    fi\n    \n    # Disk recommendations\n    df -h | awk \'NR>1 {\n        usage = substr($5, 1, length($5)-1)\n        if (usage > 85) \n            print "- Clean up disk space on " $6\n    }\' | tee -a "$REPORT_FILE"\n    \n    echo "" | tee -a "$REPORT_FILE"\n}\n\n# Main execution\nmain() {\n    echo "Starting comprehensive performance analysis..."\n    echo "Report will be saved to: $REPORT_FILE"\n    echo ""\n    \n    check_cpu_usage\n    check_memory_usage\n    check_disk_usage\n    check_network_usage\n    check_system_services\n    check_log_files\n    generate_summary\n    \n    echo "Performance analysis completed!"\n    echo "Report saved to: $REPORT_FILE"\n    \n    # Display summary\n    echo ""\n    echo "=== Quick Summary ==="\n    tail -20 "$REPORT_FILE"\n}\n\n# Check if running with specific checks\ncase "${1:-all}" in\n    cpu)\n        check_cpu_usage\n        ;;\n    memory)\n        check_memory_usage\n        ;;\n    disk)\n        check_disk_usage\n        ;;\n    network)\n        check_network_usage\n        ;;\n    services)\n        check_system_services\n        ;;\n    logs)\n        check_log_files\n        ;;\n    all)\n        main\n        ;;\n    *)\n        echo "Usage: $0 [cpu|memory|disk|network|services|logs|all]"\n        exit 1\n        ;;\nesac\n'})}),"\n",(0,t.jsx)(n.h2,{id:"free-learning-resources",children:"Free Learning Resources"}),"\n",(0,t.jsx)(n.h3,{id:"web-server-resources",children:"Web Server Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://httpd.apache.org/docs/",children:"Apache HTTP Server Documentation"})," - Official Apache documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://nginx.org/en/docs/",children:"Nginx Documentation"})," - Official Nginx documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://letsencrypt.org/docs/",children:"Let's Encrypt Documentation"})," - SSL certificate automation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"database-resources",children:"Database Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://dev.mysql.com/doc/",children:"MySQL Documentation"})," - Official MySQL documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.postgresql.org/docs/",children:"PostgreSQL Documentation"})," - Official PostgreSQL documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://mariadb.com/kb/en/",children:"MariaDB Knowledge Base"})," - MariaDB documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"http://www.brendangregg.com/linuxperf.html",children:"Linux Performance"})," - Brendan Gregg's performance tools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/",children:"System Performance Tuning"})," - Red Hat guide"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://ubuntu.com/server/docs/performance-tuning",children:"Ubuntu Server Performance"})," - Ubuntu performance guide"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"practice-labs",children:"Practice Labs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.virtualbox.org/",children:"VirtualBox"})," - Create test environments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.vagrantup.com/",children:"Vagrant"})," - Automated VM provisioning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"})," - Containerized applications"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After mastering server management and performance:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Practice Regularly"}),": Set up test environments with multiple services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Learn Automation"}),": Explore configuration management tools (Ansible, Puppet)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Study Containerization"}),": Docker and Kubernetes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Explore Monitoring"}),": Prometheus, Grafana, ELK stack"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Join Communities"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.reddit.com/r/sysadmin/",children:"r/sysadmin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://serverfault.com/",children:"Server Fault"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You've completed the comprehensive Linux Engineering learning path. You now have the skills to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Navigate and manage Linux systems effectively"}),"\n",(0,t.jsx)(n.li,{children:"Administer users, processes, and services"}),"\n",(0,t.jsx)(n.li,{children:"Write automation scripts"}),"\n",(0,t.jsx)(n.li,{children:"Configure networking and security"}),"\n",(0,t.jsx)(n.li,{children:"Manage web servers and databases"}),"\n",(0,t.jsx)(n.li,{children:"Monitor and optimize system performance"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Continue practicing these skills and consider specializing in areas like cloud infrastructure, DevOps, or cybersecurity!"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var a=s(6540);const t={},r=a.createContext(t);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);