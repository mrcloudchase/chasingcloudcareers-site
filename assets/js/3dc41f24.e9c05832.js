"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[6672],{5661:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"cloud-engineering/infrastructure-as-code","title":"Infrastructure as Code (IaC)","description":"Master the practice of managing and provisioning infrastructure through code rather than manual processes, using tools like Terraform, AWS CloudFormation, and Ansible.","source":"@site/docs/cloud-engineering/03-infrastructure-as-code.md","sourceDirName":"cloud-engineering","slug":"/cloud-engineering/infrastructure-as-code","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/infrastructure-as-code","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/cloud-engineering/03-infrastructure-as-code.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Major Cloud Providers Deep Dive","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/aws-deep-dive"},"next":{"title":"Container Orchestration","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/container-orchestration"}}');var r=a(4848),s=a(8453);const i={sidebar_position:4},o="Infrastructure as Code (IaC)",l={},c=[{value:"What is Infrastructure as Code?",id:"what-is-infrastructure-as-code",level:2},{value:"Benefits of Infrastructure as Code",id:"benefits-of-infrastructure-as-code",level:3},{value:"IaC Tools Comparison",id:"iac-tools-comparison",level:3},{value:"Terraform Fundamentals",id:"terraform-fundamentals",level:2},{value:"Installing Terraform",id:"installing-terraform",level:3},{value:"Terraform Basics",id:"terraform-basics",level:3},{value:"Your First Terraform Configuration",id:"your-first-terraform-configuration",level:3},{value:"Terraform State Management",id:"terraform-state-management",level:3},{value:"Terraform Variables and Outputs",id:"terraform-variables-and-outputs",level:3},{value:"Terraform Modules",id:"terraform-modules",level:3},{value:"AWS CloudFormation",id:"aws-cloudformation",level:2},{value:"CloudFormation Basics",id:"cloudformation-basics",level:3},{value:"Simple CloudFormation Template",id:"simple-cloudformation-template",level:3},{value:"CloudFormation Nested Stacks",id:"cloudformation-nested-stacks",level:3},{value:"Configuration Management with Ansible",id:"configuration-management-with-ansible",level:2},{value:"Installing Ansible",id:"installing-ansible",level:3},{value:"Ansible Basics",id:"ansible-basics",level:3},{value:"Ansible for AWS Provisioning",id:"ansible-for-aws-provisioning",level:3},{value:"Practical IaC Projects",id:"practical-iac-projects",level:2},{value:"Project 1: Multi-Tier Web Application with Terraform",id:"project-1-multi-tier-web-application-with-terraform",level:3},{value:"Project 2: GitOps Pipeline with Terraform Cloud",id:"project-2-gitops-pipeline-with-terraform-cloud",level:3},{value:"IaC Best Practices",id:"iac-best-practices",level:2},{value:"Security Best Practices",id:"security-best-practices",level:3},{value:"Code Organization",id:"code-organization",level:3},{value:"Testing and Validation",id:"testing-and-validation",level:3},{value:"Free Learning Resources",id:"free-learning-resources",level:2},{value:"Terraform Resources",id:"terraform-resources",level:3},{value:"AWS CloudFormation Resources",id:"aws-cloudformation-resources",level:3},{value:"Ansible Resources",id:"ansible-resources",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"infrastructure-as-code-iac",children:"Infrastructure as Code (IaC)"})}),"\n",(0,r.jsx)(e.p,{children:"Master the practice of managing and provisioning infrastructure through code rather than manual processes, using tools like Terraform, AWS CloudFormation, and Ansible."}),"\n",(0,r.jsx)(e.h2,{id:"what-is-infrastructure-as-code",children:"What is Infrastructure as Code?"}),"\n",(0,r.jsx)(e.p,{children:"Infrastructure as Code (IaC) is the practice of managing and provisioning computing infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools."}),"\n",(0,r.jsx)(e.h3,{id:"benefits-of-infrastructure-as-code",children:"Benefits of Infrastructure as Code"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Consistency and Repeatability:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Manual process (error-prone):\n1. Log into AWS Console\n2. Click through UI to create resources\n3. Hope you remember all settings\n4. Repeat for different environments\n\n# IaC process (reliable):\n1. Write infrastructure definition once\n2. Deploy to dev, staging, production\n3. Same configuration every time\n4. Version controlled and reviewable\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Version Control:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Infrastructure changes tracked in Git"}),"\n",(0,r.jsx)(e.li,{children:"Rollback to previous versions"}),"\n",(0,r.jsx)(e.li,{children:"Collaboration through pull requests"}),"\n",(0,r.jsx)(e.li,{children:"Audit trail of all changes"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Speed and Efficiency:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Provision entire environments in minutes"}),"\n",(0,r.jsx)(e.li,{children:"Automate repetitive tasks"}),"\n",(0,r.jsx)(e.li,{children:"Reduce human error"}),"\n",(0,r.jsx)(e.li,{children:"Enable self-service infrastructure"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Cost Management:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Easily tear down unused environments"}),"\n",(0,r.jsx)(e.li,{children:"Standardize resource configurations"}),"\n",(0,r.jsx)(e.li,{children:"Prevent configuration drift"}),"\n",(0,r.jsx)(e.li,{children:"Optimize resource usage"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"iac-tools-comparison",children:"IaC Tools Comparison"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Terraform (HashiCorp):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pros:\n- Multi-cloud support (AWS, Azure, GCP, etc.)\n- Large ecosystem of providers\n- Declarative syntax (HCL)\n- Strong state management\n- Plan before apply\n\n# Cons:\n- Learning curve for HCL\n- State file management complexity\n- Not cloud-native\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AWS CloudFormation:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pros:\n- Native AWS integration\n- No additional tools needed\n- Rollback capabilities\n- Stack dependencies\n- Free to use\n\n# Cons:\n- AWS-only\n- JSON/YAML can be verbose\n- Limited programming constructs\n- Slower than Terraform\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Google Cloud Deployment Manager:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pros:\n- Native GCP integration\n- Python and Jinja2 templates\n- Built-in validation\n- Preview mode\n\n# Cons:\n- GCP-only\n- Less mature than CloudFormation\n- Limited community resources\n- Complex template syntax\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Azure Resource Manager (ARM) Templates:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pros:\n- Native Azure integration\n- Declarative JSON syntax\n- Built-in validation\n- Incremental deployments\n\n# Cons:\n- Azure-only\n- Complex JSON syntax\n- Limited reusability\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Ansible:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pros:\n- Agentless\n- Simple YAML syntax\n- Configuration management + provisioning\n- Large module library\n\n# Cons:\n- Procedural (not declarative)\n- No built-in state management\n- Can be slow for large infrastructures\n"})}),"\n",(0,r.jsx)(e.h2,{id:"terraform-fundamentals",children:"Terraform Fundamentals"}),"\n",(0,r.jsx)(e.p,{children:"Terraform is the most popular multi-cloud IaC tool, using HashiCorp Configuration Language (HCL)."}),"\n",(0,r.jsx)(e.h3,{id:"installing-terraform",children:"Installing Terraform"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Linux/macOS:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Download Terraform\nwget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip\n\n# Extract and install\nunzip terraform_1.6.0_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\n\n# Verify installation\nterraform version\n\n# Enable tab completion\nterraform -install-autocomplete\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Using Package Managers:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Ubuntu/Debian\ncurl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\nsudo apt-get update && sudo apt-get install terraform\n\n# macOS (Homebrew)\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n\n# Windows (Chocolatey)\nchoco install terraform\n'})}),"\n",(0,r.jsx)(e.h3,{id:"terraform-basics",children:"Terraform Basics"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Core Concepts:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Provider: Plugin that interacts with APIs (AWS, Azure, GCP)\n# Resource: Infrastructure component (EC2 instance, S3 bucket)\n# Data Source: Read-only information from provider\n# Variable: Input parameters\n# Output: Return values\n# Module: Reusable Terraform configuration\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Basic Terraform Workflow:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"terraform init     # Initialize working directory\nterraform plan     # Preview changes\nterraform apply    # Apply changes\nterraform destroy  # Destroy infrastructure\n"})}),"\n",(0,r.jsx)(e.h3,{id:"your-first-terraform-configuration",children:"Your First Terraform Configuration"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"main.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# Configure the AWS Provider\nterraform {\n  required_version = ">= 1.0"\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0"\n    }\n  }\n}\n\nprovider "aws" {\n  region = var.aws_region\n}\n\n# Variables\nvariable "aws_region" {\n  description = "AWS region"\n  type        = string\n  default     = "us-east-1"\n}\n\nvariable "instance_type" {\n  description = "EC2 instance type"\n  type        = string\n  default     = "t3.micro"\n}\n\n# Data source to get latest Amazon Linux AMI\ndata "aws_ami" "amazon_linux" {\n  most_recent = true\n  owners      = ["amazon"]\n\n  filter {\n    name   = "name"\n    values = ["amzn2-ami-hvm-*-x86_64-gp2"]\n  }\n}\n\n# Create VPC\nresource "aws_vpc" "main" {\n  cidr_block           = "10.0.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = "terraform-vpc"\n  }\n}\n\n# Create Internet Gateway\nresource "aws_internet_gateway" "main" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = "terraform-igw"\n  }\n}\n\n# Create public subnet\nresource "aws_subnet" "public" {\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = "10.0.1.0/24"\n  availability_zone       = data.aws_availability_zones.available.names[0]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = "terraform-public-subnet"\n  }\n}\n\n# Get available AZs\ndata "aws_availability_zones" "available" {\n  state = "available"\n}\n\n# Create route table\nresource "aws_route_table" "public" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = "0.0.0.0/0"\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name = "terraform-public-rt"\n  }\n}\n\n# Associate route table with subnet\nresource "aws_route_table_association" "public" {\n  subnet_id      = aws_subnet.public.id\n  route_table_id = aws_route_table.public.id\n}\n\n# Create security group\nresource "aws_security_group" "web" {\n  name_prefix = "terraform-web-"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]  # Restrict this in production\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  tags = {\n    Name = "terraform-web-sg"\n  }\n}\n\n# Create EC2 instance\nresource "aws_instance" "web" {\n  ami                    = data.aws_ami.amazon_linux.id\n  instance_type          = var.instance_type\n  subnet_id              = aws_subnet.public.id\n  vpc_security_group_ids = [aws_security_group.web.id]\n\n  user_data = <<-EOF\n              #!/bin/bash\n              yum update -y\n              yum install -y httpd\n              systemctl start httpd\n              systemctl enable httpd\n              echo "<h1>Hello from Terraform!</h1>" > /var/www/html/index.html\n              echo "<p>Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id)</p>" >> /var/www/html/index.html\n              EOF\n\n  tags = {\n    Name = "terraform-web-server"\n  }\n}\n\n# Outputs\noutput "vpc_id" {\n  description = "ID of the VPC"\n  value       = aws_vpc.main.id\n}\n\noutput "public_ip" {\n  description = "Public IP address of the web server"\n  value       = aws_instance.web.public_ip\n}\n\noutput "website_url" {\n  description = "URL of the website"\n  value       = "http://${aws_instance.web.public_ip}"\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Deploy the Infrastructure:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan\n\n# Apply changes\nterraform apply\n\n# View outputs\nterraform output\n\n# Access website\ncurl http://$(terraform output -raw public_ip)\n\n# Destroy infrastructure when done\nterraform destroy\n"})}),"\n",(0,r.jsx)(e.h3,{id:"terraform-state-management",children:"Terraform State Management"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Understanding State:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Terraform state tracks resource mappings\n# Stored in terraform.tfstate file by default\n# Contains sensitive information\n# Should be stored remotely for teams\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Remote State with S3:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# backend.tf\nterraform {\n  backend "s3" {\n    bucket         = "my-terraform-state-bucket"\n    key            = "infrastructure/terraform.tfstate"\n    region         = "us-east-1"\n    encrypt        = true\n    dynamodb_table = "terraform-state-lock"\n  }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Create S3 Backend Resources:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Create S3 bucket for state\naws s3 mb s3://my-terraform-state-bucket-12345\n\n# Enable versioning\naws s3api put-bucket-versioning \\\n    --bucket my-terraform-state-bucket-12345 \\\n    --versioning-configuration Status=Enabled\n\n# Create DynamoDB table for state locking\naws dynamodb create-table \\\n    --table-name terraform-state-lock \\\n    --attribute-definitions AttributeName=LockID,AttributeType=S \\\n    --key-schema AttributeName=LockID,KeyType=HASH \\\n    --billing-mode PAY_PER_REQUEST\n"})}),"\n",(0,r.jsx)(e.h3,{id:"terraform-variables-and-outputs",children:"Terraform Variables and Outputs"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"variables.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'variable "environment" {\n  description = "Environment name"\n  type        = string\n  default     = "dev"\n}\n\nvariable "instance_count" {\n  description = "Number of instances to create"\n  type        = number\n  default     = 1\n}\n\nvariable "allowed_cidr_blocks" {\n  description = "CIDR blocks allowed to access the instance"\n  type        = list(string)\n  default     = ["0.0.0.0/0"]\n}\n\nvariable "instance_tags" {\n  description = "Tags to apply to instances"\n  type        = map(string)\n  default = {\n    Environment = "dev"\n    Project     = "terraform-demo"\n  }\n}\n\nvariable "enable_monitoring" {\n  description = "Enable detailed monitoring"\n  type        = bool\n  default     = false\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"terraform.tfvars:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'environment    = "production"\ninstance_count = 3\nallowed_cidr_blocks = [\n  "10.0.0.0/8",\n  "172.16.0.0/12"\n]\ninstance_tags = {\n  Environment = "production"\n  Project     = "web-app"\n  Owner       = "devops-team"\n}\nenable_monitoring = true\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"outputs.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'output "instance_ids" {\n  description = "IDs of the EC2 instances"\n  value       = aws_instance.web[*].id\n}\n\noutput "instance_public_ips" {\n  description = "Public IP addresses of the EC2 instances"\n  value       = aws_instance.web[*].public_ip\n}\n\noutput "load_balancer_dns" {\n  description = "DNS name of the load balancer"\n  value       = aws_lb.main.dns_name\n}\n\noutput "database_endpoint" {\n  description = "RDS instance endpoint"\n  value       = aws_db_instance.main.endpoint\n  sensitive   = true  # Mark sensitive outputs\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"terraform-modules",children:"Terraform Modules"}),"\n",(0,r.jsx)(e.p,{children:"Modules are reusable Terraform configurations that encapsulate related resources."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Module Structure:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"modules/\n\u2514\u2500\u2500 vpc/\n    \u251c\u2500\u2500 main.tf\n    \u251c\u2500\u2500 variables.tf\n    \u251c\u2500\u2500 outputs.tf\n    \u2514\u2500\u2500 README.md\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"modules/vpc/main.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# VPC Module\nresource "aws_vpc" "main" {\n  cidr_block           = var.cidr_block\n  enable_dns_hostnames = var.enable_dns_hostnames\n  enable_dns_support   = var.enable_dns_support\n\n  tags = merge(\n    var.tags,\n    {\n      Name = var.name\n    }\n  )\n}\n\nresource "aws_internet_gateway" "main" {\n  count  = var.create_igw ? 1 : 0\n  vpc_id = aws_vpc.main.id\n\n  tags = merge(\n    var.tags,\n    {\n      Name = "${var.name}-igw"\n    }\n  )\n}\n\nresource "aws_subnet" "public" {\n  count = length(var.public_subnet_cidrs)\n\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = var.public_subnet_cidrs[count.index]\n  availability_zone       = var.availability_zones[count.index]\n  map_public_ip_on_launch = true\n\n  tags = merge(\n    var.tags,\n    {\n      Name = "${var.name}-public-${count.index + 1}"\n      Type = "public"\n    }\n  )\n}\n\nresource "aws_subnet" "private" {\n  count = length(var.private_subnet_cidrs)\n\n  vpc_id            = aws_vpc.main.id\n  cidr_block        = var.private_subnet_cidrs[count.index]\n  availability_zone = var.availability_zones[count.index]\n\n  tags = merge(\n    var.tags,\n    {\n      Name = "${var.name}-private-${count.index + 1}"\n      Type = "private"\n    }\n  )\n}\n\n# Route table for public subnets\nresource "aws_route_table" "public" {\n  count  = var.create_igw ? 1 : 0\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = "0.0.0.0/0"\n    gateway_id = aws_internet_gateway.main[0].id\n  }\n\n  tags = merge(\n    var.tags,\n    {\n      Name = "${var.name}-public-rt"\n    }\n  )\n}\n\nresource "aws_route_table_association" "public" {\n  count = length(aws_subnet.public)\n\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public[0].id\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"modules/vpc/variables.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'variable "name" {\n  description = "Name prefix for resources"\n  type        = string\n}\n\nvariable "cidr_block" {\n  description = "CIDR block for VPC"\n  type        = string\n  default     = "10.0.0.0/16"\n}\n\nvariable "public_subnet_cidrs" {\n  description = "CIDR blocks for public subnets"\n  type        = list(string)\n  default     = ["10.0.1.0/24", "10.0.2.0/24"]\n}\n\nvariable "private_subnet_cidrs" {\n  description = "CIDR blocks for private subnets"\n  type        = list(string)\n  default     = ["10.0.3.0/24", "10.0.4.0/24"]\n}\n\nvariable "availability_zones" {\n  description = "Availability zones"\n  type        = list(string)\n}\n\nvariable "enable_dns_hostnames" {\n  description = "Enable DNS hostnames in VPC"\n  type        = bool\n  default     = true\n}\n\nvariable "enable_dns_support" {\n  description = "Enable DNS support in VPC"\n  type        = bool\n  default     = true\n}\n\nvariable "create_igw" {\n  description = "Create Internet Gateway"\n  type        = bool\n  default     = true\n}\n\nvariable "tags" {\n  description = "Tags to apply to resources"\n  type        = map(string)\n  default     = {}\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"modules/vpc/outputs.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'output "vpc_id" {\n  description = "ID of the VPC"\n  value       = aws_vpc.main.id\n}\n\noutput "vpc_cidr_block" {\n  description = "CIDR block of the VPC"\n  value       = aws_vpc.main.cidr_block\n}\n\noutput "public_subnet_ids" {\n  description = "IDs of the public subnets"\n  value       = aws_subnet.public[*].id\n}\n\noutput "private_subnet_ids" {\n  description = "IDs of the private subnets"\n  value       = aws_subnet.private[*].id\n}\n\noutput "internet_gateway_id" {\n  description = "ID of the Internet Gateway"\n  value       = var.create_igw ? aws_internet_gateway.main[0].id : null\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Using the Module:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# main.tf\nmodule "vpc" {\n  source = "./modules/vpc"\n\n  name               = "my-app"\n  cidr_block         = "10.0.0.0/16"\n  availability_zones = ["us-east-1a", "us-east-1b"]\n  \n  public_subnet_cidrs  = ["10.0.1.0/24", "10.0.2.0/24"]\n  private_subnet_cidrs = ["10.0.3.0/24", "10.0.4.0/24"]\n\n  tags = {\n    Environment = "production"\n    Project     = "web-app"\n  }\n}\n\n# Use module outputs\nresource "aws_instance" "web" {\n  ami           = data.aws_ami.amazon_linux.id\n  instance_type = "t3.micro"\n  subnet_id     = module.vpc.public_subnet_ids[0]\n\n  tags = {\n    Name = "web-server"\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"aws-cloudformation",children:"AWS CloudFormation"}),"\n",(0,r.jsx)(e.p,{children:"CloudFormation is AWS's native Infrastructure as Code service using JSON or YAML templates."}),"\n",(0,r.jsx)(e.h3,{id:"cloudformation-basics",children:"CloudFormation Basics"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Template Structure:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Description of the template'\n\nParameters:\n  # Input parameters\n\nMappings:\n  # Static lookup tables\n\nConditions:\n  # Conditional resource creation\n\nResources:\n  # AWS resources to create\n\nOutputs:\n  # Return values\n"})}),"\n",(0,r.jsx)(e.h3,{id:"simple-cloudformation-template",children:"Simple CloudFormation Template"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"vpc-template.yaml:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'VPC with public and private subnets'\n\nParameters:\n  EnvironmentName:\n    Description: Environment name prefix\n    Type: String\n    Default: MyEnvironment\n\n  VpcCIDR:\n    Description: CIDR block for VPC\n    Type: String\n    Default: 10.0.0.0/16\n\n  PublicSubnetCIDR:\n    Description: CIDR block for public subnet\n    Type: String\n    Default: 10.0.1.0/24\n\n  PrivateSubnetCIDR:\n    Description: CIDR block for private subnet\n    Type: String\n    Default: 10.0.2.0/24\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCIDR\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-VPC\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-IGW\n\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicSubnet:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [0, !GetAZs '']\n      CidrBlock: !Ref PublicSubnetCIDR\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-Public-Subnet\n\n  PrivateSubnet:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [1, !GetAZs '']\n      CidrBlock: !Ref PrivateSubnetCIDR\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-Private-Subnet\n\n  NatGatewayEIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n\n  NatGateway:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGatewayEIP.AllocationId\n      SubnetId: !Ref PublicSubnet\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-NAT-Gateway\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-Public-Routes\n\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnetRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet\n\n  PrivateRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName}-Private-Routes\n\n  DefaultPrivateRoute:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway\n\n  PrivateSubnetRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable\n      SubnetId: !Ref PrivateSubnet\n\nOutputs:\n  VPC:\n    Description: VPC ID\n    Value: !Ref VPC\n    Export:\n      Name: !Sub ${EnvironmentName}-VPCID\n\n  PublicSubnet:\n    Description: Public subnet ID\n    Value: !Ref PublicSubnet\n    Export:\n      Name: !Sub ${EnvironmentName}-PUB-SN\n\n  PrivateSubnet:\n    Description: Private subnet ID\n    Value: !Ref PrivateSubnet\n    Export:\n      Name: !Sub ${EnvironmentName}-PRI-SN\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Deploy CloudFormation Stack:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Create stack\naws cloudformation create-stack \\\n    --stack-name my-vpc-stack \\\n    --template-body file://vpc-template.yaml \\\n    --parameters ParameterKey=EnvironmentName,ParameterValue=Production\n\n# Check stack status\naws cloudformation describe-stacks \\\n    --stack-name my-vpc-stack \\\n    --query 'Stacks[0].StackStatus'\n\n# List stack resources\naws cloudformation list-stack-resources \\\n    --stack-name my-vpc-stack\n\n# Get stack outputs\naws cloudformation describe-stacks \\\n    --stack-name my-vpc-stack \\\n    --query 'Stacks[0].Outputs'\n\n# Update stack\naws cloudformation update-stack \\\n    --stack-name my-vpc-stack \\\n    --template-body file://vpc-template-updated.yaml\n\n# Delete stack\naws cloudformation delete-stack \\\n    --stack-name my-vpc-stack\n"})}),"\n",(0,r.jsx)(e.h3,{id:"cloudformation-nested-stacks",children:"CloudFormation Nested Stacks"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"master-template.yaml:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Master template for web application infrastructure'\n\nParameters:\n  EnvironmentName:\n    Type: String\n    Default: WebApp\n\nResources:\n  NetworkStack:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/my-templates/vpc-template.yaml\n      Parameters:\n        EnvironmentName: !Ref EnvironmentName\n\n  SecurityStack:\n    Type: AWS::CloudFormation::Stack\n    DependsOn: NetworkStack\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/my-templates/security-template.yaml\n      Parameters:\n        EnvironmentName: !Ref EnvironmentName\n        VPC: !GetAtt NetworkStack.Outputs.VPC\n\n  ApplicationStack:\n    Type: AWS::CloudFormation::Stack\n    DependsOn: [NetworkStack, SecurityStack]\n    Properties:\n      TemplateURL: https://s3.amazonaws.com/my-templates/application-template.yaml\n      Parameters:\n        EnvironmentName: !Ref EnvironmentName\n        VPC: !GetAtt NetworkStack.Outputs.VPC\n        PublicSubnet: !GetAtt NetworkStack.Outputs.PublicSubnet\n        SecurityGroup: !GetAtt SecurityStack.Outputs.WebSecurityGroup\n"})}),"\n",(0,r.jsx)(e.h2,{id:"configuration-management-with-ansible",children:"Configuration Management with Ansible"}),"\n",(0,r.jsx)(e.p,{children:"Ansible is an agentless automation tool that can provision infrastructure and configure systems."}),"\n",(0,r.jsx)(e.h3,{id:"installing-ansible",children:"Installing Ansible"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt update\nsudo apt install ansible\n\n# CentOS/RHEL\nsudo yum install epel-release\nsudo yum install ansible\n\n# macOS\nbrew install ansible\n\n# Python pip\npip install ansible\n\n# Verify installation\nansible --version\n"})}),"\n",(0,r.jsx)(e.h3,{id:"ansible-basics",children:"Ansible Basics"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Inventory File (hosts.ini):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ini",children:"[webservers]\nweb1 ansible_host=10.0.1.10 ansible_user=ec2-user\nweb2 ansible_host=10.0.1.11 ansible_user=ec2-user\n\n[databases]\ndb1 ansible_host=10.0.2.10 ansible_user=ec2-user\n\n[all:vars]\nansible_ssh_private_key_file=~/.ssh/my-key.pem\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Simple Playbook (webserver.yml):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"---\n- name: Configure web servers\n  hosts: webservers\n  become: yes\n  vars:\n    http_port: 80\n    max_clients: 200\n\n  tasks:\n    - name: Install Apache\n      yum:\n        name: httpd\n        state: present\n\n    - name: Start and enable Apache\n      systemd:\n        name: httpd\n        state: started\n        enabled: yes\n\n    - name: Create index.html\n      template:\n        src: index.html.j2\n        dest: /var/www/html/index.html\n        owner: apache\n        group: apache\n        mode: '0644'\n      notify: restart apache\n\n    - name: Configure firewall\n      firewalld:\n        port: \"{{ http_port }}/tcp\"\n        permanent: yes\n        state: enabled\n        immediate: yes\n\n  handlers:\n    - name: restart apache\n      systemd:\n        name: httpd\n        state: restarted\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Template (templates/index.html.j2):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:"<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ ansible_hostname }}</title>\n</head>\n<body>\n    <h1>Welcome to {{ ansible_hostname }}</h1>\n    <p>Server IP: {{ ansible_default_ipv4.address }}</p>\n    <p>OS: {{ ansible_distribution }} {{ ansible_distribution_version }}</p>\n    <p>Configured by Ansible on {{ ansible_date_time.date }}</p>\n</body>\n</html>\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Run Playbook:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Check syntax\nansible-playbook --syntax-check webserver.yml\n\n# Dry run\nansible-playbook --check webserver.yml\n\n# Run playbook\nansible-playbook -i hosts.ini webserver.yml\n\n# Run with verbose output\nansible-playbook -i hosts.ini webserver.yml -v\n"})}),"\n",(0,r.jsx)(e.h3,{id:"ansible-for-aws-provisioning",children:"Ansible for AWS Provisioning"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"AWS EC2 Provisioning Playbook:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'---\n- name: Provision AWS infrastructure\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    region: us-east-1\n    instance_type: t3.micro\n    ami_id: ami-0abcdef1234567890\n    key_name: my-key-pair\n\n  tasks:\n    - name: Create VPC\n      amazon.aws.ec2_vpc_net:\n        name: ansible-vpc\n        cidr_block: 10.0.0.0/16\n        region: "{{ region }}"\n        state: present\n        tags:\n          Environment: Development\n      register: vpc\n\n    - name: Create public subnet\n      amazon.aws.ec2_vpc_subnet:\n        vpc_id: "{{ vpc.vpc.id }}"\n        cidr: 10.0.1.0/24\n        region: "{{ region }}"\n        az: "{{ region }}a"\n        map_public: yes\n        state: present\n        tags:\n          Name: Public Subnet\n      register: public_subnet\n\n    - name: Create Internet Gateway\n      amazon.aws.ec2_vpc_igw:\n        vpc_id: "{{ vpc.vpc.id }}"\n        region: "{{ region }}"\n        state: present\n        tags:\n          Name: ansible-igw\n      register: igw\n\n    - name: Create security group\n      amazon.aws.ec2_group:\n        name: web-sg\n        description: Security group for web servers\n        vpc_id: "{{ vpc.vpc.id }}"\n        region: "{{ region }}"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n          - proto: tcp\n            ports:\n              - 22\n            cidr_ip: 0.0.0.0/0\n        tags:\n          Name: web-security-group\n      register: security_group\n\n    - name: Launch EC2 instances\n      amazon.aws.ec2_instance:\n        name: "web-server-{{ item }}"\n        image_id: "{{ ami_id }}"\n        instance_type: "{{ instance_type }}"\n        key_name: "{{ key_name }}"\n        vpc_subnet_id: "{{ public_subnet.subnet.id }}"\n        security_groups:\n          - "{{ security_group.group_id }}"\n        region: "{{ region }}"\n        state: present\n        wait: yes\n        tags:\n          Environment: Development\n          Role: WebServer\n      loop: [1, 2]\n      register: ec2_instances\n\n    - name: Display instance information\n      debug:\n        msg: "Instance {{ item.instances[0].tags.Name }} has IP {{ item.instances[0].public_ip_address }}"\n      loop: "{{ ec2_instances.results }}"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"practical-iac-projects",children:"Practical IaC Projects"}),"\n",(0,r.jsx)(e.h3,{id:"project-1-multi-tier-web-application-with-terraform",children:"Project 1: Multi-Tier Web Application with Terraform"}),"\n",(0,r.jsx)(e.p,{children:"Create a complete web application infrastructure with load balancer, auto scaling, and RDS database."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Directory Structure:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"terraform-webapp/\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 variables.tf\n\u251c\u2500\u2500 outputs.tf\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 networking/\n\u2502   \u251c\u2500\u2500 security/\n\u2502   \u251c\u2500\u2500 compute/\n\u2502   \u2514\u2500\u2500 database/\n\u2514\u2500\u2500 environments/\n    \u251c\u2500\u2500 dev/\n    \u251c\u2500\u2500 staging/\n    \u2514\u2500\u2500 prod/\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"main.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'terraform {\n  required_version = ">= 1.0"\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0"\n    }\n  }\n}\n\nprovider "aws" {\n  region = var.aws_region\n}\n\n# Data sources\ndata "aws_availability_zones" "available" {\n  state = "available"\n}\n\n# Networking module\nmodule "networking" {\n  source = "./modules/networking"\n\n  environment        = var.environment\n  vpc_cidr          = var.vpc_cidr\n  availability_zones = slice(data.aws_availability_zones.available.names, 0, 2)\n  \n  tags = var.common_tags\n}\n\n# Security module\nmodule "security" {\n  source = "./modules/security"\n\n  environment = var.environment\n  vpc_id      = module.networking.vpc_id\n  \n  tags = var.common_tags\n}\n\n# Database module\nmodule "database" {\n  source = "./modules/database"\n\n  environment           = var.environment\n  vpc_id               = module.networking.vpc_id\n  private_subnet_ids   = module.networking.private_subnet_ids\n  database_security_group_id = module.security.database_security_group_id\n  \n  db_instance_class    = var.db_instance_class\n  db_name             = var.db_name\n  db_username         = var.db_username\n  db_password         = var.db_password\n  \n  tags = var.common_tags\n}\n\n# Compute module\nmodule "compute" {\n  source = "./modules/compute"\n\n  environment             = var.environment\n  vpc_id                 = module.networking.vpc_id\n  public_subnet_ids      = module.networking.public_subnet_ids\n  private_subnet_ids     = module.networking.private_subnet_ids\n  web_security_group_id  = module.security.web_security_group_id\n  app_security_group_id  = module.security.app_security_group_id\n  \n  instance_type          = var.instance_type\n  min_size              = var.min_size\n  max_size              = var.max_size\n  desired_capacity      = var.desired_capacity\n  \n  database_endpoint     = module.database.database_endpoint\n  \n  tags = var.common_tags\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"modules/compute/main.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# Launch template for web servers\nresource "aws_launch_template" "web" {\n  name_prefix   = "${var.environment}-web-"\n  image_id      = data.aws_ami.amazon_linux.id\n  instance_type = var.instance_type\n  key_name      = var.key_name\n\n  vpc_security_group_ids = [var.web_security_group_id]\n\n  iam_instance_profile {\n    name = aws_iam_instance_profile.web.name\n  }\n\n  user_data = base64encode(templatefile("${path.module}/user_data.sh", {\n    database_endpoint = var.database_endpoint\n  }))\n\n  tag_specifications {\n    resource_type = "instance"\n    tags = merge(var.tags, {\n      Name = "${var.environment}-web-server"\n      Type = "web"\n    })\n  }\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n# Auto Scaling Group\nresource "aws_autoscaling_group" "web" {\n  name                = "${var.environment}-web-asg"\n  vpc_zone_identifier = var.private_subnet_ids\n  target_group_arns   = [aws_lb_target_group.web.arn]\n  health_check_type   = "ELB"\n  health_check_grace_period = 300\n\n  min_size         = var.min_size\n  max_size         = var.max_size\n  desired_capacity = var.desired_capacity\n\n  launch_template {\n    id      = aws_launch_template.web.id\n    version = "$Latest"\n  }\n\n  tag {\n    key                 = "Name"\n    value               = "${var.environment}-web-asg"\n    propagate_at_launch = false\n  }\n\n  dynamic "tag" {\n    for_each = var.tags\n    content {\n      key                 = tag.key\n      value               = tag.value\n      propagate_at_launch = true\n    }\n  }\n}\n\n# Application Load Balancer\nresource "aws_lb" "web" {\n  name               = "${var.environment}-web-alb"\n  internal           = false\n  load_balancer_type = "application"\n  security_groups    = [var.web_security_group_id]\n  subnets            = var.public_subnet_ids\n\n  enable_deletion_protection = false\n\n  tags = merge(var.tags, {\n    Name = "${var.environment}-web-alb"\n  })\n}\n\n# Target Group\nresource "aws_lb_target_group" "web" {\n  name     = "${var.environment}-web-tg"\n  port     = 80\n  protocol = "HTTP"\n  vpc_id   = var.vpc_id\n\n  health_check {\n    enabled             = true\n    healthy_threshold   = 2\n    interval            = 30\n    matcher             = "200"\n    path                = "/health"\n    port                = "traffic-port"\n    protocol            = "HTTP"\n    timeout             = 5\n    unhealthy_threshold = 2\n  }\n\n  tags = merge(var.tags, {\n    Name = "${var.environment}-web-tg"\n  })\n}\n\n# Listener\nresource "aws_lb_listener" "web" {\n  load_balancer_arn = aws_lb.web.arn\n  port              = "80"\n  protocol          = "HTTP"\n\n  default_action {\n    type             = "forward"\n    target_group_arn = aws_lb_target_group.web.arn\n  }\n}\n\n# IAM role for instances\nresource "aws_iam_role" "web" {\n  name = "${var.environment}-web-role"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "ec2.amazonaws.com"\n        }\n      }\n    ]\n  })\n\n  tags = var.tags\n}\n\nresource "aws_iam_instance_profile" "web" {\n  name = "${var.environment}-web-profile"\n  role = aws_iam_role.web.name\n}\n\n# Attach CloudWatch agent policy\nresource "aws_iam_role_policy_attachment" "cloudwatch_agent" {\n  role       = aws_iam_role.web.name\n  policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"\n}\n\n# Data source for AMI\ndata "aws_ami" "amazon_linux" {\n  most_recent = true\n  owners      = ["amazon"]\n\n  filter {\n    name   = "name"\n    values = ["amzn2-ami-hvm-*-x86_64-gp2"]\n  }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"modules/compute/user_data.sh:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\nyum update -y\nyum install -y httpd mysql\n\n# Install CloudWatch agent\nwget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\nrpm -U ./amazon-cloudwatch-agent.rpm\n\n# Start and enable Apache\nsystemctl start httpd\nsystemctl enable httpd\n\n# Create a simple web application\ncat > /var/www/html/index.php << \'EOF\'\n<?php\n$servername = "${database_endpoint}";\n$username = "admin";\n$password = "password";\n$dbname = "webapp";\n\ntry {\n    $pdo = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $db_status = "Connected";\n} catch(PDOException $e) {\n    $db_status = "Connection failed: " . $e->getMessage();\n}\n\n$instance_id = file_get_contents(\'http://169.254.169.254/latest/meta-data/instance-id\');\n$az = file_get_contents(\'http://169.254.169.254/latest/meta-data/placement/availability-zone\');\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Web Application</title>\n</head>\n<body>\n    <h1>Hello from AWS!</h1>\n    <p>Instance ID: <?php echo $instance_id; ?></p>\n    <p>Availability Zone: <?php echo $az; ?></p>\n    <p>Database Status: <?php echo $db_status; ?></p>\n    <p>Timestamp: <?php echo date(\'Y-m-d H:i:s\'); ?></p>\n</body>\n</html>\nEOF\n\n# Create health check endpoint\necho "OK" > /var/www/html/health\n\n# Install PHP\nyum install -y php php-mysql\n\n# Restart Apache\nsystemctl restart httpd\n'})}),"\n",(0,r.jsx)(e.h3,{id:"project-2-gitops-pipeline-with-terraform-cloud",children:"Project 2: GitOps Pipeline with Terraform Cloud"}),"\n",(0,r.jsx)(e.p,{children:"Set up a GitOps workflow using Terraform Cloud for automated infrastructure deployment."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"terraform-cloud-setup.tf:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'terraform {\n  cloud {\n    organization = "my-org"\n    \n    workspaces {\n      name = "production-infrastructure"\n    }\n  }\n}\n\n# Configure workspace variables via Terraform Cloud UI:\n# - AWS_ACCESS_KEY_ID (sensitive)\n# - AWS_SECRET_ACCESS_KEY (sensitive)\n# - TF_VAR_environment = "production"\n# - TF_VAR_db_password (sensitive)\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:".github/workflows/terraform.yml:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"name: 'Terraform'\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  terraform:\n    name: 'Terraform'\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}\n\n    - name: Terraform Format\n      id: fmt\n      run: terraform fmt -check\n      continue-on-error: true\n\n    - name: Terraform Init\n      id: init\n      run: terraform init\n\n    - name: Terraform Validate\n      id: validate\n      run: terraform validate -no-color\n\n    - name: Terraform Plan\n      id: plan\n      if: github.event_name == 'pull_request'\n      run: terraform plan -no-color\n      continue-on-error: true\n\n    - name: Update Pull Request\n      uses: actions/github-script@v6\n      if: github.event_name == 'pull_request'\n      env:\n        PLAN: \"terraform\\n${{ steps.plan.outputs.stdout }}\"\n      with:\n        script: |\n          const output = `#### Terraform Format and Style \ud83d\udd8c\\`${{ steps.fmt.outcome }}\\`\n          #### Terraform Initialization \u2699\ufe0f\\`${{ steps.init.outcome }}\\`\n          #### Terraform Validation \ud83e\udd16\\`${{ steps.validate.outcome }}\\`\n          #### Terraform Plan \ud83d\udcd6\\`${{ steps.plan.outcome }}\\`\n          \n          <details><summary>Show Plan</summary>\n          \n          \\`\\`\\`\\n\n          ${process.env.PLAN}\n          \\`\\`\\`\n          \n          </details>`;\n          \n          github.rest.issues.createComment({\n            issue_number: context.issue.number,\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            body: output\n          })\n\n    - name: Terraform Plan Status\n      if: steps.plan.outcome == 'failure'\n      run: exit 1\n\n    - name: Terraform Apply\n      if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n      run: terraform apply -auto-approve\n"})}),"\n",(0,r.jsx)(e.h2,{id:"iac-best-practices",children:"IaC Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"1. Secrets Management:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Never hardcode secrets in IaC files\n# Use secret management services\n# Rotate secrets regularly\n# Use least privilege access\n\n# Terraform example with AWS Secrets Manager\ndata "aws_secretsmanager_secret_version" "db_password" {\n  secret_id = "prod/database/password"\n}\n\nresource "aws_db_instance" "main" {\n  password = data.aws_secretsmanager_secret_version.db_password.secret_string\n  # ... other configuration\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"2. State File Security:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Use remote state storage\n# Enable encryption at rest\n# Implement state locking\n# Restrict access to state files\n# Regular state backups\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"3. Resource Tagging:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:'# Consistent tagging strategy\nvariable "common_tags" {\n  description = "Common tags for all resources"\n  type        = map(string)\n  default = {\n    Environment   = "production"\n    Project       = "web-app"\n    Owner         = "devops-team"\n    CostCenter    = "engineering"\n    ManagedBy     = "terraform"\n  }\n}\n\n# Apply tags to all resources\nresource "aws_instance" "web" {\n  # ... configuration\n  \n  tags = merge(var.common_tags, {\n    Name = "web-server"\n    Role = "frontend"\n  })\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"code-organization",children:"Code Organization"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"1. Directory Structure:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"project/\n\u251c\u2500\u2500 environments/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 prod/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 networking/\n\u2502   \u251c\u2500\u2500 compute/\n\u2502   \u2514\u2500\u2500 database/\n\u251c\u2500\u2500 scripts/\n\u2514\u2500\u2500 docs/\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"2. Module Design:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Single responsibility principle\n# Reusable and composable\n# Well-documented interfaces\n# Semantic versioning for modules\n# Input validation\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"3. Environment Management:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-hcl",children:"# Use workspace or separate directories\n# Environment-specific variables\n# Consistent naming conventions\n# Separate state files per environment\n"})}),"\n",(0,r.jsx)(e.h3,{id:"testing-and-validation",children:"Testing and Validation"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"1. Static Analysis:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Terraform\nterraform fmt -check\nterraform validate\ntflint\n\n# CloudFormation\ncfn-lint template.yaml\naws cloudformation validate-template --template-body file://template.yaml\n\n# Ansible\nansible-lint playbook.yml\nansible-playbook --syntax-check playbook.yml\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"2. Security Scanning:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Terraform security scanning\ncheckov -f main.tf\nterrascan scan -t aws\n\n# CloudFormation security scanning\ncfn_nag_scan --input-path template.yaml\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"3. Integration Testing:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Terratest for Terraform\n# Kitchen for infrastructure testing\n# Molecule for Ansible testing\n"})}),"\n",(0,r.jsx)(e.h2,{id:"free-learning-resources",children:"Free Learning Resources"}),"\n",(0,r.jsx)(e.h3,{id:"terraform-resources",children:"Terraform Resources"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.terraform.io/docs",children:"Terraform Documentation"})," - Official Terraform documentation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://registry.terraform.io/",children:"Terraform Registry"})," - Modules and providers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://learn.hashicorp.com/terraform",children:"HashiCorp Learn"})," - Interactive tutorials"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.terraform-best-practices.com/",children:"Terraform Best Practices"})," - Community best practices"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"aws-cloudformation-resources",children:"AWS CloudFormation Resources"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://docs.aws.amazon.com/cloudformation/",children:"CloudFormation Documentation"})," - Official AWS documentation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://aws.amazon.com/cloudformation/templates/",children:"CloudFormation Templates"})," - Sample templates"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://aws.amazon.com/quickstart/",children:"AWS Quick Starts"})," - Reference deployments"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ansible-resources",children:"Ansible Resources"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://docs.ansible.com/",children:"Ansible Documentation"})," - Official Ansible documentation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://galaxy.ansible.com/",children:"Ansible Galaxy"})," - Community roles and collections"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://github.com/ansible/ansible-examples",children:"Ansible Examples"})," - Example playbooks"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://cloud.hashicorp.com/products/terraform",children:"Terraform Cloud"})," - Free tier available"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://aws.amazon.com/free/",children:"AWS Free Tier"})," - Practice with real AWS resources"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.katacoda.com/",children:"Katacoda"})," - Interactive scenarios"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(e.p,{children:"After mastering Infrastructure as Code:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Advanced IaC"}),": Learn advanced Terraform features, custom providers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"GitOps"}),": Implement GitOps workflows with ArgoCD, Flux"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Policy as Code"}),": Open Policy Agent (OPA), Sentinel"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Multi-Cloud"}),": Terraform with multiple cloud providers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Container Orchestration"}),": Kubernetes, Docker Swarm"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Join Communities"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.reddit.com/r/Terraform/",children:"r/Terraform"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://discuss.hashicorp.com/",children:"HashiCorp Community"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Continue to ",(0,r.jsx)(e.strong,{children:"Container Orchestration"})," to learn Docker and Kubernetes, or explore ",(0,r.jsx)(e.strong,{children:"Multi-Cloud Architecture"})," for advanced cloud strategies!"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);