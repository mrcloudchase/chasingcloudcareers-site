"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[569],{8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var s=i(6540);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}},9164:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"linux-engineering/shell-scripting","title":"Shell Scripting and Automation","description":"Master Bash scripting to automate system administration tasks and improve efficiency.","source":"@site/docs/linux-engineering/03-shell-scripting.md","sourceDirName":"linux-engineering","slug":"/linux-engineering/shell-scripting","permalink":"/chasingcloudcareers-site/docs/linux-engineering/shell-scripting","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/linux-engineering/03-shell-scripting.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"System Administration","permalink":"/chasingcloudcareers-site/docs/linux-engineering/system-administration"},"next":{"title":"Network Configuration and Security","permalink":"/chasingcloudcareers-site/docs/linux-engineering/networking-security"}}');var r=i(4848),a=i(8453);const t={sidebar_position:4},l="Shell Scripting and Automation",o={},c=[{value:"Introduction to Shell Scripting",id:"introduction-to-shell-scripting",level:2},{value:"What is a Shell Script?",id:"what-is-a-shell-script",level:3},{value:"Choosing Your Shell",id:"choosing-your-shell",level:3},{value:"Basic Script Structure",id:"basic-script-structure",level:2},{value:"Creating Your First Script",id:"creating-your-first-script",level:3},{value:"Understanding the Shebang",id:"understanding-the-shebang",level:3},{value:"Script Structure Best Practices",id:"script-structure-best-practices",level:3},{value:"Variables and Data Types",id:"variables-and-data-types",level:2},{value:"Variable Declaration and Usage",id:"variable-declaration-and-usage",level:3},{value:"Variable Scope and Types",id:"variable-scope-and-types",level:3},{value:"Hands-on Exercise: Variables",id:"hands-on-exercise-variables",level:3},{value:"Control Structures",id:"control-structures",level:2},{value:"Conditional Statements",id:"conditional-statements",level:3},{value:"Case Statements",id:"case-statements",level:3},{value:"Loops",id:"loops",level:3},{value:"Practical Control Structure Examples",id:"practical-control-structure-examples",level:3},{value:"Functions",id:"functions",level:2},{value:"Function Syntax",id:"function-syntax",level:3},{value:"Function Parameters and Return Values",id:"function-parameters-and-return-values",level:3},{value:"Advanced Function Features",id:"advanced-function-features",level:3},{value:"Practical Function Examples",id:"practical-function-examples",level:3},{value:"Input/Output and File Operations",id:"inputoutput-and-file-operations",level:2},{value:"Reading User Input",id:"reading-user-input",level:3},{value:"File Operations",id:"file-operations",level:3},{value:"Practical I/O Examples",id:"practical-io-examples",level:3},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Exit Codes and Error Handling",id:"exit-codes-and-error-handling",level:3},{value:"Debugging Techniques",id:"debugging-techniques",level:3},{value:"Practical Error Handling Example",id:"practical-error-handling-example",level:3},{value:"Hands-on Exercise: Complete Automation Script",id:"hands-on-exercise-complete-automation-script",level:2},{value:"Free Learning Resources",id:"free-learning-resources",level:2},{value:"Interactive Scripting Practice",id:"interactive-scripting-practice",level:3},{value:"Advanced Scripting",id:"advanced-scripting",level:3},{value:"Practice Challenges",id:"practice-challenges",level:3},{value:"Video Tutorials",id:"video-tutorials",level:3},{value:"Next Steps",id:"next-steps",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"shell-scripting-and-automation",children:"Shell Scripting and Automation"})}),"\n",(0,r.jsx)(e.p,{children:"Master Bash scripting to automate system administration tasks and improve efficiency."}),"\n",(0,r.jsx)(e.h2,{id:"introduction-to-shell-scripting",children:"Introduction to Shell Scripting"}),"\n",(0,r.jsx)(e.p,{children:"Shell scripting allows you to automate repetitive tasks, combine multiple commands, and create powerful system administration tools."}),"\n",(0,r.jsx)(e.h3,{id:"what-is-a-shell-script",children:"What is a Shell Script?"}),"\n",(0,r.jsx)(e.p,{children:"A shell script is a text file containing a series of commands that the shell can execute. It's like a program written in the shell's command language."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Benefits of Shell Scripting:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Automation"}),": Eliminate repetitive manual tasks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Consistency"}),": Ensure tasks are performed the same way every time"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Efficiency"}),": Save time and reduce human error"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Integration"}),": Combine multiple tools and commands"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Scheduling"}),": Run tasks automatically with cron"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"choosing-your-shell",children:"Choosing Your Shell"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Common Shells:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Bash"})," (Bourne Again Shell): Most popular, default on most Linux systems"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Zsh"})," (Z Shell): Enhanced features, popular with developers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fish"})," (Friendly Interactive Shell): User-friendly with good defaults"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Dash"}),": Lightweight, POSIX-compliant"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Check Your Current Shell:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"echo $SHELL\n# Output: /bin/bash\n\n# List available shells\ncat /etc/shells\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"For this guide, we'll use Bash"})," - it's the most widely supported and portable."]}),"\n",(0,r.jsx)(e.h2,{id:"basic-script-structure",children:"Basic Script Structure"}),"\n",(0,r.jsx)(e.h3,{id:"creating-your-first-script",children:"Creating Your First Script"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Step 1: Create the script file"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"nano hello_world.sh\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Step 2: Add the shebang and content"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# This is a comment\n# My first shell script\n\necho "Hello, World!"\necho "Today is: $(date)"\necho "Current user: $USER"\necho "Current directory: $(pwd)"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Step 3: Make it executable"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"chmod +x hello_world.sh\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Step 4: Run the script"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"./hello_world.sh\n"})}),"\n",(0,r.jsx)(e.h3,{id:"understanding-the-shebang",children:"Understanding the Shebang"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.strong,{children:"shebang"})," (",(0,r.jsx)(e.code,{children:"#!"}),") tells the system which interpreter to use:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"#!/bin/bash          # Use Bash\n#!/bin/sh            # Use system shell (usually dash)\n#!/usr/bin/env bash  # Use bash from PATH (more portable)\n#!/usr/bin/python3   # Use Python 3\n"})}),"\n",(0,r.jsx)(e.h3,{id:"script-structure-best-practices",children:"Script Structure Best Practices"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n#############################################\n# Script Name: example_script.sh\n# Description: Brief description of what the script does\n# Author: Your Name\n# Date: 2024-01-15\n# Version: 1.0\n#############################################\n\n# Exit on any error\nset -e\n\n# Exit on undefined variables\nset -u\n\n# Global variables\nSCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"\nLOG_FILE="/var/log/script.log"\n\n# Functions\nfunction main() {\n    echo "Script starting..."\n    # Main logic here\n    echo "Script completed successfully"\n}\n\n# Script execution\nmain "$@"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"variables-and-data-types",children:"Variables and Data Types"}),"\n",(0,r.jsx)(e.h3,{id:"variable-declaration-and-usage",children:"Variable Declaration and Usage"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Basic Variables:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Variable assignment (no spaces around =)\nname="John Doe"\nage=30\nis_admin=true\n\n# Using variables\necho "Name: $name"\necho "Age: $age"\necho "Admin: $is_admin"\n\n# Alternative syntax\necho "Name: ${name}"\necho "Age: ${age}"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Environment Variables:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Common environment variables\necho "User: $USER"\necho "Home: $HOME"\necho "Path: $PATH"\necho "Shell: $SHELL"\necho "Current directory: $PWD"\n\n# Setting environment variables\nexport MY_VAR="Hello World"\necho "My variable: $MY_VAR"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Command Line Arguments:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Script arguments\necho "Script name: $0"\necho "First argument: $1"\necho "Second argument: $2"\necho "All arguments: $@"\necho "Number of arguments: $#"\n\n# Example usage: ./script.sh arg1 arg2 arg3\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Special Variables:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\necho "Process ID: $$"\necho "Exit status of last command: $?"\necho "All arguments as single string: $*"\necho "All arguments as array: $@"\necho "Number of arguments: $#"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"variable-scope-and-types",children:"Variable Scope and Types"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Local vs Global Variables:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nglobal_var="I\'m global"\n\nfunction test_scope() {\n    local local_var="I\'m local"\n    global_var="Modified global"\n    \n    echo "Inside function:"\n    echo "Local: $local_var"\n    echo "Global: $global_var"\n}\n\necho "Before function: $global_var"\ntest_scope\necho "After function: $global_var"\n# echo "Local outside function: $local_var"  # This would cause an error\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Arrays:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Declare array\nfruits=("apple" "banana" "orange" "grape")\n\n# Access elements\necho "First fruit: ${fruits[0]}"\necho "All fruits: ${fruits[@]}"\necho "Number of fruits: ${#fruits[@]}"\n\n# Add element\nfruits+=("mango")\n\n# Loop through array\nfor fruit in "${fruits[@]}"; do\n    echo "Fruit: $fruit"\ndone\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Associative Arrays (Bash 4+):"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Declare associative array\ndeclare -A colors\ncolors[red]="#FF0000"\ncolors[green]="#00FF00"\ncolors[blue]="#0000FF"\n\n# Access elements\necho "Red color code: ${colors[red]}"\n\n# Loop through associative array\nfor color in "${!colors[@]}"; do\n    echo "$color: ${colors[$color]}"\ndone\n'})}),"\n",(0,r.jsx)(e.h3,{id:"hands-on-exercise-variables",children:"Hands-on Exercise: Variables"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# File: variable_practice.sh\n\n# 1. Create variables for system information\nhostname=$(hostname)\ncurrent_date=$(date +"%Y-%m-%d %H:%M:%S")\ndisk_usage=$(df -h / | awk \'NR==2 {print $5}\')\n\n# 2. Create an array of important directories\nimportant_dirs=("/etc" "/var/log" "/home" "/tmp")\n\n# 3. Display information\necho "=== System Information ==="\necho "Hostname: $hostname"\necho "Date: $current_date"\necho "Root disk usage: $disk_usage"\necho ""\n\necho "=== Important Directories ==="\nfor dir in "${important_dirs[@]}"; do\n    if [ -d "$dir" ]; then\n        echo "$dir exists"\n    else\n        echo "$dir does not exist"\n    fi\ndone\n'})}),"\n",(0,r.jsx)(e.h2,{id:"control-structures",children:"Control Structures"}),"\n",(0,r.jsx)(e.h3,{id:"conditional-statements",children:"Conditional Statements"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Basic if Statement:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nage=25\n\nif [ $age -ge 18 ]; then\n    echo "You are an adult"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"if-else Statement:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nread -p "Enter your age: " age\n\nif [ $age -ge 18 ]; then\n    echo "You are an adult"\nelse\n    echo "You are a minor"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"if-elif-else Statement:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nread -p "Enter your score: " score\n\nif [ $score -ge 90 ]; then\n    echo "Grade: A"\nelif [ $score -ge 80 ]; then\n    echo "Grade: B"\nelif [ $score -ge 70 ]; then\n    echo "Grade: C"\nelif [ $score -ge 60 ]; then\n    echo "Grade: D"\nelse\n    echo "Grade: F"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Test Operators:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Numeric comparisons\n# -eq (equal), -ne (not equal), -lt (less than)\n# -le (less or equal), -gt (greater than), -ge (greater or equal)\n\n# String comparisons\n# = (equal), != (not equal), -z (empty), -n (not empty)\n\n# File tests\n# -f (regular file), -d (directory), -e (exists)\n# -r (readable), -w (writable), -x (executable)\n\nfile="/etc/passwd"\n\nif [ -f "$file" ]; then\n    echo "$file is a regular file"\nfi\n\nif [ -r "$file" ]; then\n    echo "$file is readable"\nfi\n\nif [ -w "$file" ]; then\n    echo "$file is writable"\nelse\n    echo "$file is not writable"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Advanced Conditional Syntax:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Using [[ ]] (recommended for Bash)\nname="John"\n\nif [[ $name == "John" ]]; then\n    echo "Hello John!"\nfi\n\n# Pattern matching\nif [[ $name == J* ]]; then\n    echo "Name starts with J"\nfi\n\n# Multiple conditions\nage=25\nif [[ $age -ge 18 && $age -le 65 ]]; then\n    echo "Working age"\nfi\n\n# Logical operators: && (and), || (or), ! (not)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"case-statements",children:"Case Statements"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nread -p "Enter your choice (start/stop/restart/status): " action\n\ncase $action in\n    start)\n        echo "Starting service..."\n        ;;\n    stop)\n        echo "Stopping service..."\n        ;;\n    restart)\n        echo "Restarting service..."\n        ;;\n    status)\n        echo "Checking service status..."\n        ;;\n    *)\n        echo "Invalid option. Use: start, stop, restart, or status"\n        exit 1\n        ;;\nesac\n'})}),"\n",(0,r.jsx)(e.h3,{id:"loops",children:"Loops"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"for Loop:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Loop through a list\nfor fruit in apple banana orange; do\n    echo "Fruit: $fruit"\ndone\n\n# Loop through array\nfruits=("apple" "banana" "orange")\nfor fruit in "${fruits[@]}"; do\n    echo "Fruit: $fruit"\ndone\n\n# Loop through files\nfor file in /etc/*.conf; do\n    if [ -f "$file" ]; then\n        echo "Config file: $file"\n    fi\ndone\n\n# C-style for loop\nfor ((i=1; i<=5; i++)); do\n    echo "Number: $i"\ndone\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"while Loop:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Basic while loop\ncounter=1\nwhile [ $counter -le 5 ]; do\n    echo "Counter: $counter"\n    ((counter++))\ndone\n\n# Reading file line by line\nwhile IFS= read -r line; do\n    echo "Line: $line"\ndone < /etc/passwd\n\n# Infinite loop with break condition\nwhile true; do\n    read -p "Enter \'quit\' to exit: " input\n    if [ "$input" = "quit" ]; then\n        break\n    fi\n    echo "You entered: $input"\ndone\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"until Loop:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# until loop (opposite of while)\ncounter=1\nuntil [ $counter -gt 5 ]; do\n    echo "Counter: $counter"\n    ((counter++))\ndone\n'})}),"\n",(0,r.jsx)(e.h3,{id:"practical-control-structure-examples",children:"Practical Control Structure Examples"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 1: System Health Check Script"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\necho "=== System Health Check ==="\n\n# Check disk usage\ndisk_usage=$(df / | awk \'NR==2 {print $5}\' | sed \'s/%//\')\nif [ $disk_usage -gt 80 ]; then\n    echo "WARNING: Disk usage is ${disk_usage}%"\nelse\n    echo "OK: Disk usage is ${disk_usage}%"\nfi\n\n# Check memory usage\nmemory_usage=$(free | awk \'NR==2{printf "%.0f", $3*100/$2}\')\nif [ $memory_usage -gt 80 ]; then\n    echo "WARNING: Memory usage is ${memory_usage}%"\nelse\n    echo "OK: Memory usage is ${memory_usage}%"\nfi\n\n# Check load average\nload_avg=$(uptime | awk -F\'load average:\' \'{print $2}\' | awk \'{print $1}\' | sed \'s/,//\')\nif (( $(echo "$load_avg > 2.0" | bc -l) )); then\n    echo "WARNING: Load average is $load_avg"\nelse\n    echo "OK: Load average is $load_avg"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 2: User Management Script"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nfunction create_user() {\n    local username=$1\n    \n    if id "$username" &>/dev/null; then\n        echo "User $username already exists"\n        return 1\n    fi\n    \n    sudo useradd -m -s /bin/bash "$username"\n    echo "User $username created successfully"\n}\n\nfunction delete_user() {\n    local username=$1\n    \n    if ! id "$username" &>/dev/null; then\n        echo "User $username does not exist"\n        return 1\n    fi\n    \n    sudo userdel -r "$username"\n    echo "User $username deleted successfully"\n}\n\n# Main menu\nwhile true; do\n    echo ""\n    echo "User Management Script"\n    echo "1. Create user"\n    echo "2. Delete user"\n    echo "3. List users"\n    echo "4. Exit"\n    read -p "Choose an option: " choice\n    \n    case $choice in\n        1)\n            read -p "Enter username to create: " username\n            create_user "$username"\n            ;;\n        2)\n            read -p "Enter username to delete: " username\n            delete_user "$username"\n            ;;\n        3)\n            echo "Current users:"\n            cut -d: -f1 /etc/passwd | sort\n            ;;\n        4)\n            echo "Goodbye!"\n            exit 0\n            ;;\n        *)\n            echo "Invalid option"\n            ;;\n    esac\ndone\n'})}),"\n",(0,r.jsx)(e.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(e.p,{children:"Functions help organize code, reduce repetition, and make scripts more maintainable."}),"\n",(0,r.jsx)(e.h3,{id:"function-syntax",children:"Function Syntax"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Basic Function Definition:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Method 1: function keyword\nfunction greet() {\n    echo "Hello, $1!"\n}\n\n# Method 2: without function keyword (preferred)\ngreet_user() {\n    local name=$1\n    echo "Hello, $name!"\n}\n\n# Calling functions\ngreet "World"\ngreet_user "John"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"function-parameters-and-return-values",children:"Function Parameters and Return Values"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Function with multiple parameters\ncalculate_sum() {\n    local num1=$1\n    local num2=$2\n    local result=$((num1 + num2))\n    echo $result  # Return value via echo\n}\n\n# Function with return status\nis_file_executable() {\n    local file=$1\n    \n    if [ -x "$file" ]; then\n        return 0  # Success\n    else\n        return 1  # Failure\n    fi\n}\n\n# Using functions\nsum=$(calculate_sum 10 20)\necho "Sum: $sum"\n\nif is_file_executable "/bin/ls"; then\n    echo "/bin/ls is executable"\nelse\n    echo "/bin/ls is not executable"\nfi\n'})}),"\n",(0,r.jsx)(e.h3,{id:"advanced-function-features",children:"Advanced Function Features"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Functions with Variable Arguments:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nprint_all_args() {\n    echo "Function received $# arguments:"\n    for arg in "$@"; do\n        echo "  - $arg"\n    done\n}\n\nprint_all_args "apple" "banana" "orange"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Functions with Global and Local Variables:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nglobal_counter=0\n\nincrement_counter() {\n    local increment=${1:-1}  # Default to 1 if no argument\n    global_counter=$((global_counter + increment))\n    echo "Counter incremented by $increment"\n}\n\nget_counter() {\n    echo $global_counter\n}\n\nincrement_counter 5\nincrement_counter\necho "Current counter: $(get_counter)"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"practical-function-examples",children:"Practical Function Examples"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 1: Logging Functions"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nLOG_FILE="/tmp/script.log"\n\nlog_message() {\n    local level=$1\n    local message=$2\n    local timestamp=$(date \'+%Y-%m-%d %H:%M:%S\')\n    \n    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"\n}\n\nlog_info() {\n    log_message "INFO" "$1"\n}\n\nlog_warning() {\n    log_message "WARNING" "$1"\n}\n\nlog_error() {\n    log_message "ERROR" "$1"\n}\n\n# Usage\nlog_info "Script started"\nlog_warning "This is a warning message"\nlog_error "This is an error message"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 2: File Backup Functions"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nbackup_file() {\n    local source_file=$1\n    local backup_dir=${2:-"/backup"}\n    \n    # Validate input\n    if [ ! -f "$source_file" ]; then\n        echo "Error: $source_file does not exist"\n        return 1\n    fi\n    \n    # Create backup directory if it doesn\'t exist\n    mkdir -p "$backup_dir"\n    \n    # Create backup with timestamp\n    local filename=$(basename "$source_file")\n    local timestamp=$(date \'+%Y%m%d_%H%M%S\')\n    local backup_file="${backup_dir}/${filename}.${timestamp}.bak"\n    \n    if cp "$source_file" "$backup_file"; then\n        echo "Backup created: $backup_file"\n        return 0\n    else\n        echo "Error: Failed to create backup"\n        return 1\n    fi\n}\n\nrestore_backup() {\n    local backup_file=$1\n    local restore_path=$2\n    \n    if [ ! -f "$backup_file" ]; then\n        echo "Error: Backup file $backup_file does not exist"\n        return 1\n    fi\n    \n    if cp "$backup_file" "$restore_path"; then\n        echo "File restored from $backup_file to $restore_path"\n        return 0\n    else\n        echo "Error: Failed to restore file"\n        return 1\n    fi\n}\n\n# Usage examples\nbackup_file "/etc/hosts"\nbackup_file "/etc/passwd" "/home/user/backups"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"inputoutput-and-file-operations",children:"Input/Output and File Operations"}),"\n",(0,r.jsx)(e.h3,{id:"reading-user-input",children:"Reading User Input"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Basic Input:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Simple input\nread -p "Enter your name: " name\necho "Hello, $name!"\n\n# Input with timeout\nif read -t 10 -p "Enter something (10 seconds): " input; then\n    echo "You entered: $input"\nelse\n    echo "Timeout reached"\nfi\n\n# Silent input (for passwords)\nread -s -p "Enter password: " password\necho ""  # New line after silent input\necho "Password entered (hidden)"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Advanced Input Handling:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Input validation\nwhile true; do\n    read -p "Enter a number between 1 and 10: " number\n    \n    if [[ $number =~ ^[0-9]+$ ]] && [ $number -ge 1 ] && [ $number -le 10 ]; then\n        echo "Valid number: $number"\n        break\n    else\n        echo "Invalid input. Please try again."\n    fi\ndone\n\n# Multiple choice input\nselect option in "Option 1" "Option 2" "Option 3" "Quit"; do\n    case $option in\n        "Option 1")\n            echo "You chose Option 1"\n            ;;\n        "Option 2")\n            echo "You chose Option 2"\n            ;;\n        "Option 3")\n            echo "You chose Option 3"\n            ;;\n        "Quit")\n            break\n            ;;\n        *)\n            echo "Invalid option"\n            ;;\n    esac\ndone\n'})}),"\n",(0,r.jsx)(e.h3,{id:"file-operations",children:"File Operations"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Reading Files:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Read entire file\nfile_content=$(cat /etc/hostname)\necho "Hostname: $file_content"\n\n# Read file line by line\nwhile IFS= read -r line; do\n    echo "Line: $line"\ndone < /etc/passwd\n\n# Read specific lines\nhead -5 /etc/passwd  # First 5 lines\ntail -5 /etc/passwd  # Last 5 lines\nsed -n \'10,15p\' /etc/passwd  # Lines 10-15\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Writing Files:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Write to file (overwrite)\necho "Hello World" > output.txt\n\n# Append to file\necho "Second line" >> output.txt\n\n# Write multiple lines\ncat > config.txt << EOF\n# Configuration file\nserver_name=localhost\nport=8080\ndebug=true\nEOF\n\n# Write with variables\ncat > info.txt << EOF\nUser: $USER\nDate: $(date)\nDirectory: $(pwd)\nEOF\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"File Testing and Manipulation:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nfile="/etc/passwd"\n\n# File tests\nif [ -f "$file" ]; then\n    echo "$file is a regular file"\n    echo "Size: $(stat -c%s "$file") bytes"\n    echo "Modified: $(stat -c%y "$file")"\n    echo "Permissions: $(stat -c%A "$file")"\nfi\n\n# Directory operations\nmkdir -p /tmp/test_dir\ncd /tmp/test_dir\n\n# Create test files\ntouch file1.txt file2.txt file3.log\n\n# Find files\necho "Text files:"\nfind . -name "*.txt"\n\necho "All files modified in last hour:"\nfind . -mmin -60\n\n# File processing\necho "Processing files:"\nfor file in *.txt; do\n    if [ -f "$file" ]; then\n        echo "Processing $file"\n        # Add timestamp to file\n        echo "Processed on $(date)" >> "$file"\n    fi\ndone\n'})}),"\n",(0,r.jsx)(e.h3,{id:"practical-io-examples",children:"Practical I/O Examples"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 1: Configuration File Parser"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nparse_config() {\n    local config_file=$1\n    \n    if [ ! -f "$config_file" ]; then\n        echo "Error: Configuration file $config_file not found"\n        return 1\n    fi\n    \n    echo "Parsing configuration file: $config_file"\n    \n    while IFS=\'=\' read -r key value; do\n        # Skip comments and empty lines\n        [[ $key =~ ^[[:space:]]*# ]] && continue\n        [[ -z $key ]] && continue\n        \n        # Remove leading/trailing whitespace\n        key=$(echo "$key" | xargs)\n        value=$(echo "$value" | xargs)\n        \n        echo "Config: $key = $value"\n        \n        # You can set variables dynamically\n        declare -g "CONFIG_$key"="$value"\n        \n    done < "$config_file"\n}\n\n# Create sample config file\ncat > sample.conf << EOF\n# Sample configuration\nserver_name=localhost\nport=8080\ndebug=true\n# This is a comment\ndatabase_host=db.example.com\nEOF\n\n# Parse the configuration\nparse_config "sample.conf"\n\n# Access parsed values\necho "Server: $CONFIG_server_name"\necho "Port: $CONFIG_port"\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Example 2: Log File Analyzer"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nanalyze_log() {\n    local log_file=$1\n    \n    if [ ! -f "$log_file" ]; then\n        echo "Error: Log file $log_file not found"\n        return 1\n    fi\n    \n    echo "=== Log File Analysis: $log_file ==="\n    \n    # Total lines\n    total_lines=$(wc -l < "$log_file")\n    echo "Total lines: $total_lines"\n    \n    # Error count\n    error_count=$(grep -c -i "error" "$log_file" 2>/dev/null || echo 0)\n    echo "Error entries: $error_count"\n    \n    # Warning count\n    warning_count=$(grep -c -i "warning" "$log_file" 2>/dev/null || echo 0)\n    echo "Warning entries: $warning_count"\n    \n    # Most recent entries\n    echo ""\n    echo "Last 5 entries:"\n    tail -5 "$log_file"\n    \n    # Top IP addresses (if it\'s an access log)\n    if grep -q "^\\S\\+ \\S\\+ \\S\\+" "$log_file" 2>/dev/null; then\n        echo ""\n        echo "Top 5 IP addresses:"\n        awk \'{print $1}\' "$log_file" | sort | uniq -c | sort -nr | head -5\n    fi\n}\n\n# Create sample log file for testing\ncat > sample.log << EOF\n2024-01-15 10:00:01 INFO Application started\n2024-01-15 10:00:02 INFO User login: john\n2024-01-15 10:00:03 WARNING High memory usage\n2024-01-15 10:00:04 ERROR Database connection failed\n2024-01-15 10:00:05 INFO User logout: john\nEOF\n\n# Analyze the log\nanalyze_log "sample.log"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"error-handling-and-debugging",children:"Error Handling and Debugging"}),"\n",(0,r.jsx)(e.h3,{id:"exit-codes-and-error-handling",children:"Exit Codes and Error Handling"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Understanding Exit Codes:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Exit codes:\n# 0 = Success\n# 1-255 = Various error conditions\n\n# Check exit code of last command\nls /nonexistent_directory\necho "Exit code: $?"\n\n# Set custom exit codes\nfunction divide() {\n    local a=$1\n    local b=$2\n    \n    if [ $b -eq 0 ]; then\n        echo "Error: Division by zero"\n        return 1\n    fi\n    \n    echo $((a / b))\n    return 0\n}\n\n# Use the function\nif divide 10 2; then\n    echo "Division successful"\nelse\n    echo "Division failed"\nfi\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Error Handling Strategies:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Strategy 1: Exit on any error\nset -e  # Exit immediately if a command exits with a non-zero status\n\n# Strategy 2: Exit on undefined variables\nset -u  # Exit if trying to use an undefined variable\n\n# Strategy 3: Pipe failure detection\nset -o pipefail  # Exit if any command in a pipeline fails\n\n# Combine all three\nset -euo pipefail\n\n# Handle errors gracefully\nfunction safe_command() {\n    local command="$1"\n    \n    if ! $command; then\n        echo "Error: Command \'$command\' failed"\n        return 1\n    fi\n}\n\n# Trap errors\nfunction cleanup() {\n    echo "Cleaning up..."\n    # Remove temporary files, etc.\n}\n\ntrap cleanup EXIT  # Run cleanup on script exit\ntrap \'echo "Error on line $LINENO"\' ERR  # Show error line number\n'})}),"\n",(0,r.jsx)(e.h3,{id:"debugging-techniques",children:"Debugging Techniques"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Debug Mode:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Enable debug mode\nset -x  # Print commands before executing them\n\necho "This will show the command being executed"\nls /tmp\n\n# Disable debug mode\nset +x\n\necho "This won\'t show the command"\n\n# Conditional debugging\nDEBUG=${DEBUG:-false}\n\ndebug_echo() {\n    if [ "$DEBUG" = "true" ]; then\n        echo "DEBUG: $*"\n    fi\n}\n\ndebug_echo "This is a debug message"\n\n# Run with: DEBUG=true ./script.sh\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Logging for Debugging:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\nLOG_LEVEL=${LOG_LEVEL:-INFO}\nLOG_FILE=${LOG_FILE:-/tmp/script.log}\n\nlog() {\n    local level=$1\n    shift\n    local message="$*"\n    local timestamp=$(date \'+%Y-%m-%d %H:%M:%S\')\n    \n    # Log levels: DEBUG, INFO, WARNING, ERROR\n    case $LOG_LEVEL in\n        DEBUG)\n            level_num=0\n            ;;\n        INFO)\n            level_num=1\n            ;;\n        WARNING)\n            level_num=2\n            ;;\n        ERROR)\n            level_num=3\n            ;;\n    esac\n    \n    case $level in\n        DEBUG)\n            msg_level_num=0\n            ;;\n        INFO)\n            msg_level_num=1\n            ;;\n        WARNING)\n            msg_level_num=2\n            ;;\n        ERROR)\n            msg_level_num=3\n            ;;\n    esac\n    \n    if [ $msg_level_num -ge $level_num ]; then\n        echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"\n    fi\n}\n\n# Usage\nlog DEBUG "This is a debug message"\nlog INFO "Script started"\nlog WARNING "This is a warning"\nlog ERROR "This is an error"\n'})}),"\n",(0,r.jsx)(e.h3,{id:"practical-error-handling-example",children:"Practical Error Handling Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n# Robust backup script with error handling\nset -euo pipefail\n\nBACKUP_SOURCE="/home/user/documents"\nBACKUP_DEST="/backup"\nLOG_FILE="/var/log/backup.log"\n\n# Logging function\nlog() {\n    echo "[$(date \'+%Y-%m-%d %H:%M:%S\')] $*" | tee -a "$LOG_FILE"\n}\n\n# Cleanup function\ncleanup() {\n    local exit_code=$?\n    if [ $exit_code -ne 0 ]; then\n        log "ERROR: Script failed with exit code $exit_code"\n    fi\n    log "Backup script finished"\n}\n\n# Error handler\nerror_handler() {\n    local line_number=$1\n    log "ERROR: Script failed at line $line_number"\n    exit 1\n}\n\n# Set up traps\ntrap cleanup EXIT\ntrap \'error_handler $LINENO\' ERR\n\n# Validation function\nvalidate_environment() {\n    log "INFO: Validating environment"\n    \n    if [ ! -d "$BACKUP_SOURCE" ]; then\n        log "ERROR: Source directory $BACKUP_SOURCE does not exist"\n        exit 1\n    fi\n    \n    if [ ! -w "$(dirname "$BACKUP_DEST")" ]; then\n        log "ERROR: Cannot write to backup destination parent directory"\n        exit 1\n    fi\n    \n    if ! command -v rsync >/dev/null 2>&1; then\n        log "ERROR: rsync command not found"\n        exit 1\n    fi\n    \n    log "INFO: Environment validation passed"\n}\n\n# Backup function\nperform_backup() {\n    log "INFO: Starting backup from $BACKUP_SOURCE to $BACKUP_DEST"\n    \n    # Create backup directory with timestamp\n    local backup_dir="$BACKUP_DEST/backup_$(date +%Y%m%d_%H%M%S)"\n    \n    if ! mkdir -p "$backup_dir"; then\n        log "ERROR: Failed to create backup directory $backup_dir"\n        exit 1\n    fi\n    \n    # Perform backup with rsync\n    if rsync -av --progress "$BACKUP_SOURCE/" "$backup_dir/"; then\n        log "INFO: Backup completed successfully to $backup_dir"\n        \n        # Calculate backup size\n        local backup_size=$(du -sh "$backup_dir" | cut -f1)\n        log "INFO: Backup size: $backup_size"\n    else\n        log "ERROR: Backup failed"\n        exit 1\n    fi\n}\n\n# Main execution\nmain() {\n    log "INFO: Backup script started"\n    validate_environment\n    perform_backup\n    log "INFO: Backup script completed successfully"\n}\n\n# Run main function\nmain "$@"\n'})}),"\n",(0,r.jsx)(e.h2,{id:"hands-on-exercise-complete-automation-script",children:"Hands-on Exercise: Complete Automation Script"}),"\n",(0,r.jsx)(e.p,{children:"Create a comprehensive system maintenance script that demonstrates all the concepts learned:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n\n#############################################\n# System Maintenance Script\n# Description: Automated system maintenance tasks\n# Author: Linux Engineering Student\n# Version: 1.0\n#############################################\n\nset -euo pipefail\n\n# Configuration\nSCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"\nLOG_FILE="/tmp/maintenance.log"\nBACKUP_DIR="/tmp/maintenance_backup"\nMAX_LOG_SIZE=1048576  # 1MB\n\n# Color codes for output\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nYELLOW=\'\\033[1;33m\'\nBLUE=\'\\033[0;34m\'\nNC=\'\\033[0m\' # No Color\n\n# Logging functions\nlog() {\n    local level=$1\n    shift\n    local message="$*"\n    local timestamp=$(date \'+%Y-%m-%d %H:%M:%S\')\n    echo -e "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"\n}\n\nlog_info() {\n    log "INFO" "$*"\n    echo -e "${BLUE}[INFO]${NC} $*"\n}\n\nlog_warning() {\n    log "WARNING" "$*"\n    echo -e "${YELLOW}[WARNING]${NC} $*"\n}\n\nlog_error() {\n    log "ERROR" "$*"\n    echo -e "${RED}[ERROR]${NC} $*"\n}\n\nlog_success() {\n    log "SUCCESS" "$*"\n    echo -e "${GREEN}[SUCCESS]${NC} $*"\n}\n\n# Cleanup function\ncleanup() {\n    local exit_code=$?\n    if [ $exit_code -eq 0 ]; then\n        log_success "Maintenance script completed successfully"\n    else\n        log_error "Maintenance script failed with exit code $exit_code"\n    fi\n}\n\ntrap cleanup EXIT\n\n# System information functions\nget_system_info() {\n    log_info "Gathering system information"\n    \n    echo "=== System Information ==="\n    echo "Hostname: $(hostname)"\n    echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d\'"\' -f2)"\n    echo "Kernel: $(uname -r)"\n    echo "Uptime: $(uptime -p)"\n    echo "Load Average: $(uptime | awk -F\'load average:\' \'{print $2}\')"\n    echo ""\n}\n\ncheck_disk_usage() {\n    log_info "Checking disk usage"\n    \n    echo "=== Disk Usage ==="\n    df -h\n    echo ""\n    \n    # Check for high disk usage\n    while read -r filesystem usage mountpoint; do\n        usage_percent=$(echo "$usage" | sed \'s/%//\')\n        if [ "$usage_percent" -gt 80 ]; then\n            log_warning "High disk usage on $mountpoint: $usage"\n        fi\n    done < <(df -h | awk \'NR>1 {print $1, $5, $6}\')\n}\n\ncheck_memory_usage() {\n    log_info "Checking memory usage"\n    \n    echo "=== Memory Usage ==="\n    free -h\n    echo ""\n    \n    # Check for high memory usage\n    memory_percent=$(free | awk \'NR==2{printf "%.0f", $3*100/$2}\')\n    if [ "$memory_percent" -gt 80 ]; then\n        log_warning "High memory usage: ${memory_percent}%"\n    fi\n}\n\ncheck_running_services() {\n    log_info "Checking critical services"\n    \n    echo "=== Service Status ==="\n    \n    # List of critical services to check\n    services=("ssh" "cron" "systemd-resolved")\n    \n    for service in "${services[@]}"; do\n        if systemctl is-active --quiet "$service"; then\n            log_success "$service is running"\n        else\n            log_error "$service is not running"\n        fi\n    done\n    echo ""\n}\n\ncleanup_temp_files() {\n    log_info "Cleaning up temporary files"\n    \n    # Clean /tmp files older than 7 days\n    find /tmp -type f -mtime +7 -delete 2>/dev/null || true\n    \n    # Clean user cache (if running as user)\n    if [ -d "$HOME/.cache" ]; then\n        find "$HOME/.cache" -type f -mtime +30 -delete 2>/dev/null || true\n    fi\n    \n    log_success "Temporary files cleaned"\n}\n\nrotate_logs() {\n    log_info "Rotating log files"\n    \n    # Rotate our own log if it\'s too big\n    if [ -f "$LOG_FILE" ] && [ $(stat -c%s "$LOG_FILE") -gt $MAX_LOG_SIZE ]; then\n        mv "$LOG_FILE" "${LOG_FILE}.old"\n        touch "$LOG_FILE"\n        log_info "Log file rotated"\n    fi\n}\n\nbackup_important_configs() {\n    log_info "Backing up important configuration files"\n    \n    mkdir -p "$BACKUP_DIR"\n    \n    # List of important config files\n    config_files=(\n        "/etc/hosts"\n        "/etc/hostname"\n        "/etc/fstab"\n        "$HOME/.bashrc"\n        "$HOME/.profile"\n    )\n    \n    for config in "${config_files[@]}"; do\n        if [ -f "$config" ]; then\n            cp "$config" "$BACKUP_DIR/$(basename "$config").$(date +%Y%m%d)" 2>/dev/null || true\n            log_success "Backed up $config"\n        fi\n    done\n}\n\nshow_menu() {\n    echo ""\n    echo "=== System Maintenance Menu ==="\n    echo "1. Full system check"\n    echo "2. Disk usage check"\n    echo "3. Memory usage check"\n    echo "4. Service status check"\n    echo "5. Clean temporary files"\n    echo "6. Backup configurations"\n    echo "7. View maintenance log"\n    echo "8. Exit"\n    echo ""\n}\n\nrun_full_check() {\n    log_info "Running full system maintenance check"\n    \n    get_system_info\n    check_disk_usage\n    check_memory_usage\n    check_running_services\n    cleanup_temp_files\n    rotate_logs\n    backup_important_configs\n    \n    log_success "Full system check completed"\n}\n\nview_log() {\n    if [ -f "$LOG_FILE" ]; then\n        echo "=== Recent Log Entries ==="\n        tail -20 "$LOG_FILE"\n    else\n        echo "No log file found"\n    fi\n}\n\n# Main menu loop\nmain() {\n    log_info "System maintenance script started"\n    \n    while true; do\n        show_menu\n        read -p "Choose an option (1-8): " choice\n        \n        case $choice in\n            1)\n                run_full_check\n                ;;\n            2)\n                check_disk_usage\n                ;;\n            3)\n                check_memory_usage\n                ;;\n            4)\n                check_running_services\n                ;;\n            5)\n                cleanup_temp_files\n                ;;\n            6)\n                backup_important_configs\n                ;;\n            7)\n                view_log\n                ;;\n            8)\n                log_info "Exiting maintenance script"\n                exit 0\n                ;;\n            *)\n                log_error "Invalid option: $choice"\n                ;;\n        esac\n        \n        echo ""\n        read -p "Press Enter to continue..."\n    done\n}\n\n# Check if running with arguments for automation\nif [ $# -gt 0 ]; then\n    case $1 in\n        --full-check)\n            run_full_check\n            ;;\n        --disk-check)\n            check_disk_usage\n            ;;\n        --memory-check)\n            check_memory_usage\n            ;;\n        --service-check)\n            check_running_services\n            ;;\n        --cleanup)\n            cleanup_temp_files\n            ;;\n        --backup)\n            backup_important_configs\n            ;;\n        --help)\n            echo "Usage: $0 [--full-check|--disk-check|--memory-check|--service-check|--cleanup|--backup|--help]"\n            exit 0\n            ;;\n        *)\n            log_error "Unknown argument: $1"\n            exit 1\n            ;;\n    esac\nelse\n    # Interactive mode\n    main\nfi\n'})}),"\n",(0,r.jsx)(e.h2,{id:"free-learning-resources",children:"Free Learning Resources"}),"\n",(0,r.jsx)(e.h3,{id:"interactive-scripting-practice",children:"Interactive Scripting Practice"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://linuxconfig.org/bash-scripting-tutorial-for-beginners",children:"Bash Scripting Tutorial"})," - Comprehensive guide"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.shellcheck.net/",children:"ShellCheck"})," - Online shell script analyzer"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://explainshell.com/",children:"Explainshell"})," - Explains shell commands"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"advanced-scripting",children:"Advanced Scripting"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://tldp.org/LDP/abs/html/",children:"Advanced Bash-Scripting Guide"})," - Comprehensive reference"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://wiki.bash-hackers.org/",children:"Bash Hackers Wiki"})," - Advanced techniques"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://google.github.io/styleguide/shellguide.html",children:"Google Shell Style Guide"})," - Best practices"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"practice-challenges",children:"Practice Challenges"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.hackerrank.com/domains/shell",children:"HackerRank Shell"})," - Scripting challenges"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://mywiki.wooledge.org/BashPitfalls",children:"Bash Pitfalls"})," - Common mistakes to avoid"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"video-tutorials",children:"Video Tutorials"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.youtube.com/watch?v=e7BufAVwDiM",children:"Bash Scripting Full Course"})," - Free YouTube course"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://linuxacademy.com/",children:"Linux Academy Bash Scripting"})," - Professional courses"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(e.p,{children:"After mastering shell scripting:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Practice Daily"}),": Write scripts for your daily tasks"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Learn Advanced Topics"}),": Regular expressions, sed, awk"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Explore Configuration Management"}),": Ansible, Puppet, Chef"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Study Security"}),": Learn about secure scripting practices"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Join Communities"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://www.reddit.com/r/bash/",children:"r/bash"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://unix.stackexchange.com/",children:"Unix & Linux Stack Exchange"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Continue to ",(0,r.jsx)(e.strong,{children:"Network Configuration and Security"})," to learn about Linux networking, firewalls, and system security!"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}}}]);