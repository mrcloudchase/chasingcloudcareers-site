"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[2543],{2828:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"devops-engineering/containerization-orchestration","title":"Containerization and Orchestration","description":"Master advanced containerization techniques and container orchestration platforms, enabling scalable, resilient, and efficient deployment of cloud-native applications.","source":"@site/docs/devops-engineering/04-containerization-orchestration.md","sourceDirName":"devops-engineering","slug":"/devops-engineering/containerization-orchestration","permalink":"/chasingcloudcareers-site/docs/devops-engineering/containerization-orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/devops-engineering/04-containerization-orchestration.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Infrastructure as Code and Configuration Management","permalink":"/chasingcloudcareers-site/docs/devops-engineering/infrastructure-as-code"},"next":{"title":"Monitoring, Security, and Advanced Practices","permalink":"/chasingcloudcareers-site/docs/devops-engineering/monitoring-security-advanced"}}');var t=s(4848),i=s(8453);const a={sidebar_position:6},o="Containerization and Orchestration",c={},l=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"1. Advanced Docker and Containerization",id:"1-advanced-docker-and-containerization",level:2},{value:"Docker Mastery and Optimization",id:"docker-mastery-and-optimization",level:3},{value:"Container Registry and Image Management",id:"container-registry-and-image-management",level:3},{value:"Free Resources",id:"free-resources",level:3},{value:"2. Kubernetes Cluster Management",id:"2-kubernetes-cluster-management",level:2},{value:"Production Kubernetes Setup",id:"production-kubernetes-setup",level:3},{value:"Kubernetes Monitoring and Observability",id:"kubernetes-monitoring-and-observability",level:3},{value:"Free Resources",id:"free-resources-1",level:3},{value:"3. Service Mesh and Microservices",id:"3-service-mesh-and-microservices",level:2},{value:"Istio Service Mesh Implementation",id:"istio-service-mesh-implementation",level:3},{value:"Free Resources",id:"free-resources-2",level:3},{value:"4. Container Security and Compliance",id:"4-container-security-and-compliance",level:2},{value:"Comprehensive Security Strategy",id:"comprehensive-security-strategy",level:3},{value:"Compliance and Governance",id:"compliance-and-governance",level:3},{value:"Free Resources",id:"free-resources-3",level:3},{value:"Hands-On Exercises",id:"hands-on-exercises",level:2},{value:"Exercise 1: Production Kubernetes Cluster",id:"exercise-1-production-kubernetes-cluster",level:3},{value:"Exercise 2: Microservices with Service Mesh",id:"exercise-2-microservices-with-service-mesh",level:3},{value:"Exercise 3: Container Security Implementation",id:"exercise-3-container-security-implementation",level:3},{value:"Assessment Questions",id:"assessment-questions",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2},{value:"Tools and Platforms",id:"tools-and-platforms",level:3},{value:"Advanced Topics",id:"advanced-topics",level:3}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"containerization-and-orchestration",children:"Containerization and Orchestration"})}),"\n",(0,t.jsx)(n.p,{children:"Master advanced containerization techniques and container orchestration platforms, enabling scalable, resilient, and efficient deployment of cloud-native applications."}),"\n",(0,t.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,t.jsx)(n.p,{children:"By the end of this module, you will:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Master advanced Docker techniques and container optimization"}),"\n",(0,t.jsx)(n.li,{children:"Design and manage production Kubernetes clusters"}),"\n",(0,t.jsx)(n.li,{children:"Implement service mesh architectures for microservices communication"}),"\n",(0,t.jsx)(n.li,{children:"Develop comprehensive container security and compliance strategies"}),"\n",(0,t.jsx)(n.li,{children:"Build cloud-native applications with modern architectural patterns"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"1-advanced-docker-and-containerization",children:"1. Advanced Docker and Containerization"}),"\n",(0,t.jsx)(n.h3,{id:"docker-mastery-and-optimization",children:"Docker Mastery and Optimization"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Multi-stage Docker Builds:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile - Optimized multi-stage build\n# Build stage\nFROM node:18-alpine AS builder\n\nWORKDIR /app\n\n# Copy package files first for better caching\nCOPY package*.json ./\nRUN npm ci --only=production && npm cache clean --force\n\n# Copy source code\nCOPY src/ ./src/\nCOPY public/ ./public/\nCOPY tsconfig.json ./\n\n# Build application\nRUN npm run build\n\n# Production stage\nFROM node:18-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nextjs -u 1001\n\nWORKDIR /app\n\n# Install dumb-init for proper signal handling\nRUN apk add --no-cache dumb-init\n\n# Copy built application from builder stage\nCOPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules\nCOPY --from=builder --chown=nextjs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nextjs:nodejs /app/package*.json ./\n\n# Security: Remove unnecessary packages and create non-root user\nRUN apk del --purge \\\n    && rm -rf /var/cache/apk/* \\\n    && rm -rf /tmp/*\n\n# Switch to non-root user\nUSER nextjs\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:3000/health || exit 1\n\n# Expose port\nEXPOSE 3000\n\n# Use dumb-init to handle signals properly\nENTRYPOINT ["dumb-init", "--"]\nCMD ["node", "dist/server.js"]\n\n# Development stage\nFROM node:18-alpine AS development\n\nWORKDIR /app\n\n# Install development dependencies\nCOPY package*.json ./\nRUN npm install\n\n# Copy source code\nCOPY . .\n\n# Expose port for development\nEXPOSE 3000\nEXPOSE 9229\n\n# Development command with hot reload\nCMD ["npm", "run", "dev"]\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Docker Compose for Complex Applications:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml - Production-ready multi-service application\nversion: \'3.8\'\n\nservices:\n  # Reverse proxy and load balancer\n  nginx:\n    image: nginx:1.21-alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./nginx/ssl:/etc/nginx/ssl:ro\n      - nginx_cache:/var/cache/nginx\n    depends_on:\n      - app\n    networks:\n      - frontend\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Application service\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://app:${DB_PASSWORD}@postgres:5432/appdb\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n    volumes:\n      - app_uploads:/app/uploads\n    networks:\n      - frontend\n      - backend\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    restart: unless-stopped\n    deploy:\n      replicas: 3\n      resources:\n        limits:\n          cpus: \'0.5\'\n          memory: 512M\n        reservations:\n          cpus: \'0.25\'\n          memory: 256M\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Database\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=appdb\n      - POSTGRES_USER=app\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres/init:/docker-entrypoint-initdb.d:ro\n    networks:\n      - backend\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: \'1.0\'\n          memory: 1G\n        reservations:\n          cpus: \'0.5\'\n          memory: 512M\n\n  # Cache and session store\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_data:/data\n    networks:\n      - backend\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: \'0.25\'\n          memory: 256M\n        reservations:\n          cpus: \'0.1\'\n          memory: 128M\n\n  # Background job processor\n  worker:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: production\n    command: ["node", "dist/worker.js"]\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://app:${DB_PASSWORD}@postgres:5432/appdb\n      - REDIS_URL=redis://redis:6379\n    networks:\n      - backend\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    restart: unless-stopped\n    deploy:\n      replicas: 2\n      resources:\n        limits:\n          cpus: \'0.5\'\n          memory: 512M\n\n  # Monitoring and observability\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - "9090:9090"\n    volumes:\n      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n      - prometheus_data:/prometheus\n    command:\n      - \'--config.file=/etc/prometheus/prometheus.yml\'\n      - \'--storage.tsdb.path=/prometheus\'\n      - \'--web.console.libraries=/etc/prometheus/console_libraries\'\n      - \'--web.console.templates=/etc/prometheus/consoles\'\n      - \'--storage.tsdb.retention.time=200h\'\n      - \'--web.enable-lifecycle\'\n    networks:\n      - monitoring\n    restart: unless-stopped\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - "3001:3000"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning:ro\n    networks:\n      - monitoring\n    restart: unless-stopped\n\n# Networks\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n    internal: true\n  monitoring:\n    driver: bridge\n\n# Persistent volumes\nvolumes:\n  postgres_data:\n    driver: local\n  redis_data:\n    driver: local\n  app_uploads:\n    driver: local\n  nginx_cache:\n    driver: local\n  prometheus_data:\n    driver: local\n  grafana_data:\n    driver: local\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Container Security Best Practices:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Security-hardened Dockerfile\nFROM node:18-alpine AS base\n\n# Install security updates\nRUN apk update && apk upgrade && \\\n    apk add --no-cache dumb-init && \\\n    rm -rf /var/cache/apk/*\n\n# Create non-root user with specific UID/GID\nRUN addgroup -g 10001 -S appgroup && \\\n    adduser -u 10001 -S appuser -G appgroup\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files and install dependencies\nCOPY package*.json ./\nRUN npm ci --only=production && \\\n    npm cache clean --force && \\\n    rm -rf /tmp/*\n\n# Copy application code\nCOPY --chown=appuser:appgroup . .\n\n# Remove write permissions from application files\nRUN chmod -R 555 /app && \\\n    chmod -R 755 /app/logs\n\n# Switch to non-root user\nUSER appuser\n\n# Security labels\nLABEL security.scan="enabled" \\\n      security.non-root="true" \\\n      security.no-new-privileges="true"\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD node healthcheck.js\n\n# Run with security options\nENTRYPOINT ["dumb-init", "--"]\nCMD ["node", "--max-old-space-size=512", "server.js"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"container-registry-and-image-management",children:"Container Registry and Image Management"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Automated Image Building and Scanning:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/container-build.yml\nname: Container Build and Security Scan\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-scan:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n      security-events: write\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Log in to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}\n            VCS_REF=${{ github.sha }}\n\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        if: always()\n        with:\n          sarif_file: 'trivy-results.sarif'\n\n      - name: Run container structure test\n        run: |\n          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64\n          chmod +x container-structure-test-linux-amd64\n          ./container-structure-test-linux-amd64 test \\\n            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \\\n            --config container-structure-test.yaml\n\n      - name: Sign container image\n        if: github.event_name != 'pull_request'\n        run: |\n          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n        env:\n          COSIGN_EXPERIMENTAL: 1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"free-resources",children:"Free Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.docker.com/",children:"Docker Documentation"})," - Complete Docker reference"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.docker.com/develop/dev-best-practices/",children:"Docker Best Practices"})," - Production Docker guidelines"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://csrc.nist.gov/publications/detail/sp/800-190/final",children:"Container Security Guide - NIST"})," - Container security standards"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://trivy.dev/",children:"Trivy Security Scanner"})," - Container vulnerability scanning"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"2-kubernetes-cluster-management",children:"2. Kubernetes Cluster Management"}),"\n",(0,t.jsx)(n.h3,{id:"production-kubernetes-setup",children:"Production Kubernetes Setup"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Kubernetes Cluster Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# cluster-config.yaml - Production EKS cluster with Terraform\nresource "aws_eks_cluster" "main" {\n  name     = "${var.cluster_name}"\n  role_arn = aws_iam_role.cluster.arn\n  version  = "1.28"\n\n  vpc_config {\n    subnet_ids              = var.subnet_ids\n    endpoint_private_access = true\n    endpoint_public_access  = true\n    public_access_cidrs     = var.allowed_cidrs\n    \n    security_group_ids = [aws_security_group.cluster.id]\n  }\n\n  encryption_config {\n    provider {\n      key_arn = aws_kms_key.eks.arn\n    }\n    resources = ["secrets"]\n  }\n\n  enabled_cluster_log_types = [\n    "api",\n    "audit",\n    "authenticator",\n    "controllerManager",\n    "scheduler"\n  ]\n\n  depends_on = [\n    aws_iam_role_policy_attachment.cluster_AmazonEKSClusterPolicy,\n    aws_cloudwatch_log_group.cluster,\n  ]\n\n  tags = var.tags\n}\n\n# Node groups with different instance types\nresource "aws_eks_node_group" "general" {\n  cluster_name    = aws_eks_cluster.main.name\n  node_group_name = "general"\n  node_role_arn   = aws_iam_role.node.arn\n  subnet_ids      = var.private_subnet_ids\n\n  capacity_type  = "ON_DEMAND"\n  instance_types = ["t3.medium", "t3.large"]\n\n  scaling_config {\n    desired_size = 3\n    max_size     = 10\n    min_size     = 1\n  }\n\n  update_config {\n    max_unavailable_percentage = 25\n  }\n\n  labels = {\n    role = "general"\n    environment = var.environment\n  }\n\n  tags = merge(var.tags, {\n    "kubernetes.io/cluster/${var.cluster_name}" = "owned"\n  })\n\n  depends_on = [\n    aws_iam_role_policy_attachment.node_AmazonEKSWorkerNodePolicy,\n    aws_iam_role_policy_attachment.node_AmazonEKS_CNI_Policy,\n    aws_iam_role_policy_attachment.node_AmazonEC2ContainerRegistryReadOnly,\n  ]\n}\n\nresource "aws_eks_node_group" "spot" {\n  cluster_name    = aws_eks_cluster.main.name\n  node_group_name = "spot"\n  node_role_arn   = aws_iam_role.node.arn\n  subnet_ids      = var.private_subnet_ids\n\n  capacity_type  = "SPOT"\n  instance_types = ["t3.medium", "t3.large", "t3a.medium", "t3a.large"]\n\n  scaling_config {\n    desired_size = 2\n    max_size     = 20\n    min_size     = 0\n  }\n\n  labels = {\n    role = "spot"\n    environment = var.environment\n  }\n\n  taint {\n    key    = "spot"\n    value  = "true"\n    effect = "NO_SCHEDULE"\n  }\n\n  tags = merge(var.tags, {\n    "kubernetes.io/cluster/${var.cluster_name}" = "owned"\n  })\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advanced Kubernetes Deployments:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# app-deployment.yaml - Production application deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: production\n  labels:\n    app: myapp\n    version: v1.0.0\n    environment: production\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n        version: v1.0.0\n      annotations:\n        prometheus.io/scrape: "true"\n        prometheus.io/port: "3000"\n        prometheus.io/path: "/metrics"\n    spec:\n      serviceAccountName: myapp\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 10001\n        fsGroup: 10001\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: myapp\n        image: myapp:v1.0.0\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 3000\n          name: http\n          protocol: TCP\n        env:\n        - name: NODE_ENV\n          value: "production"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: myapp-secrets\n              key: database-url\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: myapp-secrets\n              key: redis-url\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "250m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: http\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: cache\n          mountPath: /app/cache\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: cache\n        emptyDir: {}\n      nodeSelector:\n        kubernetes.io/arch: amd64\n      tolerations:\n      - key: "spot"\n        operator: "Equal"\n        value: "true"\n        effect: "NoSchedule"\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - myapp\n              topologyKey: kubernetes.io/hostname\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: production\n  labels:\n    app: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: http\n    protocol: TCP\n    name: http\n  type: ClusterIP\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp-ingress\n  namespace: production\n  annotations:\n    kubernetes.io/ingress.class: "nginx"\n    nginx.ingress.kubernetes.io/ssl-redirect: "true"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\n    nginx.ingress.kubernetes.io/rate-limit: "100"\n    nginx.ingress.kubernetes.io/rate-limit-window: "1m"\nspec:\n  tls:\n  - hosts:\n    - myapp.example.com\n    secretName: myapp-tls\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: myapp-service\n            port:\n              number: 80\n\n---\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: myapp-pdb\n  namespace: production\nspec:\n  minAvailable: 2\n  selector:\n    matchLabels:\n      app: myapp\n\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: myapp-hpa\n  namespace: production\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp\n  minReplicas: 3\n  maxReplicas: 20\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 50\n        periodSeconds: 60\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Kubernetes Operators and Custom Resources:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# custom-operator.yaml - Custom Kubernetes operator\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: webapps.example.com\nspec:\n  group: example.com\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              image:\n                type: string\n              replicas:\n                type: integer\n                minimum: 1\n                maximum: 100\n              resources:\n                type: object\n                properties:\n                  requests:\n                    type: object\n                    properties:\n                      cpu:\n                        type: string\n                      memory:\n                        type: string\n                  limits:\n                    type: object\n                    properties:\n                      cpu:\n                        type: string\n                      memory:\n                        type: string\n          status:\n            type: object\n            properties:\n              conditions:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    type:\n                      type: string\n                    status:\n                      type: string\n                    reason:\n                      type: string\n                    message:\n                      type: string\n  scope: Namespaced\n  names:\n    plural: webapps\n    singular: webapp\n    kind: WebApp\n\n---\napiVersion: example.com/v1\nkind: WebApp\nmetadata:\n  name: my-webapp\n  namespace: production\nspec:\n  image: myapp:v1.0.0\n  replicas: 3\n  resources:\n    requests:\n      cpu: "250m"\n      memory: "256Mi"\n    limits:\n      cpu: "500m"\n      memory: "512Mi"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-monitoring-and-observability",children:"Kubernetes Monitoring and Observability"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Prometheus and Grafana Setup:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# monitoring-stack.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: monitoring\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: monitoring\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: prometheus\n  template:\n    metadata:\n      labels:\n        app: prometheus\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:latest\n        ports:\n        - containerPort: 9090\n        volumeMounts:\n        - name: config\n          mountPath: /etc/prometheus\n        - name: storage\n          mountPath: /prometheus\n        args:\n        - '--config.file=/etc/prometheus/prometheus.yml'\n        - '--storage.tsdb.path=/prometheus'\n        - '--web.console.libraries=/etc/prometheus/console_libraries'\n        - '--web.console.templates=/etc/prometheus/consoles'\n        - '--storage.tsdb.retention.time=200h'\n        - '--web.enable-lifecycle'\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n      volumes:\n      - name: config\n        configMap:\n          name: prometheus-config\n      - name: storage\n        persistentVolumeClaim:\n          claimName: prometheus-storage\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: monitoring\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n\n    rule_files:\n      - \"rules/*.yml\"\n\n    scrape_configs:\n    - job_name: 'kubernetes-apiservers'\n      kubernetes_sd_configs:\n      - role: endpoints\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n        action: keep\n        regex: default;kubernetes;https\n\n    - job_name: 'kubernetes-nodes'\n      kubernetes_sd_configs:\n      - role: node\n      scheme: https\n      tls_config:\n        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n      relabel_configs:\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n\n    - job_name: 'kubernetes-pods'\n      kubernetes_sd_configs:\n      - role: pod\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n        action: replace\n        regex: ([^:]+)(?::\\d+)?;(\\d+)\n        replacement: $1:$2\n        target_label: __address__\n      - action: labelmap\n        regex: __meta_kubernetes_pod_label_(.+)\n      - source_labels: [__meta_kubernetes_namespace]\n        action: replace\n        target_label: kubernetes_namespace\n      - source_labels: [__meta_kubernetes_pod_name]\n        action: replace\n        target_label: kubernetes_pod_name\n\n    alerting:\n      alertmanagers:\n      - static_configs:\n        - targets:\n          - alertmanager:9093\n"})}),"\n",(0,t.jsx)(n.h3,{id:"free-resources-1",children:"Free Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/",children:"Kubernetes Documentation"})," - Official Kubernetes docs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/kelseyhightower/kubernetes-the-hard-way",children:"Kubernetes the Hard Way"})," - Learn Kubernetes internals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.eksworkshop.com/",children:"EKS Workshop"})," - AWS EKS hands-on tutorials"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/security/",children:"Kubernetes Security Best Practices"})," - Security guidelines"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"3-service-mesh-and-microservices",children:"3. Service Mesh and Microservices"}),"\n",(0,t.jsx)(n.h3,{id:"istio-service-mesh-implementation",children:"Istio Service Mesh Implementation"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Istio Installation and Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# istio-installation.yaml\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  name: control-plane\nspec:\n  values:\n    global:\n      meshID: mesh1\n      multiCluster:\n        clusterName: cluster1\n      network: network1\n  components:\n    pilot:\n      k8s:\n        resources:\n          requests:\n            cpu: 200m\n            memory: 128Mi\n          limits:\n            cpu: 500m\n            memory: 512Mi\n    ingressGateways:\n    - name: istio-ingressgateway\n      enabled: true\n      k8s:\n        service:\n          type: LoadBalancer\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n    egressGateways:\n    - name: istio-egressgateway\n      enabled: true\n      k8s:\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: microservices\n  labels:\n    istio-injection: enabled\n\n---\n# Traffic management\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: microservices-gateway\n  namespace: microservices\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - api.example.com\n    tls:\n      httpsRedirect: true\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: api-tls-secret\n    hosts:\n    - api.example.com\n\n---\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: microservices-vs\n  namespace: microservices\nspec:\n  hosts:\n  - api.example.com\n  gateways:\n  - microservices-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /api/v1/users\n    route:\n    - destination:\n        host: user-service\n        port:\n          number: 80\n      weight: 90\n    - destination:\n        host: user-service-v2\n        port:\n          number: 80\n      weight: 10\n    fault:\n      delay:\n        percentage:\n          value: 0.1\n        fixedDelay: 5s\n    retries:\n      attempts: 3\n      perTryTimeout: 2s\n  - match:\n    - uri:\n        prefix: /api/v1/orders\n    route:\n    - destination:\n        host: order-service\n        port:\n          number: 80\n    timeout: 10s\n\n---\napiVersion: networking.istio.io/v1beta1\nkind: DestinationRule\nmetadata:\n  name: user-service-dr\n  namespace: microservices\nspec:\n  host: user-service\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        maxConnections: 100\n      http:\n        http1MaxPendingRequests: 50\n        maxRequestsPerConnection: 10\n    loadBalancer:\n      simple: LEAST_CONN\n    outlierDetection:\n      consecutiveErrors: 3\n      interval: 30s\n      baseEjectionTime: 30s\n      maxEjectionPercent: 50\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n\n---\n# Security policies\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: default\n  namespace: microservices\nspec:\n  mtls:\n    mode: STRICT\n\n---\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: user-service-authz\n  namespace: microservices\nspec:\n  selector:\n    matchLabels:\n      app: user-service\n  rules:\n  - from:\n    - source:\n        principals: ["cluster.local/ns/microservices/sa/api-gateway"]\n  - to:\n    - operation:\n        methods: ["GET", "POST"]\n        paths: ["/api/v1/users/*"]\n  - when:\n    - key: request.headers[authorization]\n      values: ["Bearer *"]\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advanced Traffic Management:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# canary-deployment.yaml - Canary deployment with Istio\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: user-service-rollout\n  namespace: microservices\nspec:\n  replicas: 10\n  strategy:\n    canary:\n      canaryService: user-service-canary\n      stableService: user-service-stable\n      trafficRouting:\n        istio:\n          virtualService:\n            name: user-service-vs\n            routes:\n            - primary\n          destinationRule:\n            name: user-service-dr\n            canarySubsetName: canary\n            stableSubsetName: stable\n      steps:\n      - setWeight: 10\n      - pause: {duration: 2m}\n      - setWeight: 20\n      - pause: {duration: 2m}\n      - setWeight: 50\n      - pause: {duration: 5m}\n      - setWeight: 100\n      analysis:\n        templates:\n        - templateName: success-rate\n        args:\n        - name: service-name\n          value: user-service-canary\n        - name: prometheus-server\n          value: http://prometheus.monitoring:9090\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n    spec:\n      containers:\n      - name: user-service\n        image: user-service:latest\n        ports:\n        - containerPort: 8080\n        resources:\n          requests:\n            memory: "128Mi"\n            cpu: "100m"\n          limits:\n            memory: "256Mi"\n            cpu: "200m"\n\n---\napiVersion: argoproj.io/v1alpha1\nkind: AnalysisTemplate\nmetadata:\n  name: success-rate\n  namespace: microservices\nspec:\n  args:\n  - name: service-name\n  - name: prometheus-server\n  metrics:\n  - name: success-rate\n    interval: 30s\n    count: 5\n    successCondition: result[0] >= 0.95\n    failureLimit: 3\n    provider:\n      prometheus:\n        address: "{{args.prometheus-server}}"\n        query: |\n          sum(rate(istio_requests_total{destination_service_name="{{args.service-name}}",response_code!~"5.*"}[2m])) /\n          sum(rate(istio_requests_total{destination_service_name="{{args.service-name}}"}[2m]))\n  - name: avg-response-time\n    interval: 30s\n    count: 5\n    successCondition: result[0] <= 500\n    provider:\n      prometheus:\n        address: "{{args.prometheus-server}}"\n        query: |\n          sum(rate(istio_request_duration_milliseconds_sum{destination_service_name="{{args.service-name}}"}[2m])) /\n          sum(rate(istio_request_duration_milliseconds_count{destination_service_name="{{args.service-name}}"}[2m]))\n'})}),"\n",(0,t.jsx)(n.h3,{id:"free-resources-2",children:"Free Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://istio.io/latest/docs/",children:"Istio Documentation"})," - Complete service mesh guide"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://linkerd.io/2/overview/",children:"Linkerd Documentation"})," - Lightweight service mesh"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.consul.io/docs/connect",children:"Consul Connect"})," - HashiCorp service mesh"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.envoyproxy.io/docs/envoy/latest/",children:"Envoy Proxy Documentation"})," - Service mesh data plane"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"4-container-security-and-compliance",children:"4. Container Security and Compliance"}),"\n",(0,t.jsx)(n.h3,{id:"comprehensive-security-strategy",children:"Comprehensive Security Strategy"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Pod Security Standards:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# pod-security-policy.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-workloads\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: secure-app\n  namespace: secure-workloads\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: secure-workloads\n  name: secure-app-role\nrules:\n- apiGroups: [""]\n  resources: ["configmaps", "secrets"]\n  verbs: ["get", "list"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: secure-app-binding\n  namespace: secure-workloads\nsubjects:\n- kind: ServiceAccount\n  name: secure-app\n  namespace: secure-workloads\nroleRef:\n  kind: Role\n  name: secure-app-role\n  apiGroup: rbac.authorization.k8s.io\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: secure-app\n  namespace: secure-workloads\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: secure-app\n  template:\n    metadata:\n      labels:\n        app: secure-app\n      annotations:\n        container.apparmor.security.beta.kubernetes.io/secure-app: runtime/default\n    spec:\n      serviceAccountName: secure-app\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 10001\n        runAsGroup: 10001\n        fsGroup: 10001\n        seccompProfile:\n          type: RuntimeDefault\n        supplementalGroups: [10001]\n      containers:\n      - name: secure-app\n        image: secure-app:latest\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 10001\n          runAsGroup: 10001\n          capabilities:\n            drop:\n            - ALL\n          seccompProfile:\n            type: RuntimeDefault\n        resources:\n          requests:\n            memory: "128Mi"\n            cpu: "100m"\n          limits:\n            memory: "256Mi"\n            cpu: "200m"\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: cache\n          mountPath: /app/cache\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: database-url\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: cache\n        emptyDir: {}\n      nodeSelector:\n        kubernetes.io/os: linux\n      tolerations:\n      - key: "dedicated"\n        operator: "Equal"\n        value: "secure-workloads"\n        effect: "NoSchedule"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Security Policies:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# network-policies.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all-ingress\n  namespace: secure-workloads\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-app-ingress\n  namespace: secure-workloads\nspec:\n  podSelector:\n    matchLabels:\n      app: secure-app\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    - podSelector:\n        matchLabels:\n          app: api-gateway\n    ports:\n    - protocol: TCP\n      port: 8080\n\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-database-egress\n  namespace: secure-workloads\nspec:\n  podSelector:\n    matchLabels:\n      app: secure-app\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: database\n    ports:\n    - protocol: TCP\n      port: 5432\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 53\n    - protocol: UDP\n      port: 53\n"})}),"\n",(0,t.jsx)(n.h3,{id:"compliance-and-governance",children:"Compliance and Governance"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Open Policy Agent (OPA) Gatekeeper:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# gatekeeper-policies.yaml\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n      validation:\n        openAPIV3Schema:\n          type: object\n          properties:\n            labels:\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n\n        violation[{"msg": msg}] {\n          required := input.parameters.labels\n          provided := input.review.object.metadata.labels\n          missing := required[_]\n          not provided[missing]\n          msg := sprintf("Missing required label: %v", [missing])\n        }\n\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: must-have-environment\nspec:\n  match:\n    kinds:\n      - apiGroups: ["apps"]\n        kinds: ["Deployment"]\n    excludedNamespaces: ["kube-system", "gatekeeper-system"]\n  parameters:\n    labels: ["environment", "app", "version"]\n\n---\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8scontainersecuritycontext\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sContainerSecurityContext\n      validation:\n        openAPIV3Schema:\n          type: object\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8scontainersecuritycontext\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.template.spec.containers[_]\n          not container.securityContext.runAsNonRoot\n          msg := "Container must run as non-root user"\n        }\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.template.spec.containers[_]\n          not container.securityContext.readOnlyRootFilesystem\n          msg := "Container must have read-only root filesystem"\n        }\n\n        violation[{"msg": msg}] {\n          container := input.review.object.spec.template.spec.containers[_]\n          container.securityContext.allowPrivilegeEscalation\n          msg := "Container must not allow privilege escalation"\n        }\n\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sContainerSecurityContext\nmetadata:\n  name: container-security-context\nspec:\n  match:\n    kinds:\n      - apiGroups: ["apps"]\n        kinds: ["Deployment"]\n    excludedNamespaces: ["kube-system"]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"free-resources-3",children:"Free Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/security/",children:"Kubernetes Security Best Practices"})," - Official security guide"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://falco.org/",children:"Falco Security Monitoring"})," - Runtime security monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://open-policy-agent.github.io/gatekeeper/",children:"OPA Gatekeeper"})," - Policy enforcement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.aquasec.com/resources/",children:"Aqua Security Resources"})," - Container security guides"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"hands-on-exercises",children:"Hands-On Exercises"}),"\n",(0,t.jsx)(n.h3,{id:"exercise-1-production-kubernetes-cluster",children:"Exercise 1: Production Kubernetes Cluster"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Task:"})," Deploy and configure a production-ready Kubernetes cluster."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Multi-node cluster with proper security configurations"}),"\n",(0,t.jsx)(n.li,{children:"Network policies and pod security standards"}),"\n",(0,t.jsx)(n.li,{children:"Monitoring and logging setup"}),"\n",(0,t.jsx)(n.li,{children:"Backup and disaster recovery procedures"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"exercise-2-microservices-with-service-mesh",children:"Exercise 2: Microservices with Service Mesh"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Task:"})," Deploy a microservices application with Istio service mesh."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Multiple microservices with inter-service communication"}),"\n",(0,t.jsx)(n.li,{children:"Traffic management and canary deployments"}),"\n",(0,t.jsx)(n.li,{children:"Security policies and mTLS"}),"\n",(0,t.jsx)(n.li,{children:"Observability and distributed tracing"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"exercise-3-container-security-implementation",children:"Exercise 3: Container Security Implementation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Task:"})," Implement comprehensive container security measures."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Secure container images with vulnerability scanning"}),"\n",(0,t.jsx)(n.li,{children:"Pod security policies and network policies"}),"\n",(0,t.jsx)(n.li,{children:"Secrets management and RBAC"}),"\n",(0,t.jsx)(n.li,{children:"Compliance monitoring with OPA Gatekeeper"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"assessment-questions",children:"Assessment Questions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Design a production Kubernetes cluster architecture with high availability and security."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implement a service mesh solution for a complex microservices application."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Create a comprehensive container security strategy covering the entire lifecycle."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Design a multi-tenant Kubernetes platform with proper isolation and governance."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Implement automated compliance checking and policy enforcement for containers."})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After completing this module:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy production workloads"})," on Kubernetes with proper security and monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement service mesh"})," for complex microservices architectures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Master container security"})," and compliance practices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Move to Module 5: Monitoring, Security, and Advanced Practices"})," to complete your DevOps journey"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsx)(n.h3,{id:"tools-and-platforms",children:"Tools and Platforms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/",children:"Kubernetes"})," - Container orchestration platform"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"})," - Containerization platform"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://istio.io/",children:"Istio"})," - Service mesh platform"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://helm.sh/",children:"Helm"})," - Kubernetes package manager"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://argoproj.github.io/argo-cd/",children:"Argo CD"})," - GitOps continuous delivery"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://fluxcd.io/",children:"Flux"})," - GitOps toolkit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://crossplane.io/",children:"Crossplane"})," - Cloud native control plane"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://knative.dev/",children:"Knative"})," - Serverless containers"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Ready to master monitoring and security? Continue to ",(0,t.jsx)(n.strong,{children:"Module 5: Monitoring, Security, and Advanced Practices"})," to complete your DevOps engineering expertise!"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);