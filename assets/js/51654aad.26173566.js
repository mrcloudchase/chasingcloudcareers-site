"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[5536],{7321:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"cloud-engineering/multi-cloud-infrastructure","title":"Multi-Cloud Infrastructure and Networking","description":"Master advanced infrastructure design and networking across multiple cloud platforms, implementing high availability, disaster recovery, and hybrid cloud solutions.","source":"@site/docs/cloud-engineering/02-multi-cloud-infrastructure.md","sourceDirName":"cloud-engineering","slug":"/cloud-engineering/multi-cloud-infrastructure","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/multi-cloud-infrastructure","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/cloud-engineering/02-multi-cloud-infrastructure.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Cloud Fundamentals and Core Services","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/cloud-fundamentals"},"next":{"title":"Cloud Security and Compliance","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/cloud-security"}}');var i=r(4848),a=r(8453);const o={sidebar_position:4},s="Multi-Cloud Infrastructure and Networking",c={},l=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"1. Advanced Multi-Cloud Networking",id:"1-advanced-multi-cloud-networking",level:2},{value:"Cross-Cloud Connectivity Patterns",id:"cross-cloud-connectivity-patterns",level:3},{value:"Network Performance Optimization",id:"network-performance-optimization",level:3},{value:"Free Resources",id:"free-resources",level:3},{value:"2. Infrastructure as Code (IaC) Mastery",id:"2-infrastructure-as-code-iac-mastery",level:2},{value:"Advanced Terraform Patterns",id:"advanced-terraform-patterns",level:3},{value:"Free Resources",id:"free-resources-1",level:3},{value:"3. High Availability and Disaster Recovery",id:"3-high-availability-and-disaster-recovery",level:2},{value:"Multi-Region Deployment Strategies",id:"multi-region-deployment-strategies",level:3},{value:"Free Resources",id:"free-resources-2",level:3},{value:"Hands-On Exercises",id:"hands-on-exercises",level:2},{value:"Exercise 1: Multi-Cloud Network Architecture",id:"exercise-1-multi-cloud-network-architecture",level:3},{value:"Exercise 2: Infrastructure as Code Multi-Cloud Deployment",id:"exercise-2-infrastructure-as-code-multi-cloud-deployment",level:3},{value:"Exercise 3: Disaster Recovery Implementation",id:"exercise-3-disaster-recovery-implementation",level:3},{value:"Assessment Questions",id:"assessment-questions",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2},{value:"Advanced Networking",id:"advanced-networking",level:3},{value:"Infrastructure as Code",id:"infrastructure-as-code",level:3}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"multi-cloud-infrastructure-and-networking",children:"Multi-Cloud Infrastructure and Networking"})}),"\n",(0,i.jsx)(e.p,{children:"Master advanced infrastructure design and networking across multiple cloud platforms, implementing high availability, disaster recovery, and hybrid cloud solutions."}),"\n",(0,i.jsx)(e.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,i.jsx)(e.p,{children:"By the end of this module, you will:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Design and implement advanced multi-cloud networking architectures"}),"\n",(0,i.jsx)(e.li,{children:"Master Infrastructure as Code (IaC) across AWS, Azure, and GCP"}),"\n",(0,i.jsx)(e.li,{children:"Build high availability and disaster recovery solutions"}),"\n",(0,i.jsx)(e.li,{children:"Implement hybrid and multi-cloud integration patterns"}),"\n",(0,i.jsx)(e.li,{children:"Optimize network performance and security across cloud platforms"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"1-advanced-multi-cloud-networking",children:"1. Advanced Multi-Cloud Networking"}),"\n",(0,i.jsx)(e.h3,{id:"cross-cloud-connectivity-patterns",children:"Cross-Cloud Connectivity Patterns"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"VPC Peering and Transit Gateways:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Multi-cloud networking architecture comparison\nclass MultiCloudNetworking:\n    def __init__(self):\n        self.connectivity_options = {\n            'aws': {\n                'vpc_peering': {\n                    'description': 'Direct connection between VPCs',\n                    'limitations': 'No transitive routing, same region preferred',\n                    'use_cases': ['Simple VPC-to-VPC connectivity', 'Low latency requirements']\n                },\n                'transit_gateway': {\n                    'description': 'Central hub for VPC connectivity',\n                    'limitations': 'Regional service, additional cost',\n                    'use_cases': ['Complex multi-VPC architectures', 'Centralized routing']\n                },\n                'vpn_gateway': {\n                    'description': 'IPSec VPN connections',\n                    'limitations': 'Internet-dependent, variable performance',\n                    'use_cases': ['Hybrid connectivity', 'Site-to-site connections']\n                },\n                'direct_connect': {\n                    'description': 'Dedicated network connection',\n                    'limitations': 'Higher cost, setup complexity',\n                    'use_cases': ['High bandwidth requirements', 'Consistent performance']\n                }\n            },\n            'azure': {\n                'vnet_peering': {\n                    'description': 'Direct connection between VNets',\n                    'limitations': 'No transitive routing, address space overlap issues',\n                    'use_cases': ['VNet-to-VNet connectivity', 'Resource sharing']\n                },\n                'virtual_wan': {\n                    'description': 'Global transit network architecture',\n                    'limitations': 'Complex setup, additional cost',\n                    'use_cases': ['Global connectivity', 'SD-WAN integration']\n                },\n                'vpn_gateway': {\n                    'description': 'Site-to-site and point-to-site VPN',\n                    'limitations': 'Internet-dependent, throughput limits',\n                    'use_cases': ['Hybrid connectivity', 'Remote access']\n                },\n                'expressroute': {\n                    'description': 'Private connection to Azure',\n                    'limitations': 'Higher cost, provider dependency',\n                    'use_cases': ['Enterprise connectivity', 'High bandwidth']\n                }\n            },\n            'gcp': {\n                'vpc_peering': {\n                    'description': 'Global VPC network peering',\n                    'limitations': 'Subnet IP range restrictions',\n                    'use_cases': ['Cross-project connectivity', 'Shared services']\n                },\n                'shared_vpc': {\n                    'description': 'Centralized network management',\n                    'limitations': 'Organization-level configuration',\n                    'use_cases': ['Centralized network control', 'Resource sharing']\n                },\n                'cloud_vpn': {\n                    'description': 'IPSec VPN connections',\n                    'limitations': 'Internet-dependent, encryption overhead',\n                    'use_cases': ['Hybrid connectivity', 'Multi-cloud connections']\n                },\n                'cloud_interconnect': {\n                    'description': 'Dedicated connection to GCP',\n                    'limitations': 'Location restrictions, setup complexity',\n                    'use_cases': ['High bandwidth', 'Low latency requirements']\n                }\n            }\n        }\n    \n    def compare_connectivity_options(self):\n        \"\"\"Compare connectivity options across cloud providers\"\"\"\n        print(\"Multi-Cloud Connectivity Options Comparison:\")\n        print(\"=\" * 60)\n        \n        for cloud, options in self.connectivity_options.items():\n            print(f\"\\n{cloud.upper()} Connectivity Options:\")\n            for option_name, details in options.items():\n                print(f\"\\n  {option_name.replace('_', ' ').title()}:\")\n                print(f\"    Description: {details['description']}\")\n                print(f\"    Limitations: {details['limitations']}\")\n                print(f\"    Use Cases: {', '.join(details['use_cases'])}\")\n\n# Usage\nnetworking = MultiCloudNetworking()\nnetworking.compare_connectivity_options()\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Terraform Multi-Cloud Network Implementation:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-hcl",children:'# multi-cloud-network.tf - Terraform configuration for multi-cloud networking\n\n# AWS Provider Configuration\nprovider "aws" {\n  alias  = "us_west"\n  region = "us-west-2"\n}\n\nprovider "aws" {\n  alias  = "us_east"\n  region = "us-east-1"\n}\n\n# Azure Provider Configuration\nprovider "azurerm" {\n  features {}\n}\n\n# GCP Provider Configuration\nprovider "google" {\n  project = var.gcp_project_id\n  region  = "us-central1"\n}\n\n# AWS VPC in US-West-2\nresource "aws_vpc" "main_us_west" {\n  provider             = aws.us_west\n  cidr_block           = "10.1.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = "main-vpc-us-west"\n    Environment = "production"\n    Cloud       = "aws"\n  }\n}\n\n# AWS VPC in US-East-1\nresource "aws_vpc" "main_us_east" {\n  provider             = aws.us_east\n  cidr_block           = "10.2.0.0/16"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = "main-vpc-us-east"\n    Environment = "production"\n    Cloud       = "aws"\n  }\n}\n\n# AWS Transit Gateway for multi-region connectivity\nresource "aws_ec2_transit_gateway" "main" {\n  provider                        = aws.us_west\n  description                     = "Main Transit Gateway"\n  default_route_table_association = "enable"\n  default_route_table_propagation = "enable"\n\n  tags = {\n    Name = "main-tgw"\n  }\n}\n\n# Azure Resource Group\nresource "azurerm_resource_group" "main" {\n  name     = "cloud-engineering-rg"\n  location = "East US"\n\n  tags = {\n    Environment = "production"\n    Cloud       = "azure"\n  }\n}\n\n# Azure Virtual Network\nresource "azurerm_virtual_network" "main" {\n  name                = "main-vnet"\n  address_space       = ["10.3.0.0/16"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = "production"\n    Cloud       = "azure"\n  }\n}\n\n# Azure Subnets\nresource "azurerm_subnet" "public" {\n  name                 = "public-subnet"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = ["10.3.1.0/24"]\n}\n\nresource "azurerm_subnet" "private" {\n  name                 = "private-subnet"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = ["10.3.2.0/24"]\n}\n\n# GCP VPC Network\nresource "google_compute_network" "main" {\n  name                    = "main-vpc"\n  auto_create_subnetworks = false\n  routing_mode           = "GLOBAL"\n}\n\n# GCP Subnets\nresource "google_compute_subnetwork" "public" {\n  name          = "public-subnet"\n  ip_cidr_range = "10.4.1.0/24"\n  region        = "us-central1"\n  network       = google_compute_network.main.id\n\n  secondary_ip_range {\n    range_name    = "pods"\n    ip_cidr_range = "10.4.16.0/20"\n  }\n\n  secondary_ip_range {\n    range_name    = "services"\n    ip_cidr_range = "10.4.32.0/20"\n  }\n}\n\nresource "google_compute_subnetwork" "private" {\n  name          = "private-subnet"\n  ip_cidr_range = "10.4.2.0/24"\n  region        = "us-central1"\n  network       = google_compute_network.main.id\n\n  private_ip_google_access = true\n}\n\n# Cross-cloud VPN connections\nresource "aws_vpn_gateway" "main" {\n  provider = aws.us_west\n  vpc_id   = aws_vpc.main_us_west.id\n\n  tags = {\n    Name = "main-vpn-gateway"\n  }\n}\n\nresource "azurerm_virtual_network_gateway" "main" {\n  name                = "main-vpn-gateway"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  type     = "Vpn"\n  vpn_type = "RouteBased"\n\n  active_active = false\n  enable_bgp    = false\n  sku           = "VpnGw1"\n\n  ip_configuration {\n    name                          = "vnetGatewayConfig"\n    public_ip_address_id          = azurerm_public_ip.vpn_gateway.id\n    private_ip_address_allocation = "Dynamic"\n    subnet_id                     = azurerm_subnet.gateway.id\n  }\n}\n\nresource "azurerm_public_ip" "vpn_gateway" {\n  name                = "vpn-gateway-pip"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  allocation_method   = "Dynamic"\n}\n\nresource "azurerm_subnet" "gateway" {\n  name                 = "GatewaySubnet"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = ["10.3.255.0/27"]\n}\n\n# GCP VPN Gateway\nresource "google_compute_vpn_gateway" "main" {\n  name    = "main-vpn-gateway"\n  network = google_compute_network.main.id\n  region  = "us-central1"\n}\n\n# Network Security Groups and Firewall Rules\nresource "aws_security_group" "web" {\n  provider    = aws.us_west\n  name_prefix = "web-sg"\n  vpc_id      = aws_vpc.main_us_west.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  tags = {\n    Name = "web-security-group"\n  }\n}\n\nresource "azurerm_network_security_group" "web" {\n  name                = "web-nsg"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  security_rule {\n    name                       = "HTTP"\n    priority                   = 1001\n    direction                  = "Inbound"\n    access                     = "Allow"\n    protocol                   = "Tcp"\n    source_port_range          = "*"\n    destination_port_range     = "80"\n    source_address_prefix      = "*"\n    destination_address_prefix = "*"\n  }\n\n  security_rule {\n    name                       = "HTTPS"\n    priority                   = 1002\n    direction                  = "Inbound"\n    access                     = "Allow"\n    protocol                   = "Tcp"\n    source_port_range          = "*"\n    destination_port_range     = "443"\n    source_address_prefix      = "*"\n    destination_address_prefix = "*"\n  }\n\n  tags = {\n    Environment = "production"\n  }\n}\n\nresource "google_compute_firewall" "web" {\n  name    = "web-firewall"\n  network = google_compute_network.main.name\n\n  allow {\n    protocol = "tcp"\n    ports    = ["80", "443"]\n  }\n\n  source_ranges = ["0.0.0.0/0"]\n  target_tags   = ["web-server"]\n}\n\n# Variables\nvariable "gcp_project_id" {\n  description = "GCP Project ID"\n  type        = string\n}\n\n# Outputs\noutput "aws_vpc_id" {\n  value = aws_vpc.main_us_west.id\n}\n\noutput "azure_vnet_id" {\n  value = azurerm_virtual_network.main.id\n}\n\noutput "gcp_network_id" {\n  value = google_compute_network.main.id\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"network-performance-optimization",children:"Network Performance Optimization"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Global Load Balancing and Traffic Management:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Global load balancing configuration across clouds\nimport json\nfrom typing import Dict, List\n\nclass GlobalLoadBalancingConfig:\n    def __init__(self):\n        self.load_balancer_configs = {\n            \'aws_global_accelerator\': {\n                \'service\': \'AWS Global Accelerator\',\n                \'type\': \'Network Layer (Layer 4)\',\n                \'features\': [\n                    \'Anycast IP addresses\',\n                    \'Global traffic distribution\',\n                    \'Health checking and failover\',\n                    \'DDoS protection\',\n                    \'Performance insights\'\n                ],\n                \'routing_policies\': [\n                    \'Performance-based routing\',\n                    \'Geographic routing\',\n                    \'Weighted routing\'\n                ]\n            },\n            \'azure_traffic_manager\': {\n                \'service\': \'Azure Traffic Manager\',\n                \'type\': \'DNS-based (Layer 7)\',\n                \'features\': [\n                    \'DNS-based load balancing\',\n                    \'Global endpoint monitoring\',\n                    \'Automatic failover\',\n                    \'Geographic routing\',\n                    \'Nested profiles\'\n                ],\n                \'routing_policies\': [\n                    \'Performance routing\',\n                    \'Geographic routing\',\n                    \'Priority routing\',\n                    \'Weighted routing\',\n                    \'Multivalue routing\'\n                ]\n            },\n            \'azure_front_door\': {\n                \'service\': \'Azure Front Door\',\n                \'type\': \'Application Layer (Layer 7)\',\n                \'features\': [\n                    \'Global HTTP load balancing\',\n                    \'SSL termination\',\n                    \'Web Application Firewall\',\n                    \'URL-based routing\',\n                    \'Session affinity\'\n                ],\n                \'routing_policies\': [\n                    \'Latency-based routing\',\n                    \'Priority-based routing\',\n                    \'Weighted routing\'\n                ]\n            },\n            \'gcp_global_load_balancer\': {\n                \'service\': \'Google Cloud Load Balancing\',\n                \'type\': \'Global (Layer 4 and 7)\',\n                \'features\': [\n                    \'Global anycast VIPs\',\n                    \'Cross-region load balancing\',\n                    \'Autoscaling integration\',\n                    \'SSL termination\',\n                    \'Cloud CDN integration\'\n                ],\n                \'routing_policies\': [\n                    \'Round robin\',\n                    \'Least connections\',\n                    \'IP hash\',\n                    \'Geographic routing\'\n                ]\n            }\n        }\n    \n    def generate_aws_global_accelerator_config(self, endpoints: List[Dict]) -> str:\n        """Generate AWS Global Accelerator configuration"""\n        config = {\n            "Name": "GlobalWebApp",\n            "IpAddressType": "IPV4",\n            "Enabled": True,\n            "Attributes": {\n                "FlowLogsEnabled": True,\n                "FlowLogsS3Bucket": "global-accelerator-flow-logs",\n                "FlowLogsS3Prefix": "flow-logs/"\n            },\n            "Listeners": [\n                {\n                    "Protocol": "TCP",\n                    "PortRanges": [\n                        {"From": 80, "To": 80},\n                        {"From": 443, "To": 443}\n                    ],\n                    "ClientAffinity": "SOURCE_IP",\n                    "EndpointGroups": []\n                }\n            ]\n        }\n        \n        for endpoint in endpoints:\n            endpoint_group = {\n                "EndpointGroupRegion": endpoint["region"],\n                "TrafficDialPercentage": endpoint.get("traffic_percentage", 100),\n                "HealthCheckIntervalSeconds": 30,\n                "HealthCheckPath": "/health",\n                "Endpoints": [\n                    {\n                        "EndpointId": endpoint["endpoint_id"],\n                        "Weight": endpoint.get("weight", 100)\n                    }\n                ]\n            }\n            config["Listeners"][0]["EndpointGroups"].append(endpoint_group)\n        \n        return json.dumps(config, indent=2)\n    \n    def generate_azure_traffic_manager_config(self, endpoints: List[Dict]) -> str:\n        """Generate Azure Traffic Manager configuration"""\n        config = {\n            "type": "Microsoft.Network/trafficmanagerprofiles",\n            "apiVersion": "2018-08-01",\n            "name": "global-web-app-tm",\n            "location": "global",\n            "properties": {\n                "profileStatus": "Enabled",\n                "trafficRoutingMethod": "Performance",\n                "dnsConfig": {\n                    "relativeName": "global-web-app",\n                    "ttl": 60\n                },\n                "monitorConfig": {\n                    "protocol": "HTTPS",\n                    "port": 443,\n                    "path": "/health",\n                    "intervalInSeconds": 30,\n                    "timeoutInSeconds": 10,\n                    "toleratedNumberOfFailures": 3\n                },\n                "endpoints": []\n            }\n        }\n        \n        for i, endpoint in enumerate(endpoints):\n            endpoint_config = {\n                "name": f"endpoint-{i+1}",\n                "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",\n                "properties": {\n                    "endpointStatus": "Enabled",\n                    "targetResourceId": endpoint["resource_id"],\n                    "weight": endpoint.get("weight", 100),\n                    "priority": endpoint.get("priority", i+1),\n                    "endpointLocation": endpoint["location"]\n                }\n            }\n            config["properties"]["endpoints"].append(endpoint_config)\n        \n        return json.dumps(config, indent=2)\n    \n    def generate_gcp_global_lb_config(self, backends: List[Dict]) -> str:\n        """Generate GCP Global Load Balancer configuration"""\n        config = {\n            "name": "global-web-app-lb",\n            "description": "Global load balancer for web application",\n            "urlMap": {\n                "name": "global-web-app-url-map",\n                "defaultService": "global-web-app-backend-service",\n                "hostRules": [\n                    {\n                        "hosts": ["example.com", "www.example.com"],\n                        "pathMatcher": "path-matcher-1"\n                    }\n                ],\n                "pathMatchers": [\n                    {\n                        "name": "path-matcher-1",\n                        "defaultService": "global-web-app-backend-service",\n                        "pathRules": [\n                            {\n                                "paths": ["/api/*"],\n                                "service": "api-backend-service"\n                            }\n                        ]\n                    }\n                ]\n            },\n            "backendService": {\n                "name": "global-web-app-backend-service",\n                "protocol": "HTTP",\n                "timeoutSec": 30,\n                "healthChecks": ["global-web-app-health-check"],\n                "backends": []\n            },\n            "healthCheck": {\n                "name": "global-web-app-health-check",\n                "type": "HTTP",\n                "httpHealthCheck": {\n                    "port": 80,\n                    "requestPath": "/health",\n                    "checkIntervalSec": 30,\n                    "timeoutSec": 10,\n                    "unhealthyThreshold": 3,\n                    "healthyThreshold": 2\n                }\n            }\n        }\n        \n        for backend in backends:\n            backend_config = {\n                "group": backend["instance_group"],\n                "balancingMode": "UTILIZATION",\n                "maxUtilization": 0.8,\n                "capacityScaler": backend.get("capacity_scaler", 1.0)\n            }\n            config["backendService"]["backends"].append(backend_config)\n        \n        return json.dumps(config, indent=2)\n    \n    def compare_global_load_balancing(self):\n        """Compare global load balancing options"""\n        print("Global Load Balancing Comparison:")\n        print("=" * 50)\n        \n        for lb_type, config in self.load_balancer_configs.items():\n            print(f"\\n{config[\'service\']} ({lb_type.upper()}):")\n            print(f"  Type: {config[\'type\']}")\n            print("  Features:")\n            for feature in config[\'features\']:\n                print(f"    - {feature}")\n            print("  Routing Policies:")\n            for policy in config[\'routing_policies\']:\n                print(f"    - {policy}")\n\n# Usage example\nglobal_lb = GlobalLoadBalancingConfig()\nglobal_lb.compare_global_load_balancing()\n\n# Generate sample configurations\naws_endpoints = [\n    {"region": "us-west-2", "endpoint_id": "arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-lb/50dc6c495c0c9188", "traffic_percentage": 70},\n    {"region": "us-east-1", "endpoint_id": "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-lb/50dc6c495c0c9188", "traffic_percentage": 30}\n]\n\nprint("\\nAWS Global Accelerator Configuration:")\nprint(global_lb.generate_aws_global_accelerator_config(aws_endpoints))\n'})}),"\n",(0,i.jsx)(e.h3,{id:"free-resources",children:"Free Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.aws.amazon.com/vpc/",children:"AWS VPC Documentation"})," - Complete VPC networking guide"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/azure/virtual-network/",children:"Azure Virtual Network Documentation"})," - Azure networking fundamentals"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/vpc/docs",children:"Google Cloud VPC Documentation"})," - GCP networking concepts"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://registry.terraform.io/browse/modules",children:"Terraform Multi-Cloud Examples"})," - Infrastructure as Code templates"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"2-infrastructure-as-code-iac-mastery",children:"2. Infrastructure as Code (IaC) Mastery"}),"\n",(0,i.jsx)(e.h3,{id:"advanced-terraform-patterns",children:"Advanced Terraform Patterns"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Multi-Cloud Terraform Modules:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-hcl",children:'# modules/multi-cloud-web-app/main.tf\n# Reusable module for deploying web applications across clouds\n\nvariable "cloud_provider" {\n  description = "Cloud provider (aws, azure, gcp)"\n  type        = string\n  validation {\n    condition     = contains(["aws", "azure", "gcp"], var.cloud_provider)\n    error_message = "Cloud provider must be aws, azure, or gcp."\n  }\n}\n\nvariable "environment" {\n  description = "Environment name"\n  type        = string\n}\n\nvariable "application_name" {\n  description = "Application name"\n  type        = string\n}\n\nvariable "instance_count" {\n  description = "Number of instances"\n  type        = number\n  default     = 2\n}\n\nvariable "instance_type" {\n  description = "Instance type/size"\n  type        = string\n  default     = "small"\n}\n\n# Local values for cloud-specific configurations\nlocals {\n  instance_types = {\n    aws = {\n      small  = "t3.micro"\n      medium = "t3.small"\n      large  = "t3.medium"\n    }\n    azure = {\n      small  = "Standard_B1s"\n      medium = "Standard_B2s"\n      large  = "Standard_B4ms"\n    }\n    gcp = {\n      small  = "e2-micro"\n      medium = "e2-small"\n      large  = "e2-medium"\n    }\n  }\n  \n  common_tags = {\n    Environment   = var.environment\n    Application   = var.application_name\n    ManagedBy     = "terraform"\n    CloudProvider = var.cloud_provider\n  }\n}\n\n# AWS Resources\nresource "aws_instance" "web" {\n  count         = var.cloud_provider == "aws" ? var.instance_count : 0\n  ami           = data.aws_ami.ubuntu[0].id\n  instance_type = local.instance_types.aws[var.instance_type]\n  \n  vpc_security_group_ids = [aws_security_group.web[0].id]\n  subnet_id              = data.aws_subnets.public[0].ids[count.index % length(data.aws_subnets.public[0].ids)]\n  \n  user_data = base64encode(templatefile("${path.module}/scripts/user_data.sh", {\n    application_name = var.application_name\n  }))\n  \n  tags = merge(local.common_tags, {\n    Name = "${var.application_name}-web-${count.index + 1}"\n  })\n}\n\nresource "aws_security_group" "web" {\n  count       = var.cloud_provider == "aws" ? 1 : 0\n  name_prefix = "${var.application_name}-web-"\n  vpc_id      = data.aws_vpc.default[0].id\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n  \n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n  \n  tags = merge(local.common_tags, {\n    Name = "${var.application_name}-web-sg"\n  })\n}\n\n# Azure Resources\nresource "azurerm_linux_virtual_machine" "web" {\n  count               = var.cloud_provider == "azure" ? var.instance_count : 0\n  name                = "${var.application_name}-web-${count.index + 1}"\n  resource_group_name = data.azurerm_resource_group.main[0].name\n  location            = data.azurerm_resource_group.main[0].location\n  size                = local.instance_types.azure[var.instance_type]\n  \n  disable_password_authentication = true\n  \n  network_interface_ids = [azurerm_network_interface.web[count.index].id]\n  \n  os_disk {\n    caching              = "ReadWrite"\n    storage_account_type = "Standard_LRS"\n  }\n  \n  source_image_reference {\n    publisher = "Canonical"\n    offer     = "0001-com-ubuntu-server-focal"\n    sku       = "20_04-lts-gen2"\n    version   = "latest"\n  }\n  \n  admin_username = "azureuser"\n  \n  admin_ssh_key {\n    username   = "azureuser"\n    public_key = file("~/.ssh/id_rsa.pub")\n  }\n  \n  custom_data = base64encode(templatefile("${path.module}/scripts/user_data.sh", {\n    application_name = var.application_name\n  }))\n  \n  tags = local.common_tags\n}\n\nresource "azurerm_network_interface" "web" {\n  count               = var.cloud_provider == "azure" ? var.instance_count : 0\n  name                = "${var.application_name}-web-nic-${count.index + 1}"\n  location            = data.azurerm_resource_group.main[0].location\n  resource_group_name = data.azurerm_resource_group.main[0].name\n  \n  ip_configuration {\n    name                          = "internal"\n    subnet_id                     = data.azurerm_subnet.public[0].id\n    private_ip_address_allocation = "Dynamic"\n    public_ip_address_id          = azurerm_public_ip.web[count.index].id\n  }\n  \n  tags = local.common_tags\n}\n\nresource "azurerm_public_ip" "web" {\n  count               = var.cloud_provider == "azure" ? var.instance_count : 0\n  name                = "${var.application_name}-web-pip-${count.index + 1}"\n  resource_group_name = data.azurerm_resource_group.main[0].name\n  location            = data.azurerm_resource_group.main[0].location\n  allocation_method   = "Static"\n  \n  tags = local.common_tags\n}\n\n# GCP Resources\nresource "google_compute_instance" "web" {\n  count        = var.cloud_provider == "gcp" ? var.instance_count : 0\n  name         = "${var.application_name}-web-${count.index + 1}"\n  machine_type = local.instance_types.gcp[var.instance_type]\n  zone         = data.google_compute_zones.available[0].names[count.index % length(data.google_compute_zones.available[0].names)]\n  \n  boot_disk {\n    initialize_params {\n      image = data.google_compute_image.ubuntu[0].self_link\n    }\n  }\n  \n  network_interface {\n    network    = data.google_compute_network.default[0].self_link\n    subnetwork = data.google_compute_subnetwork.default[0].self_link\n    \n    access_config {\n      // Ephemeral public IP\n    }\n  }\n  \n  metadata_startup_script = templatefile("${path.module}/scripts/user_data.sh", {\n    application_name = var.application_name\n  })\n  \n  tags = ["web-server", var.environment]\n  \n  labels = {\n    environment   = var.environment\n    application   = var.application_name\n    managed_by    = "terraform"\n    cloud_provider = var.cloud_provider\n  }\n}\n\n# Data sources for each cloud provider\ndata "aws_vpc" "default" {\n  count   = var.cloud_provider == "aws" ? 1 : 0\n  default = true\n}\n\ndata "aws_subnets" "public" {\n  count = var.cloud_provider == "aws" ? 1 : 0\n  filter {\n    name   = "vpc-id"\n    values = [data.aws_vpc.default[0].id]\n  }\n}\n\ndata "aws_ami" "ubuntu" {\n  count       = var.cloud_provider == "aws" ? 1 : 0\n  most_recent = true\n  owners      = ["099720109477"] # Canonical\n  \n  filter {\n    name   = "name"\n    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]\n  }\n}\n\ndata "azurerm_resource_group" "main" {\n  count = var.cloud_provider == "azure" ? 1 : 0\n  name  = "cloud-engineering-rg"\n}\n\ndata "azurerm_subnet" "public" {\n  count                = var.cloud_provider == "azure" ? 1 : 0\n  name                 = "public-subnet"\n  virtual_network_name = "main-vnet"\n  resource_group_name  = data.azurerm_resource_group.main[0].name\n}\n\ndata "google_compute_network" "default" {\n  count = var.cloud_provider == "gcp" ? 1 : 0\n  name  = "default"\n}\n\ndata "google_compute_subnetwork" "default" {\n  count  = var.cloud_provider == "gcp" ? 1 : 0\n  name   = "default"\n  region = "us-central1"\n}\n\ndata "google_compute_image" "ubuntu" {\n  count   = var.cloud_provider == "gcp" ? 1 : 0\n  family  = "ubuntu-2004-lts"\n  project = "ubuntu-os-cloud"\n}\n\ndata "google_compute_zones" "available" {\n  count  = var.cloud_provider == "gcp" ? 1 : 0\n  region = "us-central1"\n}\n\n# Outputs\noutput "instance_ips" {\n  description = "Public IP addresses of web instances"\n  value = var.cloud_provider == "aws" ? aws_instance.web[*].public_ip : (\n    var.cloud_provider == "azure" ? azurerm_public_ip.web[*].ip_address : \n    google_compute_instance.web[*].network_interface.0.access_config.0.nat_ip\n  )\n}\n\noutput "instance_ids" {\n  description = "Instance IDs"\n  value = var.cloud_provider == "aws" ? aws_instance.web[*].id : (\n    var.cloud_provider == "azure" ? azurerm_linux_virtual_machine.web[*].id : \n    google_compute_instance.web[*].id\n  )\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Terraform Workspace Management:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# terraform-multi-cloud-deploy.sh - Deploy to multiple clouds with workspaces\n\nset -euo pipefail\n\n# Configuration\nENVIRONMENTS=("dev" "staging" "production")\nCLOUDS=("aws" "azure" "gcp")\nTERRAFORM_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"\n\n# Colors for output\nRED=\'\\033[0;31m\'\nGREEN=\'\\033[0;32m\'\nYELLOW=\'\\033[1;33m\'\nBLUE=\'\\033[0;34m\'\nNC=\'\\033[0m\' # No Color\n\nlog() {\n    echo -e "${GREEN}[$(date +\'%Y-%m-%d %H:%M:%S\')] $1${NC}"\n}\n\nwarn() {\n    echo -e "${YELLOW}[$(date +\'%Y-%m-%d %H:%M:%S\')] WARNING: $1${NC}"\n}\n\nerror() {\n    echo -e "${RED}[$(date +\'%Y-%m-%d %H:%M:%S\')] ERROR: $1${NC}"\n    exit 1\n}\n\ninfo() {\n    echo -e "${BLUE}[$(date +\'%Y-%m-%d %H:%M:%S\')] INFO: $1${NC}"\n}\n\ncheck_prerequisites() {\n    log "Checking prerequisites..."\n    \n    # Check if terraform is installed\n    if ! command -v terraform &> /dev/null; then\n        error "Terraform is not installed"\n    fi\n    \n    # Check cloud CLI tools\n    if ! command -v aws &> /dev/null; then\n        warn "AWS CLI is not installed"\n    fi\n    \n    if ! command -v az &> /dev/null; then\n        warn "Azure CLI is not installed"\n    fi\n    \n    if ! command -v gcloud &> /dev/null; then\n        warn "Google Cloud SDK is not installed"\n    fi\n    \n    log "Prerequisites check completed"\n}\n\ninit_terraform() {\n    local environment=$1\n    local cloud=$2\n    local workspace_name="${environment}-${cloud}"\n    \n    log "Initializing Terraform for workspace: $workspace_name"\n    \n    cd "$TERRAFORM_DIR"\n    \n    # Initialize terraform\n    terraform init -reconfigure\n    \n    # Create or select workspace\n    if terraform workspace list | grep -q "$workspace_name"; then\n        terraform workspace select "$workspace_name"\n    else\n        terraform workspace new "$workspace_name"\n    fi\n    \n    log "Terraform initialized for workspace: $workspace_name"\n}\n\nplan_infrastructure() {\n    local environment=$1\n    local cloud=$2\n    local workspace_name="${environment}-${cloud}"\n    \n    log "Planning infrastructure for workspace: $workspace_name"\n    \n    cd "$TERRAFORM_DIR"\n    terraform workspace select "$workspace_name"\n    \n    # Generate plan\n    terraform plan \\\n        -var="environment=$environment" \\\n        -var="cloud_provider=$cloud" \\\n        -var-file="environments/${environment}.tfvars" \\\n        -out="${workspace_name}.tfplan"\n    \n    log "Plan generated for workspace: $workspace_name"\n}\n\napply_infrastructure() {\n    local environment=$1\n    local cloud=$2\n    local workspace_name="${environment}-${cloud}"\n    \n    log "Applying infrastructure for workspace: $workspace_name"\n    \n    cd "$TERRAFORM_DIR"\n    terraform workspace select "$workspace_name"\n    \n    # Apply the plan\n    if [[ -f "${workspace_name}.tfplan" ]]; then\n        terraform apply "${workspace_name}.tfplan"\n        rm "${workspace_name}.tfplan"\n    else\n        warn "No plan file found, running apply with auto-approve"\n        terraform apply \\\n            -var="environment=$environment" \\\n            -var="cloud_provider=$cloud" \\\n            -var-file="environments/${environment}.tfvars" \\\n            -auto-approve\n    fi\n    \n    log "Infrastructure applied for workspace: $workspace_name"\n}\n\ndestroy_infrastructure() {\n    local environment=$1\n    local cloud=$2\n    local workspace_name="${environment}-${cloud}"\n    \n    if [[ "$environment" == "production" ]]; then\n        error "Cannot destroy production environment with this script"\n    fi\n    \n    warn "This will destroy all infrastructure in workspace: $workspace_name"\n    read -p "Are you sure? Type \'yes\' to confirm: " confirmation\n    \n    if [[ "$confirmation" != "yes" ]]; then\n        log "Destruction cancelled"\n        return\n    fi\n    \n    log "Destroying infrastructure for workspace: $workspace_name"\n    \n    cd "$TERRAFORM_DIR"\n    terraform workspace select "$workspace_name"\n    \n    terraform destroy \\\n        -var="environment=$environment" \\\n        -var="cloud_provider=$cloud" \\\n        -var-file="environments/${environment}.tfvars" \\\n        -auto-approve\n    \n    log "Infrastructure destroyed for workspace: $workspace_name"\n}\n\ndeploy_multi_cloud() {\n    local environment=$1\n    \n    log "Starting multi-cloud deployment for environment: $environment"\n    \n    for cloud in "${CLOUDS[@]}"; do\n        info "Deploying to $cloud..."\n        init_terraform "$environment" "$cloud"\n        plan_infrastructure "$environment" "$cloud"\n        apply_infrastructure "$environment" "$cloud"\n    done\n    \n    log "Multi-cloud deployment completed for environment: $environment"\n}\n\nshow_status() {\n    log "Terraform workspace status:"\n    \n    cd "$TERRAFORM_DIR"\n    terraform workspace list\n    \n    echo\n    log "Current workspace resources:"\n    terraform show -json | jq -r \'.values.root_module.resources[]? | "\\(.type): \\(.name)"\' 2>/dev/null || echo "No resources found"\n}\n\nshow_usage() {\n    cat << EOF\nUsage: $0 <command> [environment] [cloud]\n\nCommands:\n    init <env> <cloud>      Initialize Terraform for specific environment and cloud\n    plan <env> <cloud>      Generate execution plan\n    apply <env> <cloud>     Apply infrastructure changes\n    destroy <env> <cloud>   Destroy infrastructure (not allowed for production)\n    deploy-multi <env>      Deploy to all clouds for environment\n    status                  Show workspace status\n    \nEnvironments: ${ENVIRONMENTS[*]}\nClouds: ${CLOUDS[*]}\n\nExamples:\n    $0 init dev aws\n    $0 plan staging azure\n    $0 apply production gcp\n    $0 deploy-multi dev\n    $0 status\nEOF\n}\n\nmain() {\n    if [[ $# -lt 1 ]]; then\n        show_usage\n        exit 1\n    fi\n    \n    local command=$1\n    \n    check_prerequisites\n    \n    case $command in\n        init)\n            if [[ $# -ne 3 ]]; then\n                error "Usage: $0 init <environment> <cloud>"\n            fi\n            init_terraform "$2" "$3"\n            ;;\n        plan)\n            if [[ $# -ne 3 ]]; then\n                error "Usage: $0 plan <environment> <cloud>"\n            fi\n            init_terraform "$2" "$3"\n            plan_infrastructure "$2" "$3"\n            ;;\n        apply)\n            if [[ $# -ne 3 ]]; then\n                error "Usage: $0 apply <environment> <cloud>"\n            fi\n            init_terraform "$2" "$3"\n            apply_infrastructure "$2" "$3"\n            ;;\n        destroy)\n            if [[ $# -ne 3 ]]; then\n                error "Usage: $0 destroy <environment> <cloud>"\n            fi\n            init_terraform "$2" "$3"\n            destroy_infrastructure "$2" "$3"\n            ;;\n        deploy-multi)\n            if [[ $# -ne 2 ]]; then\n                error "Usage: $0 deploy-multi <environment>"\n            fi\n            deploy_multi_cloud "$2"\n            ;;\n        status)\n            show_status\n            ;;\n        *)\n            error "Unknown command: $command"\n            ;;\n    esac\n}\n\nmain "$@"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"free-resources-1",children:"Free Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.terraform.io/docs",children:"Terraform Documentation"})," - Complete Terraform reference"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://registry.terraform.io/",children:"Terraform Registry"})," - Pre-built modules and providers"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://aws.amazon.com/cloudformation/templates/",children:"AWS CloudFormation Templates"})," - AWS infrastructure templates"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/",children:"Azure Resource Manager Templates"})," - Azure ARM templates"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"3-high-availability-and-disaster-recovery",children:"3. High Availability and Disaster Recovery"}),"\n",(0,i.jsx)(e.h3,{id:"multi-region-deployment-strategies",children:"Multi-Region Deployment Strategies"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Disaster Recovery Planning:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# Disaster recovery planning and implementation across clouds\nimport json\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\n\nclass DisasterRecoveryPlanner:\n    def __init__(self):\n        self.recovery_strategies = {\n            'backup_restore': {\n                'rto': '4-24 hours',\n                'rpo': '1-24 hours',\n                'cost': 'Low',\n                'complexity': 'Low',\n                'description': 'Restore from backups in alternate region'\n            },\n            'pilot_light': {\n                'rto': '1-4 hours',\n                'rpo': '15 minutes - 1 hour',\n                'cost': 'Medium',\n                'complexity': 'Medium',\n                'description': 'Minimal infrastructure running in DR region'\n            },\n            'warm_standby': {\n                'rto': '15 minutes - 1 hour',\n                'rpo': '5-15 minutes',\n                'cost': 'High',\n                'complexity': 'High',\n                'description': 'Scaled-down version running in DR region'\n            },\n            'hot_standby': {\n                'rto': '0-15 minutes',\n                'rpo': '0-5 minutes',\n                'cost': 'Very High',\n                'complexity': 'Very High',\n                'description': 'Full duplicate environment with real-time sync'\n            }\n        }\n    \n    def calculate_business_impact(self, \n                                 annual_revenue: float, \n                                 downtime_hours: float,\n                                 recovery_costs: float) -> Dict:\n        \"\"\"Calculate business impact of downtime\"\"\"\n        hourly_revenue = annual_revenue / (365 * 24)\n        revenue_loss = hourly_revenue * downtime_hours\n        total_impact = revenue_loss + recovery_costs\n        \n        return {\n            'hourly_revenue': hourly_revenue,\n            'revenue_loss': revenue_loss,\n            'recovery_costs': recovery_costs,\n            'total_impact': total_impact,\n            'impact_percentage': (total_impact / annual_revenue) * 100\n        }\n    \n    def recommend_dr_strategy(self, \n                            business_criticality: str,\n                            budget_constraint: str,\n                            technical_complexity: str) -> str:\n        \"\"\"Recommend DR strategy based on requirements\"\"\"\n        \n        # Define scoring matrix\n        strategy_scores = {\n            'backup_restore': 0,\n            'pilot_light': 0,\n            'warm_standby': 0,\n            'hot_standby': 0\n        }\n        \n        # Business criticality scoring\n        if business_criticality == 'critical':\n            strategy_scores['hot_standby'] += 3\n            strategy_scores['warm_standby'] += 2\n            strategy_scores['pilot_light'] += 1\n        elif business_criticality == 'high':\n            strategy_scores['warm_standby'] += 3\n            strategy_scores['pilot_light'] += 2\n            strategy_scores['hot_standby'] += 1\n        elif business_criticality == 'medium':\n            strategy_scores['pilot_light'] += 3\n            strategy_scores['warm_standby'] += 2\n            strategy_scores['backup_restore'] += 1\n        else:  # low\n            strategy_scores['backup_restore'] += 3\n            strategy_scores['pilot_light'] += 1\n        \n        # Budget constraint scoring\n        if budget_constraint == 'unlimited':\n            strategy_scores['hot_standby'] += 2\n            strategy_scores['warm_standby'] += 1\n        elif budget_constraint == 'high':\n            strategy_scores['warm_standby'] += 2\n            strategy_scores['pilot_light'] += 1\n        elif budget_constraint == 'medium':\n            strategy_scores['pilot_light'] += 2\n            strategy_scores['backup_restore'] += 1\n        else:  # low\n            strategy_scores['backup_restore'] += 2\n        \n        # Technical complexity scoring\n        if technical_complexity == 'high':\n            strategy_scores['hot_standby'] += 2\n            strategy_scores['warm_standby'] += 1\n        elif technical_complexity == 'medium':\n            strategy_scores['warm_standby'] += 2\n            strategy_scores['pilot_light'] += 1\n        else:  # low\n            strategy_scores['pilot_light'] += 1\n            strategy_scores['backup_restore'] += 2\n        \n        # Find best strategy\n        best_strategy = max(strategy_scores, key=strategy_scores.get)\n        return best_strategy\n    \n    def generate_dr_plan(self, \n                        application_name: str,\n                        primary_region: str,\n                        dr_region: str,\n                        strategy: str) -> Dict:\n        \"\"\"Generate comprehensive DR plan\"\"\"\n        \n        plan = {\n            'application': application_name,\n            'primary_region': primary_region,\n            'dr_region': dr_region,\n            'strategy': strategy,\n            'strategy_details': self.recovery_strategies[strategy],\n            'implementation_steps': [],\n            'testing_schedule': {},\n            'roles_responsibilities': {},\n            'communication_plan': {},\n            'recovery_procedures': {}\n        }\n        \n        # Implementation steps based on strategy\n        if strategy == 'backup_restore':\n            plan['implementation_steps'] = [\n                'Set up automated backups in primary region',\n                'Configure cross-region backup replication',\n                'Create infrastructure templates for DR region',\n                'Document restoration procedures',\n                'Set up monitoring and alerting'\n            ]\n        elif strategy == 'pilot_light':\n            plan['implementation_steps'] = [\n                'Deploy minimal infrastructure in DR region',\n                'Set up data replication to DR region',\n                'Create auto-scaling configurations',\n                'Configure DNS failover',\n                'Implement health checks and monitoring'\n            ]\n        elif strategy == 'warm_standby':\n            plan['implementation_steps'] = [\n                'Deploy scaled-down infrastructure in DR region',\n                'Configure real-time data synchronization',\n                'Set up load balancer with health checks',\n                'Implement automated failover procedures',\n                'Configure monitoring and alerting'\n            ]\n        elif strategy == 'hot_standby':\n            plan['implementation_steps'] = [\n                'Deploy full infrastructure in DR region',\n                'Configure active-active data replication',\n                'Set up global load balancing',\n                'Implement automatic failover',\n                'Configure comprehensive monitoring'\n            ]\n        \n        # Testing schedule\n        plan['testing_schedule'] = {\n            'backup_testing': 'Monthly',\n            'failover_testing': 'Quarterly',\n            'full_dr_drill': 'Semi-annually',\n            'communication_test': 'Monthly'\n        }\n        \n        # Roles and responsibilities\n        plan['roles_responsibilities'] = {\n            'incident_commander': 'Senior Operations Manager',\n            'technical_lead': 'Principal Cloud Engineer',\n            'communication_lead': 'IT Manager',\n            'business_stakeholder': 'Product Owner',\n            'external_vendors': 'Cloud Provider Support'\n        }\n        \n        return plan\n    \n    def generate_aws_dr_config(self, primary_region: str, dr_region: str) -> str:\n        \"\"\"Generate AWS-specific DR configuration\"\"\"\n        config = {\n            'primary_region': primary_region,\n            'dr_region': dr_region,\n            'services': {\n                'rds': {\n                    'cross_region_backup': True,\n                    'read_replica': True,\n                    'automated_backup_retention': 7\n                },\n                's3': {\n                    'cross_region_replication': True,\n                    'versioning': True,\n                    'lifecycle_policies': True\n                },\n                'ec2': {\n                    'ami_copying': True,\n                    'snapshot_copying': True,\n                    'launch_templates': True\n                },\n                'route53': {\n                    'health_checks': True,\n                    'failover_routing': True,\n                    'dns_failover': True\n                }\n            },\n            'automation': {\n                'lambda_functions': [\n                    'automated-failover',\n                    'health-monitoring',\n                    'backup-verification'\n                ],\n                'cloudformation_templates': [\n                    'dr-infrastructure',\n                    'networking-setup',\n                    'security-groups'\n                ]\n            }\n        }\n        return json.dumps(config, indent=2)\n    \n    def compare_dr_strategies(self):\n        \"\"\"Compare disaster recovery strategies\"\"\"\n        print(\"Disaster Recovery Strategies Comparison:\")\n        print(\"=\" * 60)\n        \n        for strategy, details in self.recovery_strategies.items():\n            print(f\"\\n{strategy.replace('_', ' ').title()}:\")\n            print(f\"  RTO: {details['rto']}\")\n            print(f\"  RPO: {details['rpo']}\")\n            print(f\"  Cost: {details['cost']}\")\n            print(f\"  Complexity: {details['complexity']}\")\n            print(f\"  Description: {details['description']}\")\n\n# Usage example\ndr_planner = DisasterRecoveryPlanner()\n\n# Compare strategies\ndr_planner.compare_dr_strategies()\n\n# Calculate business impact\nbusiness_impact = dr_planner.calculate_business_impact(\n    annual_revenue=10000000,  # $10M annual revenue\n    downtime_hours=4,         # 4 hours downtime\n    recovery_costs=50000      # $50K recovery costs\n)\n\nprint(f\"\\nBusiness Impact Analysis:\")\nprint(f\"Hourly Revenue: ${business_impact['hourly_revenue']:,.2f}\")\nprint(f\"Revenue Loss: ${business_impact['revenue_loss']:,.2f}\")\nprint(f\"Total Impact: ${business_impact['total_impact']:,.2f}\")\nprint(f\"Impact Percentage: {business_impact['impact_percentage']:.2f}%\")\n\n# Get DR strategy recommendation\nrecommended_strategy = dr_planner.recommend_dr_strategy(\n    business_criticality='high',\n    budget_constraint='medium',\n    technical_complexity='medium'\n)\n\nprint(f\"\\nRecommended DR Strategy: {recommended_strategy.replace('_', ' ').title()}\")\n\n# Generate DR plan\ndr_plan = dr_planner.generate_dr_plan(\n    application_name='E-commerce Platform',\n    primary_region='us-west-2',\n    dr_region='us-east-1',\n    strategy=recommended_strategy\n)\n\nprint(f\"\\nDR Plan Implementation Steps:\")\nfor i, step in enumerate(dr_plan['implementation_steps'], 1):\n    print(f\"  {i}. {step}\")\n"})}),"\n",(0,i.jsx)(e.h3,{id:"free-resources-2",children:"Free Resources"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://aws.amazon.com/disaster-recovery/",children:"AWS Disaster Recovery"})," - AWS DR strategies and services"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/azure/site-recovery/",children:"Azure Site Recovery"})," - Azure disaster recovery solutions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/architecture/disaster-recovery",children:"Google Cloud Disaster Recovery"})," - GCP DR planning guide"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/architecture/disaster-recovery-planning-guide",children:"Multi-Cloud DR Best Practices"})," - Cross-cloud DR strategies"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"hands-on-exercises",children:"Hands-On Exercises"}),"\n",(0,i.jsx)(e.h3,{id:"exercise-1-multi-cloud-network-architecture",children:"Exercise 1: Multi-Cloud Network Architecture"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Task:"})," Design and implement a global network architecture spanning AWS, Azure, and GCP."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Requirements:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"VPC/VNet setup in each cloud with proper CIDR planning"}),"\n",(0,i.jsx)(e.li,{children:"Cross-cloud connectivity using VPN or dedicated connections"}),"\n",(0,i.jsx)(e.li,{children:"Global load balancing and traffic management"}),"\n",(0,i.jsx)(e.li,{children:"Network security implementation with firewalls and security groups"}),"\n",(0,i.jsx)(e.li,{children:"Performance monitoring and optimization"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"exercise-2-infrastructure-as-code-multi-cloud-deployment",children:"Exercise 2: Infrastructure as Code Multi-Cloud Deployment"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Task:"})," Create reusable Terraform modules for multi-cloud application deployment."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Requirements:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Develop cloud-agnostic Terraform modules"}),"\n",(0,i.jsx)(e.li,{children:"Implement proper variable management and outputs"}),"\n",(0,i.jsx)(e.li,{children:"Create environment-specific configurations"}),"\n",(0,i.jsx)(e.li,{children:"Set up automated testing and validation"}),"\n",(0,i.jsx)(e.li,{children:"Document module usage and best practices"}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"exercise-3-disaster-recovery-implementation",children:"Exercise 3: Disaster Recovery Implementation"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Task:"})," Implement a comprehensive disaster recovery solution."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Requirements:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Choose appropriate DR strategy based on business requirements"}),"\n",(0,i.jsx)(e.li,{children:"Set up cross-region data replication and backup"}),"\n",(0,i.jsx)(e.li,{children:"Implement automated failover mechanisms"}),"\n",(0,i.jsx)(e.li,{children:"Create DR testing and validation procedures"}),"\n",(0,i.jsx)(e.li,{children:"Document recovery procedures and runbooks"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"assessment-questions",children:"Assessment Questions"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Design a multi-cloud network architecture that provides high availability and optimal performance for a global application."})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Compare different Infrastructure as Code tools and recommend the best approach for a multi-cloud environment."})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Develop a comprehensive disaster recovery strategy that balances cost, complexity, and business requirements."})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Implement network security controls that work consistently across AWS, Azure, and GCP."})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Design a global load balancing solution that can handle traffic distribution across multiple cloud providers."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(e.p,{children:"After completing this module:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Build complex multi-cloud architectures"})," using advanced networking patterns"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Master Infrastructure as Code"})," with Terraform and cloud-native tools"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Implement disaster recovery solutions"})," for critical applications"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Move to Module 3: Cloud Security and Compliance"})," to learn advanced security practices"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsx)(e.h3,{id:"advanced-networking",children:"Advanced Networking"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://aws.amazon.com/products/networking/",children:"AWS Advanced Networking"})," - AWS networking services"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/azure/networking/",children:"Azure Networking Documentation"})," - Azure networking fundamentals"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/products/networking",children:"Google Cloud Networking"})," - GCP networking solutions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/architecture/networking",children:"Multi-Cloud Networking Patterns"})," - Architecture patterns"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"infrastructure-as-code",children:"Infrastructure as Code"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html",children:"Terraform Best Practices"})," - Terraform optimization"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.aws.amazon.com/cdk/",children:"AWS CDK Documentation"})," - AWS Cloud Development Kit"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/",children:"Azure Bicep"})," - Azure infrastructure language"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"https://cloud.google.com/deployment-manager/docs",children:"Google Cloud Deployment Manager"})," - GCP infrastructure automation"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Ready to secure your multi-cloud infrastructure? Continue to ",(0,i.jsx)(e.strong,{children:"Module 3: Cloud Security and Compliance"})," to master advanced security practices!"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>s});var t=r(6540);const i={},a=t.createContext(i);function o(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);