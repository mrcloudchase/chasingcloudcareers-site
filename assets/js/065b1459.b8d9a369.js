"use strict";(self.webpackChunkchasingcloudcareers=self.webpackChunkchasingcloudcareers||[]).push([[8649],{956:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"cloud-engineering/container-orchestration","title":"Container Orchestration","description":"Master containerization with Docker and orchestration with Kubernetes to build, deploy, and manage modern cloud-native applications.","source":"@site/docs/cloud-engineering/04-container-orchestration.md","sourceDirName":"cloud-engineering","slug":"/cloud-engineering/container-orchestration","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/container-orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/mrcloudchase/chasingcloudcareers-site/tree/main/docs/cloud-engineering/04-container-orchestration.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Infrastructure as Code (IaC)","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/infrastructure-as-code"},"next":{"title":"Multi-Cloud Architecture","permalink":"/chasingcloudcareers-site/docs/cloud-engineering/multi-cloud-architecture"}}');var t=s(4848),a=s(8453);const o={sidebar_position:5},i="Container Orchestration",c={},l=[{value:"Introduction to Containers",id:"introduction-to-containers",level:2},{value:"What are Containers?",id:"what-are-containers",level:3},{value:"Containers vs Virtual Machines",id:"containers-vs-virtual-machines",level:3},{value:"Docker Fundamentals",id:"docker-fundamentals",level:2},{value:"Installing Docker",id:"installing-docker",level:3},{value:"Docker Core Concepts",id:"docker-core-concepts",level:3},{value:"Basic Docker Commands",id:"basic-docker-commands",level:3},{value:"Creating Docker Images",id:"creating-docker-images",level:3},{value:"Docker Networking",id:"docker-networking",level:3},{value:"Docker Volumes",id:"docker-volumes",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Introduction to Kubernetes",id:"introduction-to-kubernetes",level:2},{value:"Kubernetes Architecture",id:"kubernetes-architecture",level:3},{value:"Setting Up Kubernetes",id:"setting-up-kubernetes",level:3},{value:"Basic Kubernetes Objects",id:"basic-kubernetes-objects",level:3},{value:"kubectl Commands",id:"kubectl-commands",level:3},{value:"Kubernetes Networking",id:"kubernetes-networking",level:3},{value:"Kubernetes Storage",id:"kubernetes-storage",level:3},{value:"Practical Kubernetes Projects",id:"practical-kubernetes-projects",level:2},{value:"Project 1: Full-Stack Web Application",id:"project-1-full-stack-web-application",level:3},{value:"Project 2: CI/CD Pipeline with Kubernetes",id:"project-2-cicd-pipeline-with-kubernetes",level:3},{value:"Multi-Cloud Kubernetes Services",id:"multi-cloud-kubernetes-services",level:2},{value:"Cloud-Managed Kubernetes Comparison",id:"cloud-managed-kubernetes-comparison",level:3},{value:"Amazon EKS (Elastic Kubernetes Service)",id:"amazon-eks-elastic-kubernetes-service",level:3},{value:"Google GKE (Google Kubernetes Engine)",id:"google-gke-google-kubernetes-engine",level:3},{value:"Azure AKS (Azure Kubernetes Service)",id:"azure-aks-azure-kubernetes-service",level:3},{value:"Container Security Best Practices",id:"container-security-best-practices",level:2},{value:"Image Security",id:"image-security",level:3},{value:"Runtime Security",id:"runtime-security",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"Free Learning Resources",id:"free-learning-resources",level:2},{value:"Docker Resources",id:"docker-resources",level:3},{value:"Kubernetes Resources",id:"kubernetes-resources",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3},{value:"Cloud Provider Resources",id:"cloud-provider-resources",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"container-orchestration",children:"Container Orchestration"})}),"\n",(0,t.jsx)(n.p,{children:"Master containerization with Docker and orchestration with Kubernetes to build, deploy, and manage modern cloud-native applications."}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-containers",children:"Introduction to Containers"}),"\n",(0,t.jsx)(n.p,{children:"Containers revolutionize how we package, distribute, and run applications by providing lightweight, portable, and consistent environments."}),"\n",(0,t.jsx)(n.h3,{id:"what-are-containers",children:"What are Containers?"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Traditional Deployment vs Containers:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Traditional Deployment:\nApplication \u2192 Operating System \u2192 Physical Hardware\n- Heavy resource usage\n- Environment inconsistencies\n- Slow deployment\n- Difficult scaling\n\n# Container Deployment:\nApplication \u2192 Container Runtime \u2192 Operating System \u2192 Hardware\n- Lightweight and efficient\n- Consistent environments\n- Fast deployment\n- Easy scaling\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Container Benefits:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Portability"}),": Run anywhere (dev, test, prod)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": Same environment across all stages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Efficiency"}),": Better resource utilization than VMs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Quick scaling up/down"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Isolation"}),": Applications don't interfere with each other"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Speed"}),": Fast startup and deployment times"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"containers-vs-virtual-machines",children:"Containers vs Virtual Machines"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Virtual Machines:\nHost OS \u2192 Hypervisor \u2192 [Guest OS + App] \xd7 N\n- Each VM includes full OS (GBs)\n- Slower boot times (minutes)\n- Higher resource overhead\n- Strong isolation\n\n# Containers:\nHost OS \u2192 Container Runtime \u2192 [App + Dependencies] \xd7 N\n- Share host OS kernel (MBs)\n- Fast boot times (seconds)\n- Lower resource overhead\n- Process-level isolation\n"})}),"\n",(0,t.jsx)(n.h2,{id:"docker-fundamentals",children:"Docker Fundamentals"}),"\n",(0,t.jsx)(n.p,{children:"Docker is the most popular containerization platform, providing tools to build, ship, and run containers."}),"\n",(0,t.jsx)(n.h3,{id:"installing-docker",children:"Installing Docker"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Linux (Ubuntu/Debian):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Update package index\nsudo apt update\n\n# Install required packages\nsudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release\n\n# Add Docker\'s official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Add Docker repository\necho "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io\n\n# Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Verify installation\ndocker --version\ndocker run hello-world\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"macOS:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Or using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop and verify\ndocker --version\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Docker Desktop for Windows\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Or using Chocolatey\nchoco install docker-desktop\n\n# Verify installation\ndocker --version\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-core-concepts",children:"Docker Core Concepts"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Images and Containers:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Image: Read-only template for creating containers\n# Container: Running instance of an image\n\n# Analogy:\n# Image = Class (blueprint)\n# Container = Object (instance)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Docker Architecture:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Docker Client: Command-line interface\n# Docker Daemon: Background service managing containers\n# Docker Registry: Repository for images (Docker Hub)\n# Dockerfile: Instructions to build images\n"})}),"\n",(0,t.jsx)(n.h3,{id:"basic-docker-commands",children:"Basic Docker Commands"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Working with Images:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List local images\ndocker images\ndocker image ls\n\n# Search for images on Docker Hub\ndocker search nginx\n\n# Pull image from registry\ndocker pull nginx\ndocker pull nginx:1.21-alpine  # Specific tag\n\n# Remove image\ndocker rmi nginx\ndocker image rm nginx\n\n# Build image from Dockerfile\ndocker build -t myapp:1.0 .\n\n# Tag image\ndocker tag myapp:1.0 myapp:latest\n\n# Push image to registry\ndocker push myusername/myapp:1.0\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Working with Containers:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run container\ndocker run nginx                    # Foreground\ndocker run -d nginx                 # Background (detached)\ndocker run -d --name webserver nginx  # With custom name\ndocker run -d -p 8080:80 nginx      # Port mapping\n\n# List containers\ndocker ps           # Running containers\ndocker ps -a        # All containers (including stopped)\n\n# Stop container\ndocker stop webserver\ndocker stop $(docker ps -q)  # Stop all running containers\n\n# Start stopped container\ndocker start webserver\n\n# Restart container\ndocker restart webserver\n\n# Remove container\ndocker rm webserver\ndocker rm $(docker ps -aq)  # Remove all containers\n\n# Execute commands in running container\ndocker exec -it webserver bash\ndocker exec webserver ls /etc\n\n# View container logs\ndocker logs webserver\ndocker logs -f webserver  # Follow logs\n\n# Inspect container\ndocker inspect webserver\n\n# View container resource usage\ndocker stats webserver\n"})}),"\n",(0,t.jsx)(n.h3,{id:"creating-docker-images",children:"Creating Docker Images"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Dockerfile Basics:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile for a simple web application\nFROM node:16-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs\nRUN adduser -S nextjs -u 1001\n\n# Change ownership of app directory\nRUN chown -R nextjs:nodejs /app\nUSER nextjs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\n# Start application\nCMD ["npm", "start"]\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Dockerfile Best Practices:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:'# Multi-stage build example\nFROM node:16-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY . .\nRUN npm run build\n\n# Production stage\nFROM node:16-alpine AS production\n\nWORKDIR /app\n\n# Copy only necessary files from builder stage\nCOPY --from=builder /app/dist ./dist\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package.json ./package.json\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nextjs -u 1001\n\nUSER nextjs\n\nEXPOSE 3000\n\nCMD ["npm", "start"]\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Building and Running Custom Images:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build image\ndocker build -t mywebapp:1.0 .\n\n# Build with build arguments\ndocker build --build-arg NODE_ENV=production -t mywebapp:1.0 .\n\n# Run custom image\ndocker run -d -p 3000:3000 --name webapp mywebapp:1.0\n\n# Run with environment variables\ndocker run -d -p 3000:3000 \\\n  -e NODE_ENV=production \\\n  -e DATABASE_URL=postgresql://user:pass@db:5432/mydb \\\n  --name webapp mywebapp:1.0\n\n# Run with volume mounts\ndocker run -d -p 3000:3000 \\\n  -v $(pwd)/data:/app/data \\\n  --name webapp mywebapp:1.0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-networking",children:"Docker Networking"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Types:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Bridge: Default network for containers\n# Host: Container uses host network directly\n# None: No networking\n# Custom: User-defined networks\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Working with Networks:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# List networks\ndocker network ls\n\n# Create custom network\ndocker network create mynetwork\ndocker network create --driver bridge --subnet=172.20.0.0/16 mynetwork\n\n# Run containers on custom network\ndocker run -d --name web --network mynetwork nginx\ndocker run -d --name app --network mynetwork myapp:1.0\n\n# Connect existing container to network\ndocker network connect mynetwork existing-container\n\n# Inspect network\ndocker network inspect mynetwork\n\n# Remove network\ndocker network rm mynetwork\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Container Communication:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Containers on same network can communicate by name\n# Example: web container connecting to database container\n\n# Run database\ndocker run -d --name postgres --network mynetwork \\\n  -e POSTGRES_DB=mydb \\\n  -e POSTGRES_USER=user \\\n  -e POSTGRES_PASSWORD=password \\\n  postgres:13\n\n# Run web app (can connect to postgres by name)\ndocker run -d --name webapp --network mynetwork \\\n  -e DATABASE_URL=postgresql://user:password@postgres:5432/mydb \\\n  -p 3000:3000 \\\n  mywebapp:1.0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-volumes",children:"Docker Volumes"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Volume Types:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Named volumes: Managed by Docker\n# Bind mounts: Mount host directory\n# tmpfs mounts: Temporary filesystem in memory\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Working with Volumes:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create named volume\ndocker volume create mydata\n\n# List volumes\ndocker volume ls\n\n# Inspect volume\ndocker volume inspect mydata\n\n# Run container with named volume\ndocker run -d --name database \\\n  -v mydata:/var/lib/postgresql/data \\\n  postgres:13\n\n# Run container with bind mount\ndocker run -d --name webapp \\\n  -v $(pwd)/app:/app \\\n  -v $(pwd)/logs:/app/logs \\\n  mywebapp:1.0\n\n# Run container with tmpfs mount\ndocker run -d --name cache \\\n  --tmpfs /tmp:rw,noexec,nosuid,size=100m \\\n  redis:6\n\n# Remove volume\ndocker volume rm mydata\n\n# Remove unused volumes\ndocker volume prune\n"})}),"\n",(0,t.jsx)(n.h3,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,t.jsx)(n.p,{children:"Docker Compose defines and runs multi-container applications using YAML files."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installing Docker Compose:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Linux\nsudo curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Verify installation\ndocker-compose --version\n\n# Note: Docker Desktop includes Docker Compose\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic docker-compose.yml:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\n\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://user:password@db:5432/mydb\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./logs:/app/logs\n    networks:\n      - app-network\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=mydb\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - app-network\n\n  redis:\n    image: redis:6-alpine\n    networks:\n      - app-network\n\nvolumes:\n  postgres_data:\n\nnetworks:\n  app-network:\n    driver: bridge\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advanced Docker Compose Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nservices:\n  nginx:\n    image: nginx:alpine\n    ports:\n      - "80:80"\n      - "443:443"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - web\n    networks:\n      - frontend\n    restart: unless-stopped\n\n  web:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - NODE_ENV=production\n    environment:\n      - DATABASE_URL=postgresql://user:${DB_PASSWORD}@db:5432/mydb\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_started\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - frontend\n      - backend\n    restart: unless-stopped\n    deploy:\n      replicas: 3\n      resources:\n        limits:\n          cpus: \'0.5\'\n          memory: 512M\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=mydb\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    networks:\n      - backend\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  redis:\n    image: redis:6-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    networks:\n      - backend\n    restart: unless-stopped\n\n  monitoring:\n    image: prom/prometheus\n    ports:\n      - "9090:9090"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro\n    networks:\n      - monitoring\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  frontend:\n  backend:\n  monitoring:\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Docker Compose Commands:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start services\ndocker-compose up\ndocker-compose up -d  # Detached mode\n\n# Build and start\ndocker-compose up --build\n\n# Start specific service\ndocker-compose up web\n\n# Stop services\ndocker-compose down\n\n# Stop and remove volumes\ndocker-compose down -v\n\n# View running services\ndocker-compose ps\n\n# View logs\ndocker-compose logs\ndocker-compose logs -f web  # Follow logs for specific service\n\n# Execute command in service\ndocker-compose exec web bash\ndocker-compose exec db psql -U user -d mydb\n\n# Scale services\ndocker-compose up --scale web=3\n\n# Restart services\ndocker-compose restart\ndocker-compose restart web\n"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-kubernetes",children:"Introduction to Kubernetes"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes (K8s) is an open-source container orchestration platform that automates deployment, scaling, and management of containerized applications."}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-architecture",children:"Kubernetes Architecture"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Master Components:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# API Server: Frontend for Kubernetes control plane\n# etcd: Distributed key-value store for cluster data\n# Scheduler: Assigns pods to nodes\n# Controller Manager: Runs controller processes\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node Components:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# kubelet: Agent that runs on each node\n# kube-proxy: Network proxy on each node\n# Container Runtime: Docker, containerd, or CRI-O\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key Concepts:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Pod: Smallest deployable unit (one or more containers)\n# Service: Stable network endpoint for pods\n# Deployment: Manages replica sets and rolling updates\n# Namespace: Virtual clusters within physical cluster\n# ConfigMap: Configuration data for applications\n# Secret: Sensitive data like passwords and keys\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-kubernetes",children:"Setting Up Kubernetes"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Local Development Options:"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Minikube:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start minikube\nminikube start\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable ingress\n\n# Access dashboard\nminikube dashboard\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Kind (Kubernetes in Docker):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install kind\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n\n# Create cluster\nkind create cluster --name dev-cluster\n\n# Create multi-node cluster\ncat > kind-config.yaml << EOF\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n- role: worker\n- role: worker\nEOF\n\nkind create cluster --config kind-config.yaml --name multi-node\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Docker Desktop:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable Kubernetes in Docker Desktop settings\n# Kubernetes will be available automatically\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installing kubectl:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Linux\ncurl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n\n# macOS\nbrew install kubectl\n\n# Windows\nchoco install kubernetes-cli\n\n# Verify installation\nkubectl version --client\n'})}),"\n",(0,t.jsx)(n.h3,{id:"basic-kubernetes-objects",children:"Basic Kubernetes Objects"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Pods:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\n  labels:\n    app: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.21\n    ports:\n    - containerPort: 80\n    resources:\n      requests:\n        memory: "64Mi"\n        cpu: "250m"\n      limits:\n        memory: "128Mi"\n        cpu: "500m"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Deployments:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.21\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            memory: "64Mi"\n            cpu: "250m"\n          limits:\n            memory: "128Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Services:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: ClusterIP  # ClusterIP, NodePort, LoadBalancer\n---\n# NodePort service example\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-nodeport\nspec:\n  selector:\n    app: nginx\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n    nodePort: 30080\n  type: NodePort\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ConfigMaps and Secrets:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  database_host: "postgres.example.com"\n  database_port: "5432"\n  log_level: "info"\n  config.properties: |\n    database.host=postgres.example.com\n    database.port=5432\n    log.level=info\n---\n# secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\ndata:\n  database_password: cGFzc3dvcmQxMjM=  # base64 encoded\n  api_key: YWJjZGVmZ2hpams=  # base64 encoded\nstringData:\n  username: admin  # Will be automatically base64 encoded\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kubectl-commands",children:"kubectl Commands"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Basic Operations:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Apply configuration\nkubectl apply -f deployment.yaml\nkubectl apply -f .  # Apply all YAML files in directory\n\n# Get resources\nkubectl get pods\nkubectl get deployments\nkubectl get services\nkubectl get all\n\n# Describe resources\nkubectl describe pod nginx-pod\nkubectl describe deployment nginx-deployment\n\n# Delete resources\nkubectl delete pod nginx-pod\nkubectl delete -f deployment.yaml\nkubectl delete deployment nginx-deployment\n\n# Edit resources\nkubectl edit deployment nginx-deployment\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Working with Pods:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Get pods with more information\nkubectl get pods -o wide\nkubectl get pods --show-labels\n\n# Execute commands in pod\nkubectl exec -it nginx-pod -- bash\nkubectl exec nginx-pod -- ls /etc\n\n# Port forwarding\nkubectl port-forward pod/nginx-pod 8080:80\n\n# View logs\nkubectl logs nginx-pod\nkubectl logs -f nginx-pod  # Follow logs\nkubectl logs nginx-pod -c container-name  # Multi-container pod\n\n# Copy files\nkubectl cp nginx-pod:/etc/nginx/nginx.conf ./nginx.conf\nkubectl cp ./local-file nginx-pod:/tmp/\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Scaling and Updates:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Scale deployment\nkubectl scale deployment nginx-deployment --replicas=5\n\n# Rolling update\nkubectl set image deployment/nginx-deployment nginx=nginx:1.22\n\n# Check rollout status\nkubectl rollout status deployment/nginx-deployment\n\n# View rollout history\nkubectl rollout history deployment/nginx-deployment\n\n# Rollback\nkubectl rollout undo deployment/nginx-deployment\nkubectl rollout undo deployment/nginx-deployment --to-revision=2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-networking",children:"Kubernetes Networking"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Service Types:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ClusterIP (default) - Internal cluster access only\napiVersion: v1\nkind: Service\nmetadata:\n  name: internal-service\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: ClusterIP\n\n---\n# NodePort - Exposes service on each node's IP\napiVersion: v1\nkind: Service\nmetadata:\n  name: nodeport-service\nspec:\n  selector:\n    app: web\n  ports:\n  - port: 80\n    targetPort: 80\n    nodePort: 30080\n  type: NodePort\n\n---\n# LoadBalancer - Cloud provider load balancer\napiVersion: v1\nkind: Service\nmetadata:\n  name: loadbalancer-service\nspec:\n  selector:\n    app: web\n  ports:\n  - port: 80\n    targetPort: 80\n  type: LoadBalancer\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Ingress:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: web-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: api-service\n            port:\n              number: 8080\n  tls:\n  - hosts:\n    - myapp.example.com\n    secretName: tls-secret\n"})}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-storage",children:"Kubernetes Storage"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Persistent Volumes and Claims:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# persistent-volume.yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: postgres-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: manual\n  hostPath:\n    path: /data/postgres\n\n---\n# persistent-volume-claim.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: manual\n\n---\n# Using PVC in deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13\n        env:\n        - name: POSTGRES_DB\n          value: mydb\n        - name: POSTGRES_USER\n          value: user\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secret\n              key: password\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n      volumes:\n      - name: postgres-storage\n        persistentVolumeClaim:\n          claimName: postgres-pvc\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-kubernetes-projects",children:"Practical Kubernetes Projects"}),"\n",(0,t.jsx)(n.h3,{id:"project-1-full-stack-web-application",children:"Project 1: Full-Stack Web Application"}),"\n",(0,t.jsx)(n.p,{children:"Deploy a complete web application with frontend, backend, database, and monitoring."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Directory Structure:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"k8s-webapp/\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 k8s/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 k8s/\n\u251c\u2500\u2500 database/\n\u2502   \u2514\u2500\u2500 k8s/\n\u251c\u2500\u2500 monitoring/\n\u2502   \u2514\u2500\u2500 k8s/\n\u2514\u2500\u2500 ingress/\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Frontend Deployment:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# frontend/k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend\n  labels:\n    app: frontend\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n      - name: frontend\n        image: myregistry/frontend:1.0\n        ports:\n        - containerPort: 3000\n        env:\n        - name: REACT_APP_API_URL\n          value: "http://api.myapp.com"\n        resources:\n          requests:\n            memory: "128Mi"\n            cpu: "100m"\n          limits:\n            memory: "256Mi"\n            cpu: "200m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 3000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: frontend\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Backend Deployment:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# backend/k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend\n  labels:\n    app: backend\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n      - name: backend\n        image: myregistry/backend:1.0\n        ports:\n        - containerPort: 8080\n        env:\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: jwt-secret\n        - name: REDIS_URL\n          value: "redis://redis-service:6379"\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "200m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8080\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8080\n          initialDelaySeconds: 10\n          periodSeconds: 5\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\nspec:\n  selector:\n    app: backend\n  ports:\n  - port: 80\n    targetPort: 8080\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Database StatefulSet:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# database/k8s/statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\nspec:\n  serviceName: postgres-service\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:13\n        env:\n        - name: POSTGRES_DB\n          value: myapp\n        - name: POSTGRES_USER\n          value: myuser\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-secret\n              key: password\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: postgres-data\n          mountPath: /var/lib/postgresql/data\n        resources:\n          requests:\n            memory: "256Mi"\n            cpu: "200m"\n          limits:\n            memory: "512Mi"\n            cpu: "500m"\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-data\n    spec:\n      accessModes: ["ReadWriteOnce"]\n      resources:\n        requests:\n          storage: 10Gi\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-service\nspec:\n  selector:\n    app: postgres\n  ports:\n  - port: 5432\n    targetPort: 5432\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Redis Cache:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# database/k8s/redis.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:6-alpine\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: "64Mi"\n            cpu: "50m"\n          limits:\n            memory: "128Mi"\n            cpu: "100m"\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-service\nspec:\n  selector:\n    app: redis\n  ports:\n  - port: 6379\n    targetPort: 6379\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Ingress Configuration:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# ingress/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: app-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    cert-manager.io/cluster-issuer: "letsencrypt-prod"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - myapp.example.com\n    secretName: app-tls\n  rules:\n  - host: myapp.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: frontend-service\n            port:\n              number: 80\n      - path: /api\n        pathType: Prefix\n        backend:\n          service:\n            name: backend-service\n            port:\n              number: 80\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Secrets and ConfigMaps:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secret\ntype: Opaque\nstringData:\n  password: "supersecretpassword"\n  url: "postgresql://myuser:supersecretpassword@postgres-service:5432/myapp"\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\nstringData:\n  jwt-secret: "your-jwt-secret-key"\n\n---\n# configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-config\ndata:\n  log_level: "info"\n  max_connections: "100"\n  timeout: "30s"\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Deployment Script:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# deploy.sh\n\n# Create namespace\nkubectl create namespace myapp\n\n# Apply secrets and configmaps\nkubectl apply -f secrets.yaml -n myapp\nkubectl apply -f configmap.yaml -n myapp\n\n# Deploy database\nkubectl apply -f database/k8s/ -n myapp\n\n# Wait for database to be ready\nkubectl wait --for=condition=ready pod -l app=postgres -n myapp --timeout=300s\n\n# Deploy backend\nkubectl apply -f backend/k8s/ -n myapp\n\n# Wait for backend to be ready\nkubectl wait --for=condition=ready pod -l app=backend -n myapp --timeout=300s\n\n# Deploy frontend\nkubectl apply -f frontend/k8s/ -n myapp\n\n# Deploy ingress\nkubectl apply -f ingress/ -n myapp\n\necho "Deployment complete!"\necho "Check status with: kubectl get all -n myapp"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"project-2-cicd-pipeline-with-kubernetes",children:"Project 2: CI/CD Pipeline with Kubernetes"}),"\n",(0,t.jsx)(n.p,{children:"Set up automated deployment pipeline using GitHub Actions and Kubernetes."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:".github/workflows/deploy.yml:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"name: Build and Deploy to Kubernetes\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Log in to Container Registry\n      uses: docker/login-action@v2\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v4\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha,prefix={{branch}}-\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v3\n      with:\n        context: .\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v1\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG }}\n\n    - name: Deploy to Kubernetes\n      run: |\n        # Update image tag in deployment\n        sed -i \"s|IMAGE_TAG|${{ github.sha }}|g\" k8s/deployment.yaml\n        \n        # Apply Kubernetes manifests\n        kubectl apply -f k8s/ -n production\n        \n        # Wait for rollout to complete\n        kubectl rollout status deployment/myapp -n production --timeout=300s\n\n    - name: Verify deployment\n      run: |\n        kubectl get pods -n production\n        kubectl get services -n production\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multi-cloud-kubernetes-services",children:"Multi-Cloud Kubernetes Services"}),"\n",(0,t.jsx)(n.p,{children:"Kubernetes provides a consistent container orchestration platform across all major cloud providers, enabling true cloud portability."}),"\n",(0,t.jsx)(n.h3,{id:"cloud-managed-kubernetes-comparison",children:"Cloud-Managed Kubernetes Comparison"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"AWS EKS"}),(0,t.jsx)(n.th,{children:"Azure AKS"}),(0,t.jsx)(n.th,{children:"GCP GKE"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Control Plane"})}),(0,t.jsx)(n.td,{children:"Managed"}),(0,t.jsx)(n.td,{children:"Managed"}),(0,t.jsx)(n.td,{children:"Managed"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Node Management"})}),(0,t.jsx)(n.td,{children:"Self-managed or Fargate"}),(0,t.jsx)(n.td,{children:"VM Scale Sets"}),(0,t.jsx)(n.td,{children:"Node Pools"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Networking"})}),(0,t.jsx)(n.td,{children:"VPC CNI"}),(0,t.jsx)(n.td,{children:"Azure CNI/Kubenet"}),(0,t.jsx)(n.td,{children:"VPC-native"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Load Balancing"})}),(0,t.jsx)(n.td,{children:"ALB/NLB"}),(0,t.jsx)(n.td,{children:"Azure Load Balancer"}),(0,t.jsx)(n.td,{children:"Cloud Load Balancing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Storage"})}),(0,t.jsx)(n.td,{children:"EBS CSI"}),(0,t.jsx)(n.td,{children:"Azure Disk/Files"}),(0,t.jsx)(n.td,{children:"Persistent Disk"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Monitoring"})}),(0,t.jsx)(n.td,{children:"CloudWatch"}),(0,t.jsx)(n.td,{children:"Azure Monitor"}),(0,t.jsx)(n.td,{children:"Cloud Operations"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Cost"})}),(0,t.jsx)(n.td,{children:"$0.10/hour per cluster"}),(0,t.jsx)(n.td,{children:"Free control plane"}),(0,t.jsx)(n.td,{children:"$0.10/hour per cluster"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"amazon-eks-elastic-kubernetes-service",children:"Amazon EKS (Elastic Kubernetes Service)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Creating EKS Cluster:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Install eksctl\ncurl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp\nsudo mv /tmp/eksctl /usr/local/bin\n\n# Create cluster\neksctl create cluster \\\n  --name my-cluster \\\n  --version 1.24 \\\n  --region us-west-2 \\\n  --nodegroup-name standard-workers \\\n  --node-type t3.medium \\\n  --nodes 3 \\\n  --nodes-min 1 \\\n  --nodes-max 4 \\\n  --managed\n\n# Configure kubectl\naws eks update-kubeconfig --region us-west-2 --name my-cluster\n\n# Verify connection\nkubectl get nodes\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"EKS with Terraform:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-hcl",children:'# eks-cluster.tf\nmodule "eks" {\n  source  = "terraform-aws-modules/eks/aws"\n  version = "~> 19.0"\n\n  cluster_name    = "my-cluster"\n  cluster_version = "1.24"\n\n  vpc_id                         = module.vpc.vpc_id\n  subnet_ids                     = module.vpc.private_subnets\n  cluster_endpoint_public_access = true\n\n  eks_managed_node_groups = {\n    main = {\n      name = "main"\n\n      instance_types = ["t3.medium"]\n\n      min_size     = 1\n      max_size     = 10\n      desired_size = 3\n    }\n  }\n\n  tags = {\n    Environment = "dev"\n    Terraform   = "true"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"google-gke-google-kubernetes-engine",children:"Google GKE (Google Kubernetes Engine)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Creating GKE Cluster:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install gcloud CLI\ncurl https://sdk.cloud.google.com | bash\nexec -l $SHELL\ngcloud init\n\n# Create cluster\ngcloud container clusters create my-cluster \\\n  --zone us-central1-a \\\n  --num-nodes 3 \\\n  --enable-autoscaling \\\n  --min-nodes 1 \\\n  --max-nodes 10 \\\n  --machine-type e2-medium\n\n# Get credentials\ngcloud container clusters get-credentials my-cluster --zone us-central1-a\n\n# Verify connection\nkubectl get nodes\n"})}),"\n",(0,t.jsx)(n.h3,{id:"azure-aks-azure-kubernetes-service",children:"Azure AKS (Azure Kubernetes Service)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Creating AKS Cluster:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create resource group\naz group create --name myResourceGroup --location eastus\n\n# Create AKS cluster\naz aks create \\\n  --resource-group myResourceGroup \\\n  --name myAKSCluster \\\n  --node-count 3 \\\n  --enable-addons monitoring \\\n  --generate-ssh-keys\n\n# Get credentials\naz aks get-credentials --resource-group myResourceGroup --name myAKSCluster\n\n# Verify connection\nkubectl get nodes\n"})}),"\n",(0,t.jsx)(n.h2,{id:"container-security-best-practices",children:"Container Security Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"image-security",children:"Image Security"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Secure Base Images:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dockerfile",children:"# Use official, minimal base images\nFROM node:16-alpine  # Alpine is smaller and more secure\n\n# Use specific tags, not 'latest'\nFROM node:16.17.0-alpine\n\n# Use distroless images for production\nFROM gcr.io/distroless/nodejs:16\n\n# Multi-stage builds to reduce attack surface\nFROM node:16-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM gcr.io/distroless/nodejs:16\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY . .\nCMD [\"app.js\"]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Image Scanning:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Scan images for vulnerabilities\ndocker scan myapp:1.0\n\n# Use Trivy for comprehensive scanning\ntrivy image myapp:1.0\n\n# Integrate scanning in CI/CD\n- name: Run Trivy vulnerability scanner\n  uses: aquasecurity/trivy-action@master\n  with:\n    image-ref: 'myapp:${{ github.sha }}'\n    format: 'sarif'\n    output: 'trivy-results.sarif'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"runtime-security",children:"Runtime Security"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Security Contexts:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n  containers:\n  - name: app\n    image: myapp:1.0\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n        add:\n        - NET_BIND_SERVICE\n    volumeMounts:\n    - name: tmp\n      mountPath: /tmp\n    - name: cache\n      mountPath: /app/cache\n  volumes:\n  - name: tmp\n    emptyDir: {}\n  - name: cache\n    emptyDir: {}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Network Policies:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-frontend-to-backend\nspec:\n  podSelector:\n    matchLabels:\n      app: backend\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n    ports:\n    - protocol: TCP\n      port: 8080\n"})}),"\n",(0,t.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Resource Quotas:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: "4"\n    requests.memory: 8Gi\n    limits.cpu: "8"\n    limits.memory: 16Gi\n    persistentvolumeclaims: "10"\n    pods: "10"\n\n---\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: limit-range\n  namespace: production\nspec:\n  limits:\n  - default:\n      cpu: "500m"\n      memory: "512Mi"\n    defaultRequest:\n      cpu: "100m"\n      memory: "128Mi"\n    type: Container\n'})}),"\n",(0,t.jsx)(n.h2,{id:"free-learning-resources",children:"Free Learning Resources"}),"\n",(0,t.jsx)(n.h3,{id:"docker-resources",children:"Docker Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.docker.com/",children:"Docker Documentation"})," - Official Docker documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://hub.docker.com/",children:"Docker Hub"})," - Container image registry"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://labs.play-with-docker.com/",children:"Play with Docker"})," - Browser-based Docker playground"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docker-curriculum.com/",children:"Docker Curriculum"})," - Beginner-friendly tutorial"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-resources",children:"Kubernetes Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/",children:"Kubernetes Documentation"})," - Official Kubernetes documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://kubernetes.io/docs/tutorials/",children:"Kubernetes Tutorials"})," - Step-by-step tutorials"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://labs.play-with-k8s.com/",children:"Play with Kubernetes"})," - Browser-based Kubernetes playground"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.katacoda.com/courses/kubernetes",children:"Katacoda Kubernetes"})," - Interactive scenarios"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://killercoda.com/",children:"KillerCoda"})," - Interactive Kubernetes scenarios"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/kelseyhightower/kubernetes-the-hard-way",children:"Kubernetes the Hard Way"})," - Learn K8s internals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/dgkanatsios/CKAD-exercises",children:"CKAD Exercises"})," - Certification practice"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cloud-provider-resources",children:"Cloud Provider Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.eksworkshop.com/",children:"AWS EKS Workshop"})," - Hands-on EKS learning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs",children:"Google Cloud Kubernetes Engine"})," - GKE documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/aks/",children:"Azure Kubernetes Service"})," - AKS documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After mastering container orchestration:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Advanced Kubernetes"}),": Service mesh (Istio), operators, custom resources"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitOps"}),": ArgoCD, Flux for continuous deployment"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Observability"}),": Prometheus, Grafana, Jaeger for monitoring"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": Falco, OPA Gatekeeper, Pod Security Standards"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Certification"}),": CKA, CKAD, CKS certifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Join Communities"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.reddit.com/r/kubernetes/",children:"r/kubernetes"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://slack.k8s.io/",children:"Kubernetes Slack"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Continue to ",(0,t.jsx)(n.strong,{children:"Multi-Cloud Architecture"})," to learn advanced cloud strategies, or explore ",(0,t.jsx)(n.strong,{children:"DevOps and CI/CD"})," for complete automation pipelines!"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var r=s(6540);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);